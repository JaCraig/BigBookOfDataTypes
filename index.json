{
  "api/BigBook.AsyncHelper.html": {
    "href": "api/BigBook.AsyncHelper.html",
    "title": "Class AsyncHelper | Big Book of DataTypes API Reference",
    "keywords": "Class AsyncHelper Async helper. Inheritance object AsyncHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook Assembly: BigBook.dll Syntax public static class AsyncHelper Methods | Edit this page View Source RunSync(Func<Task>) Runs the synchronously. Declaration public static void RunSync(this Func<Task> func) Parameters Type Name Description Func<Task> func The function. | Edit this page View Source RunSync<TResult>(Func<Task<TResult>>) Runs the Func synchronously. Declaration public static TResult RunSync<TResult>(Func<Task<TResult>> func) Parameters Type Name Description Func<Task<TResult>> func The function. Returns Type Description TResult The result. Type Parameters Name Description TResult The type of the result."
  },
  "api/BigBook.Bag-1.html": {
    "href": "api/BigBook.Bag-1.html",
    "title": "Class Bag<T> | Big Book of DataTypes API Reference",
    "keywords": "Class Bag<T> Used to count the number of times something is added to the list Inheritance object Bag<T> Implements ICollection<T> IEnumerable<T> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook Assembly: BigBook.dll Syntax public class Bag<T> : ICollection<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T Type of data within the bag Constructors | Edit this page View Source Bag() Constructor Declaration public Bag() Properties | Edit this page View Source Count Number of items in the bag Declaration public virtual int Count { get; } Property Value Type Description int | Edit this page View Source IsReadOnly Is this read only? Declaration public virtual bool IsReadOnly { get; } Property Value Type Description bool | Edit this page View Source this[T] Gets a specified item Declaration public virtual int this[T index] { get; set; } Parameters Type Name Description T index Item to get Property Value Type Description int The number of this item in the bag | Edit this page View Source Items Actual internal container Declaration protected ConcurrentDictionary<T, int> Items { get; } Property Value Type Description ConcurrentDictionary<T, int> Methods | Edit this page View Source Add(T) Adds an item to the bag Declaration public virtual void Add(T item) Parameters Type Name Description T item Item to add | Edit this page View Source Clear() Clears the bag Declaration public virtual void Clear() | Edit this page View Source Contains(T) Determines if the bag contains an item Declaration public virtual bool Contains(T item) Parameters Type Name Description T item Item to check Returns Type Description bool True if it does, false otherwise | Edit this page View Source CopyTo(T[], int) Copies the bag to an array Declaration public virtual void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array Array to copy to int arrayIndex Index to start at | Edit this page View Source GetEnumerator() Gets the enumerator Declaration public virtual IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator<T> The enumerator | Edit this page View Source Remove(T) Removes an item from the bag Declaration public virtual bool Remove(T item) Parameters Type Name Description T item Item to remove Returns Type Description bool True if it is removed, false otherwise Implements ICollection<T> IEnumerable<T> IEnumerable"
  },
  "api/BigBook.BinaryTree-1.html": {
    "href": "api/BigBook.BinaryTree-1.html",
    "title": "Class BinaryTree<T> | Big Book of DataTypes API Reference",
    "keywords": "Class BinaryTree<T> Binary tree Inheritance object BinaryTree<T> Implements ICollection<T> IEnumerable<T> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: BigBook Assembly: BigBook.dll Syntax public class BinaryTree<T> : ICollection<T>, IEnumerable<T>, IEnumerable where T : IComparable<T> Type Parameters Name Description T The type held by the nodes Constructors | Edit this page View Source BinaryTree(TreeNode<T>?) Constructor Declaration public BinaryTree(TreeNode<T>? root = null) Parameters Type Name Description TreeNode<T> root Root of the binary tree Properties | Edit this page View Source Count Number of items in the tree Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source IsEmpty Is the tree empty Declaration public bool IsEmpty { get; } Property Value Type Description bool | Edit this page View Source IsReadOnly Is this read only? Declaration public bool IsReadOnly { get; } Property Value Type Description bool | Edit this page View Source MaxValue Gets the maximum value of the tree Declaration public T MaxValue { get; } Property Value Type Description T | Edit this page View Source MinValue Gets the minimum value of the tree Declaration public T MinValue { get; } Property Value Type Description T | Edit this page View Source NumberOfNodes The number of nodes in the tree Declaration protected int NumberOfNodes { get; set; } Property Value Type Description int | Edit this page View Source Root The root value Declaration public TreeNode<T>? Root { get; set; } Property Value Type Description TreeNode<T> Methods | Edit this page View Source Add(T) Adds an item to a binary tree Declaration public void Add(T item) Parameters Type Name Description T item Item to add | Edit this page View Source Clear() Clears all items from the tree Declaration public void Clear() | Edit this page View Source Contains(T) Determines if the tree contains an item Declaration public bool Contains(T item) Parameters Type Name Description T item Item to check Returns Type Description bool True if it is, false otherwise | Edit this page View Source CopyTo(T[], int) Copies the tree to an array Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array Array to copy to int arrayIndex Index to start at | Edit this page View Source Find(T) Finds a specific object Declaration protected TreeNode<T>? Find(T item) Parameters Type Name Description T item The item to find Returns Type Description TreeNode<T> The node if it is found | Edit this page View Source GetEnumerator() Gets the enumerator Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator<T> The enumerator | Edit this page View Source Insert(T) Inserts a value Declaration protected void Insert(T item) Parameters Type Name Description T item item to insert | Edit this page View Source Remove(T) Removes an item from the tree Declaration public bool Remove(T item) Parameters Type Name Description T item Item to remove Returns Type Description bool True if it is removed, false otherwise | Edit this page View Source ToString() Outputs the tree as a string Declaration public override string ToString() Returns Type Description string The string representation of the tree Overrides object.ToString() | Edit this page View Source Traversal(TreeNode<T>?) Traverses the list Declaration protected IEnumerable<TreeNode<T>> Traversal(TreeNode<T>? node) Parameters Type Name Description TreeNode<T> node The node to start the search from Returns Type Description IEnumerable<TreeNode<T>> The individual items from the tree Operators | Edit this page View Source implicit operator string(BinaryTree<T>?) Converts the object to a string Declaration public static implicit operator string(BinaryTree<T>? value) Parameters Type Name Description BinaryTree<T> value Value to convert Returns Type Description string The value as a string Implements ICollection<T> IEnumerable<T> IEnumerable"
  },
  "api/BigBook.BloomFilter-1.HashFunction.html": {
    "href": "api/BigBook.BloomFilter-1.HashFunction.html",
    "title": "Delegate BloomFilter<TObject>.HashFunction | Big Book of DataTypes API Reference",
    "keywords": "Delegate BloomFilter<TObject>.HashFunction Hash function delegate Namespace: BigBook Assembly: BigBook.dll Syntax public delegate int BloomFilter<TObject>.HashFunction(TObject input) Parameters Type Name Description TObject input The input. Returns Type Description int The hashed value."
  },
  "api/BigBook.BloomFilter-1.html": {
    "href": "api/BigBook.BloomFilter-1.html",
    "title": "Class BloomFilter<TObject> | Big Book of DataTypes API Reference",
    "keywords": "Class BloomFilter<TObject> Bloom filter Inheritance object BloomFilter<TObject> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook Assembly: BigBook.dll Syntax public class BloomFilter<TObject> Type Parameters Name Description TObject The type of the object. Constructors | Edit this page View Source BloomFilter(int) Initializes a new instance of the BloomFilter<TObject> class. Declaration public BloomFilter(int size) Parameters Type Name Description int size The size. | Edit this page View Source BloomFilter(int, HashFunction?) Initializes a new instance of the BloomFilter<TObject> class. Declaration public BloomFilter(int size, BloomFilter<TObject>.HashFunction? hashFunction) Parameters Type Name Description int size The size. BloomFilter<TObject>.HashFunction hashFunction The hash function. | Edit this page View Source BloomFilter(int, float) Initializes a new instance of the BloomFilter<TObject> class. Declaration public BloomFilter(int size, float errorRate) Parameters Type Name Description int size The size. float errorRate The error rate. | Edit this page View Source BloomFilter(int, float, HashFunction?) Initializes a new instance of the BloomFilter<TObject> class. Declaration public BloomFilter(int size, float errorRate, BloomFilter<TObject>.HashFunction? hashFunction) Parameters Type Name Description int size The size. float errorRate The error rate. BloomFilter<TObject>.HashFunction hashFunction The hash function. | Edit this page View Source BloomFilter(int, float, HashFunction?, int, int) Initializes a new instance of the BloomFilter<TObject> class. Declaration public BloomFilter(int size, float errorRate, BloomFilter<TObject>.HashFunction? hashFunction, int m, int k) Parameters Type Name Description int size The size. float errorRate The error rate. BloomFilter<TObject>.HashFunction hashFunction The hash function. int m The m. int k The k. Exceptions Type Condition ArgumentOutOfRangeException ArgumentNullException hashFunction Methods | Edit this page View Source Add(TObject) Adds a new item to the filter. It cannot be removed. Declaration public void Add(TObject item) Parameters Type Name Description TObject item The item. | Edit this page View Source Contains(TObject) Checks for the existance of the item in the filter for a given probability. Declaration public bool Contains(TObject item) Parameters Type Name Description TObject item The item. Returns Type Description bool true if [contains] [the specified item]; otherwise, false."
  },
  "api/BigBook.CanisterModules.BigBookModule.html": {
    "href": "api/BigBook.CanisterModules.BigBookModule.html",
    "title": "Class BigBookModule | Big Book of DataTypes API Reference",
    "keywords": "Class BigBookModule Big book module Inheritance object BigBookModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook.CanisterModules Assembly: BigBook.dll Syntax public class BigBookModule : IModule Properties | Edit this page View Source Order Order to run it in Declaration public int Order { get; } Property Value Type Description int See Also IModule Methods | Edit this page View Source Load(IServiceCollection?) Loads the module Declaration public void Load(IServiceCollection? bootstrapper) Parameters Type Name Description IServiceCollection bootstrapper Bootstrapper to register with See Also IModule Implements IModule See Also IModule"
  },
  "api/BigBook.CanisterModules.html": {
    "href": "api/BigBook.CanisterModules.html",
    "title": "Namespace BigBook.CanisterModules | Big Book of DataTypes API Reference",
    "keywords": "Namespace BigBook.CanisterModules Classes BigBookModule Big book module"
  },
  "api/BigBook.Change.html": {
    "href": "api/BigBook.Change.html",
    "title": "Struct Change | Big Book of DataTypes API Reference",
    "keywords": "Struct Change Change class Implements IEquatable<Change> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: BigBook Assembly: BigBook.dll Syntax public struct Change : IEquatable<Change> Constructors | Edit this page View Source Change(object?, object?) Constructor Declaration public Change(object? originalValue, object? newValue) Parameters Type Name Description object originalValue Original value object newValue New value See Also IEquatable<T> Properties | Edit this page View Source NewValue New value Declaration public readonly object? NewValue { get; } Property Value Type Description object See Also IEquatable<T> | Edit this page View Source OriginalValue Original value Declaration public readonly object? OriginalValue { get; } Property Value Type Description object See Also IEquatable<T> Methods | Edit this page View Source Equals(Change) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Change other) Parameters Type Name Description Change other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. See Also IEquatable<T> | Edit this page View Source Equals(object?) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(object) See Also IEquatable<T> | Edit this page View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() See Also IEquatable<T> Operators | Edit this page View Source operator ==(Change, Change) Implements the operator ==. Declaration public static bool operator ==(Change left, Change right) Parameters Type Name Description Change left The left. Change right The right. Returns Type Description bool The result of the operator. See Also IEquatable<T> | Edit this page View Source operator !=(Change, Change) Implements the operator !=. Declaration public static bool operator !=(Change left, Change right) Parameters Type Name Description Change left The left. Change right The right. Returns Type Description bool The result of the operator. See Also IEquatable<T> Implements IEquatable<T> See Also IEquatable<T>"
  },
  "api/BigBook.CharIs.html": {
    "href": "api/BigBook.CharIs.html",
    "title": "Enum CharIs | Big Book of DataTypes API Reference",
    "keywords": "Enum CharIs What type of character is this Namespace: BigBook Assembly: BigBook.dll Syntax [Flags] public enum CharIs Fields Name Description Control Control Digit Digit HighSurrogate High surrogate Letter Letter LetterOrDigit letter or digit LowSurrogate Low surrogate Lower Lower None The none Number Number Punctuation Punctuation Surrogate Surrogate Symbol Symbol Upper Upper case WhiteSpace White space"
  },
  "api/BigBook.Comparison.GenericComparer-1.html": {
    "href": "api/BigBook.Comparison.GenericComparer-1.html",
    "title": "Class GenericComparer<TData> | Big Book of DataTypes API Reference",
    "keywords": "Class GenericComparer<TData> Generic IComparable class Inheritance object GenericComparer<TData> Implements IComparer<TData> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook.Comparison Assembly: BigBook.dll Syntax public class GenericComparer<TData> : IComparer<TData> where TData : IComparable Type Parameters Name Description TData Data type Properties | Edit this page View Source Comparer Gets the comparer. Declaration public static GenericComparer<TData> Comparer { get; } Property Value Type Description GenericComparer<TData> The comparer. Methods | Edit this page View Source Compare(TData, TData) Compares the two objects Declaration public int Compare(TData x, TData y) Parameters Type Name Description TData x Object 1 TData y Object 2 Returns Type Description int 0 if they're equal, any other value they are not Implements IComparer<T>"
  },
  "api/BigBook.Comparison.GenericEqualityComparer-1.html": {
    "href": "api/BigBook.Comparison.GenericEqualityComparer-1.html",
    "title": "Class GenericEqualityComparer<TData> | Big Book of DataTypes API Reference",
    "keywords": "Class GenericEqualityComparer<TData> Generic equality comparer Inheritance object GenericEqualityComparer<TData> Implements IEqualityComparer<TData> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook.Comparison Assembly: BigBook.dll Syntax public class GenericEqualityComparer<TData> : IEqualityComparer<TData> Type Parameters Name Description TData Data type Properties | Edit this page View Source Comparer Gets the comparer. Declaration public static GenericEqualityComparer<TData> Comparer { get; } Property Value Type Description GenericEqualityComparer<TData> The comparer. Methods | Edit this page View Source Equals(TData, TData) Determines if the two items are equal Declaration public bool Equals(TData x, TData y) Parameters Type Name Description TData x Object 1 TData y Object 2 Returns Type Description bool True if they are, false otherwise | Edit this page View Source GetHashCode(TData) Get hash code Declaration public int GetHashCode(TData obj) Parameters Type Name Description TData obj Object to get the hash code of Returns Type Description int The object's hash code Implements IEqualityComparer<T>"
  },
  "api/BigBook.Comparison.SimpleComparer-1.html": {
    "href": "api/BigBook.Comparison.SimpleComparer-1.html",
    "title": "Class SimpleComparer<TData> | Big Book of DataTypes API Reference",
    "keywords": "Class SimpleComparer<TData> Simple IComparable class Inheritance object SimpleComparer<TData> Implements IComparer<TData> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook.Comparison Assembly: BigBook.dll Syntax public class SimpleComparer<TData> : IComparer<TData> where TData : IComparable Type Parameters Name Description TData Data type Constructors | Edit this page View Source SimpleComparer(Func<TData, TData, int>) Initializes a new instance of the SimpleComparer<TData> class. Declaration public SimpleComparer(Func<TData, TData, int> comparisonFunction) Parameters Type Name Description Func<TData, TData, int> comparisonFunction The comparison function. Properties | Edit this page View Source ComparisonFunction Gets or sets the comparison function. Declaration protected Func<TData, TData, int> ComparisonFunction { get; set; } Property Value Type Description Func<TData, TData, int> The comparison function. Methods | Edit this page View Source Compare(TData, TData) Compares the two objects Declaration public int Compare(TData x, TData y) Parameters Type Name Description TData x Object 1 TData y Object 2 Returns Type Description int 0 if they're equal, any other value they are not Implements IComparer<T>"
  },
  "api/BigBook.Comparison.SimpleEqualityComparer-1.html": {
    "href": "api/BigBook.Comparison.SimpleEqualityComparer-1.html",
    "title": "Class SimpleEqualityComparer<TData> | Big Book of DataTypes API Reference",
    "keywords": "Class SimpleEqualityComparer<TData> Simple equality comparer Inheritance object SimpleEqualityComparer<TData> Implements IEqualityComparer<TData> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook.Comparison Assembly: BigBook.dll Syntax public class SimpleEqualityComparer<TData> : IEqualityComparer<TData> Type Parameters Name Description TData Data type Constructors | Edit this page View Source SimpleEqualityComparer(Func<TData, TData, bool>, Func<TData, int>) Initializes a new instance of the SimpleEqualityComparer<TData> class. Declaration public SimpleEqualityComparer(Func<TData, TData, bool> comparisonFunction, Func<TData, int> hashFunction) Parameters Type Name Description Func<TData, TData, bool> comparisonFunction The comparison function. Func<TData, int> hashFunction The hash function. Properties | Edit this page View Source ComparisonFunction Gets or sets the comparison function. Declaration protected Func<TData, TData, bool> ComparisonFunction { get; set; } Property Value Type Description Func<TData, TData, bool> The comparison function. | Edit this page View Source HashFunction Gets or sets the hash function. Declaration protected Func<TData, int> HashFunction { get; set; } Property Value Type Description Func<TData, int> The hash function. Methods | Edit this page View Source Equals(TData, TData) Determines if the two items are equal Declaration public bool Equals(TData x, TData y) Parameters Type Name Description TData x Object 1 TData y Object 2 Returns Type Description bool True if they are, false otherwise | Edit this page View Source GetHashCode(TData) Get hash code Declaration public int GetHashCode(TData obj) Parameters Type Name Description TData obj Object to get the hash code of Returns Type Description int The object's hash code Implements IEqualityComparer<T>"
  },
  "api/BigBook.Comparison.html": {
    "href": "api/BigBook.Comparison.html",
    "title": "Namespace BigBook.Comparison | Big Book of DataTypes API Reference",
    "keywords": "Namespace BigBook.Comparison Classes GenericComparer<TData> Generic IComparable class GenericEqualityComparer<TData> Generic equality comparer SimpleComparer<TData> Simple IComparable class SimpleEqualityComparer<TData> Simple equality comparer"
  },
  "api/BigBook.DateCompare.html": {
    "href": "api/BigBook.DateCompare.html",
    "title": "Enum DateCompare | Big Book of DataTypes API Reference",
    "keywords": "Enum DateCompare Date comparison type Namespace: BigBook Assembly: BigBook.dll Syntax [Flags] public enum DateCompare Fields Name Description InFuture In the future InPast In the past None The none Today Today WeekDay Weekday WeekEnd Weekend"
  },
  "api/BigBook.DateSpan.html": {
    "href": "api/BigBook.DateSpan.html",
    "title": "Class DateSpan | Big Book of DataTypes API Reference",
    "keywords": "Class DateSpan Represents a date span Inheritance object DateSpan Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: BigBook Assembly: BigBook.dll Syntax public class DateSpan Constructors | Edit this page View Source DateSpan(DateTime, DateTime) Constructor Declaration public DateSpan(DateTime start, DateTime end) Parameters Type Name Description DateTime start Start of the date span DateTime end End of the date span Properties | Edit this page View Source Days Days between the two dates Declaration public int Days { get; } Property Value Type Description int | Edit this page View Source End End date Declaration public DateTime End { get; } Property Value Type Description DateTime | Edit this page View Source Hours Hours between the two dates Declaration public int Hours { get; } Property Value Type Description int | Edit this page View Source MilliSeconds Milliseconds between the two dates Declaration public int MilliSeconds { get; } Property Value Type Description int | Edit this page View Source Minutes Minutes between the two dates Declaration public int Minutes { get; } Property Value Type Description int | Edit this page View Source Months Months between the two dates Declaration public int Months { get; } Property Value Type Description int | Edit this page View Source Seconds Seconds between the two dates Declaration public int Seconds { get; } Property Value Type Description int | Edit this page View Source Start Start date Declaration public DateTime Start { get; } Property Value Type Description DateTime | Edit this page View Source Years Years between the two dates Declaration public int Years { get; } Property Value Type Description int Methods | Edit this page View Source Add(DateSpan?, DateSpan?) Adds the specified values. Declaration public static DateSpan? Add(DateSpan? left, DateSpan? right) Parameters Type Name Description DateSpan left The left. DateSpan right The right. Returns Type Description DateSpan The result. | Edit this page View Source Equals(object) Determines if two objects are equal Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Object to check Returns Type Description bool True if they are, false otherwise Overrides object.Equals(object) | Edit this page View Source GetHashCode() Gets the hash code for the date span Declaration public override int GetHashCode() Returns Type Description int The hash code Overrides object.GetHashCode() | Edit this page View Source Intersection(DateSpan?) Returns the intersecting time span between the two values Declaration public DateSpan? Intersection(DateSpan? span) Parameters Type Name Description DateSpan span Span to use Returns Type Description DateSpan The intersection of the two time spans | Edit this page View Source Overlap(DateSpan?) Determines if two DateSpans overlap Declaration public bool Overlap(DateSpan? span) Parameters Type Name Description DateSpan span The span to compare to Returns Type Description bool True if they overlap, false otherwise | Edit this page View Source ToString() Converts the DateSpan to a string Declaration public override string ToString() Returns Type Description string The DateSpan as a string Overrides object.ToString() Operators | Edit this page View Source operator +(DateSpan?, DateSpan?) Addition operator Declaration public static DateSpan? operator +(DateSpan? span1, DateSpan? span2) Parameters Type Name Description DateSpan span1 Span 1 DateSpan span2 Span 2 Returns Type Description DateSpan The combined date span | Edit this page View Source operator ==(DateSpan?, DateSpan?) Determines if two DateSpans are equal Declaration public static bool operator ==(DateSpan? span1, DateSpan? span2) Parameters Type Name Description DateSpan span1 Span 1 DateSpan span2 Span 2 Returns Type Description bool True if they are, false otherwise | Edit this page View Source implicit operator string(DateSpan?) Converts the object to a string Declaration public static implicit operator string(DateSpan? value) Parameters Type Name Description DateSpan value Value to convert Returns Type Description string The value as a string | Edit this page View Source operator !=(DateSpan?, DateSpan?) Determines if two DateSpans are not equal Declaration public static bool operator !=(DateSpan? span1, DateSpan? span2) Parameters Type Name Description DateSpan span1 Span 1 DateSpan span2 Span 2 Returns Type Description bool True if they are not equal, false otherwise"
  },
  "api/BigBook.Dynamo-1.html": {
    "href": "api/BigBook.Dynamo-1.html",
    "title": "Class Dynamo<TClass> | Big Book of DataTypes API Reference",
    "keywords": "Class Dynamo<TClass> Dynamic object implementation (used when inheriting) Inheritance object DynamicObject Dynamo Dynamo<TClass> Implements IDynamicMetaObjectProvider IDictionary<string, object> ICollection<KeyValuePair<string, object>> IEnumerable<KeyValuePair<string, object>> IEnumerable INotifyPropertyChanged Inherited Members Dynamo.ChangeLog Dynamo.Count Dynamo.IsReadOnly Dynamo.this[string] Dynamo.GetValueEnd Dynamo.GetValueStart Dynamo.PropertyChanged Dynamo.Add(string, object) Dynamo.Add(KeyValuePair<string, object>) Dynamo.Clear() Dynamo.Contains(KeyValuePair<string, object>) Dynamo.ContainsKey(string) Dynamo.Copy(object) Dynamo.CopyTo(KeyValuePair<string, object>[], int) Dynamo.CopyTo(object) Dynamo.Equals(object) Dynamo.GetDynamicMemberNames() Dynamo.GetEnumerator() Dynamo.GetHashCode() Dynamo.GetSchema() Dynamo.ReadXml(XmlReader) Dynamo.Remove(string) Dynamo.Remove(KeyValuePair<string, object>) Dynamo.SubSet(params string[]) Dynamo.To<TObject>(TObject) Dynamo.To(object, Type) Dynamo.ToString() Dynamo.TryConvert(ConvertBinder, out object) Dynamo.TryGetMember(GetMemberBinder, out object) Dynamo.TryGetValue(string, out object) Dynamo.TrySetMember(SetMemberBinder, object) Dynamo.TrySetValue(string, object) Dynamo.WriteXml(XmlWriter) Dynamo.GetValue(string, Type) Dynamo.RaiseGetValueEnd(string, object) Dynamo.RaiseGetValueStart(string) Dynamo.RaisePropertyChanged(string, object, object) DynamicObject.GetMetaObject(Expression) DynamicObject.TryBinaryOperation(BinaryOperationBinder, object, out object) DynamicObject.TryCreateInstance(CreateInstanceBinder, object[], out object) DynamicObject.TryDeleteIndex(DeleteIndexBinder, object[]) DynamicObject.TryDeleteMember(DeleteMemberBinder) DynamicObject.TryGetIndex(GetIndexBinder, object[], out object) DynamicObject.TryInvoke(InvokeBinder, object[], out object) DynamicObject.TryInvokeMember(InvokeMemberBinder, object[], out object) DynamicObject.TrySetIndex(SetIndexBinder, object[], object) DynamicObject.TryUnaryOperation(UnaryOperationBinder, out object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: BigBook Assembly: BigBook.dll Syntax public abstract class Dynamo<TClass> : Dynamo, IDynamicMetaObjectProvider, IDictionary<string, object?>, ICollection<KeyValuePair<string, object?>>, IEnumerable<KeyValuePair<string, object?>>, IEnumerable, INotifyPropertyChanged where TClass : Dynamo<TClass> Type Parameters Name Description TClass Child object type Constructors | Edit this page View Source Dynamo() Constructor Declaration protected Dynamo() | Edit this page View Source Dynamo(bool) Constructor Declaration protected Dynamo(bool useChangeLog) Parameters Type Name Description bool useChangeLog if set to true [use change log]. | Edit this page View Source Dynamo(object?, bool) Constructor Declaration protected Dynamo(object? item, bool useChangeLog = false) Parameters Type Name Description object item Item to copy values from bool useChangeLog if set to true [use change log]. Properties | Edit this page View Source Keys Keys to the dynamic type Declaration public override ICollection<string> Keys { get; } Property Value Type Description ICollection<string> Overrides Dynamo.Keys | Edit this page View Source Values Gets the Values Declaration public override ICollection<object?> Values { get; } Property Value Type Description ICollection<object> Overrides Dynamo.Values Implements IDynamicMetaObjectProvider IDictionary<TKey, TValue> ICollection<T> IEnumerable<T> IEnumerable INotifyPropertyChanged"
  },
  "api/BigBook.Dynamo.html": {
    "href": "api/BigBook.Dynamo.html",
    "title": "Class Dynamo | Big Book of DataTypes API Reference",
    "keywords": "Class Dynamo Dynamic object implementation Inheritance object DynamicObject Dynamo Dynamo<TClass> Implements IDynamicMetaObjectProvider IDictionary<string, object> ICollection<KeyValuePair<string, object>> IEnumerable<KeyValuePair<string, object>> IEnumerable INotifyPropertyChanged Inherited Members DynamicObject.GetMetaObject(Expression) DynamicObject.TryBinaryOperation(BinaryOperationBinder, object, out object) DynamicObject.TryCreateInstance(CreateInstanceBinder, object[], out object) DynamicObject.TryDeleteIndex(DeleteIndexBinder, object[]) DynamicObject.TryDeleteMember(DeleteMemberBinder) DynamicObject.TryGetIndex(GetIndexBinder, object[], out object) DynamicObject.TryInvoke(InvokeBinder, object[], out object) DynamicObject.TryInvokeMember(InvokeMemberBinder, object[], out object) DynamicObject.TrySetIndex(SetIndexBinder, object[], object) DynamicObject.TryUnaryOperation(UnaryOperationBinder, out object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: BigBook Assembly: BigBook.dll Syntax public class Dynamo : DynamicObject, IDynamicMetaObjectProvider, IDictionary<string, object?>, ICollection<KeyValuePair<string, object?>>, IEnumerable<KeyValuePair<string, object?>>, IEnumerable, INotifyPropertyChanged Constructors | Edit this page View Source Dynamo() Creates a new ExpandoObject with no members. Declaration public Dynamo() See Also Dynamo | Edit this page View Source Dynamo(bool) Constructor Declaration public Dynamo(bool useChangeLog) Parameters Type Name Description bool useChangeLog if set to true [use change log]. See Also Dynamo | Edit this page View Source Dynamo(object?, bool) Initializes a new instance of the Dynamo class. Declaration public Dynamo(object? item, bool useChangeLog = false) Parameters Type Name Description object item The item. bool useChangeLog if set to true [use change log]. See Also Dynamo Properties | Edit this page View Source ChangeLog Gets the change log. Declaration public ConcurrentDictionary<string, Change>? ChangeLog { get; } Property Value Type Description ConcurrentDictionary<string, Change> The change log. See Also Dynamo | Edit this page View Source Count Gets the number of elements contained in the ICollection<T>. Declaration public int Count { get; } Property Value Type Description int See Also Dynamo | Edit this page View Source IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description bool See Also Dynamo | Edit this page View Source this[string] Gets or sets the object with the specified key. Declaration public object? this[string key] { get; set; } Parameters Type Name Description string key The key. Property Value Type Description object The object. See Also Dynamo | Edit this page View Source Keys Gets an ICollection<T> containing the keys of the IDictionary<TKey, TValue>. Declaration public virtual ICollection<string> Keys { get; } Property Value Type Description ICollection<string> See Also Dynamo | Edit this page View Source Values Gets an ICollection<T> containing the values in the IDictionary<TKey, TValue>. Declaration public virtual ICollection<object?> Values { get; } Property Value Type Description ICollection<object> See Also Dynamo Methods | Edit this page View Source Add(KeyValuePair<string, object?>) Adds an item to the ICollection<T>. Declaration public void Add(KeyValuePair<string, object?> item) Parameters Type Name Description KeyValuePair<string, object> item The object to add to the ICollection<T>. See Also Dynamo | Edit this page View Source Add(string, object?) Adds an element with the provided key and value to the IDictionary<TKey, TValue>. Declaration public void Add(string key, object? value) Parameters Type Name Description string key The object to use as the key of the element to add. object value The object to use as the value of the element to add. See Also Dynamo | Edit this page View Source Clear() Removes all items from the ICollection<T>. Declaration public void Clear() See Also Dynamo | Edit this page View Source Contains(KeyValuePair<string, object?>) Determines whether this instance contains the object. Declaration public bool Contains(KeyValuePair<string, object?> item) Parameters Type Name Description KeyValuePair<string, object> item The object to locate in the ICollection<T>. Returns Type Description bool true if item is found in the ICollection<T>; otherwise, false. See Also Dynamo | Edit this page View Source ContainsKey(string) Determines whether the IDictionary<TKey, TValue> contains an element with the specified key. Declaration public bool ContainsKey(string key) Parameters Type Name Description string key The key to locate in the IDictionary<TKey, TValue>. Returns Type Description bool true if the IDictionary<TKey, TValue> contains an element with the key; otherwise, false. See Also Dynamo | Edit this page View Source Copy(object?) Copies the properties from an item Declaration public void Copy(object? item) Parameters Type Name Description object item Item to copy from See Also Dynamo | Edit this page View Source CopyTo(KeyValuePair<string, object?>[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. Declaration public void CopyTo(KeyValuePair<string, object?>[] array, int arrayIndex) Parameters Type Name Description KeyValuePair<string, object>[] array The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. int arrayIndex The zero-based index in array at which copying begins. Exceptions Type Condition ArgumentOutOfRangeException arrayIndex See Also Dynamo | Edit this page View Source CopyTo(object?) Copies data from here to another object Declaration public void CopyTo(object? result) Parameters Type Name Description object result Result See Also Dynamo | Edit this page View Source Equals(object?) Determines if two objects are equal Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Object to compare to Returns Type Description bool True if they're equal, false otherwise Overrides object.Equals(object) See Also Dynamo | Edit this page View Source GetDynamicMemberNames() Gets the dynamic member names Declaration public override IEnumerable<string> GetDynamicMemberNames() Returns Type Description IEnumerable<string> The keys used internally Overrides DynamicObject.GetDynamicMemberNames() See Also Dynamo | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<KeyValuePair<string, object?>> GetEnumerator() Returns Type Description IEnumerator<KeyValuePair<string, object>> An enumerator that can be used to iterate through the collection. See Also Dynamo | Edit this page View Source GetHashCode() Gets the hash code Declaration public override int GetHashCode() Returns Type Description int The hash code Overrides object.GetHashCode() See Also Dynamo | Edit this page View Source GetSchema() Not used Declaration public XmlSchema? GetSchema() Returns Type Description XmlSchema Null See Also Dynamo | Edit this page View Source GetValue(string, Type) Gets a value Declaration protected object? GetValue(string name, Type returnType) Parameters Type Name Description string name Name of the item Type returnType Return value type Returns Type Description object The returned value See Also Dynamo | Edit this page View Source RaiseGetValueEnd(string, object?) Raises the get value end event Declaration protected object? RaiseGetValueEnd(string propertyName, object? value) Parameters Type Name Description string propertyName Property name object value Value initially being returned Returns Type Description object Returns null if the function should continue, any other value should be immediately returned to the user See Also Dynamo | Edit this page View Source RaiseGetValueStart(string) Raises the get value start event Declaration protected object? RaiseGetValueStart(string propertyName) Parameters Type Name Description string propertyName Property name Returns Type Description object Returns null if the function should continue, any other value should be immediately returned to the user See Also Dynamo | Edit this page View Source RaisePropertyChanged(string, object?, object?) Raises the property changed event Declaration protected void RaisePropertyChanged(string propertyName, object? oldValue, object? newValue) Parameters Type Name Description string propertyName Property name object oldValue The old value. object newValue New value for the property See Also Dynamo | Edit this page View Source ReadXml(XmlReader) Reads the data from an XML doc Declaration public virtual void ReadXml(XmlReader reader) Parameters Type Name Description XmlReader reader XML reader See Also Dynamo | Edit this page View Source Remove(KeyValuePair<string, object?>) Removes the first occurrence of a specific object from the ICollection<T>. Declaration public bool Remove(KeyValuePair<string, object?> item) Parameters Type Name Description KeyValuePair<string, object> item The object to remove from the ICollection<T>. Returns Type Description bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. See Also Dynamo | Edit this page View Source Remove(string) Removes the element with the specified key from the IDictionary<TKey, TValue>. Declaration public bool Remove(string key) Parameters Type Name Description string key The key of the element to remove. Returns Type Description bool true if the element is successfully removed; otherwise, false. This method also returns false if key was not found in the original IDictionary<TKey, TValue>. See Also Dynamo | Edit this page View Source SubSet(params string[]) Returns a subset of the current Dynamo object Declaration public dynamic SubSet(params string[] keys) Parameters Type Name Description string[] keys Property keys to return Returns Type Description dynamic A new Dynamo object containing only the keys specified See Also Dynamo | Edit this page View Source To(object?, Type) Converts the object to the type specified Declaration public object To(object? defaultObject, Type ObjectType) Parameters Type Name Description object defaultObject The default object. Type ObjectType Object type Returns Type Description object The object converted to the type specified See Also Dynamo | Edit this page View Source ToString() Outputs the object graph Declaration public override string ToString() Returns Type Description string The string version of the object Overrides object.ToString() See Also Dynamo | Edit this page View Source To<TObject>(TObject) Converts the object to the type specified Declaration public TObject To<TObject>(TObject defaultObject = default) Parameters Type Name Description TObject defaultObject Returns Type Description TObject The object converted to the type specified Type Parameters Name Description TObject Object type See Also Dynamo | Edit this page View Source TryConvert(ConvertBinder, out object?) Attempts to convert the object Declaration public override bool TryConvert(ConvertBinder binder, out object? result) Parameters Type Name Description ConvertBinder binder Convert binder object result Result Returns Type Description bool True if it is converted, false otherwise Overrides DynamicObject.TryConvert(ConvertBinder, out object) See Also Dynamo | Edit this page View Source TryGetMember(GetMemberBinder, out object?) Attempts to get a member Declaration public override bool TryGetMember(GetMemberBinder binder, out object? result) Parameters Type Name Description GetMemberBinder binder GetMemberBinder object object result Result Returns Type Description bool True if it gets the member, false otherwise Overrides DynamicObject.TryGetMember(GetMemberBinder, out object) See Also Dynamo | Edit this page View Source TryGetValue(string, out object?) Gets the value associated with the specified key. Declaration public bool TryGetValue(string key, out object? value) Parameters Type Name Description string key The key whose value to get. object value When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns Type Description bool true if the object that implements IDictionary<TKey, TValue> contains an element with the specified key; otherwise, false. See Also Dynamo | Edit this page View Source TrySetMember(SetMemberBinder, object) Attempts to set the member Declaration public override bool TrySetMember(SetMemberBinder binder, object value) Parameters Type Name Description SetMemberBinder binder Member binder object value Value Returns Type Description bool True if it is set, false otherwise Overrides DynamicObject.TrySetMember(SetMemberBinder, object) See Also Dynamo | Edit this page View Source TrySetValue(string, object?) Tries to set the value. Declaration public bool TrySetValue(string key, object? value) Parameters Type Name Description string key The key. object value The value. Returns Type Description bool True if it is set, false otherwise. See Also Dynamo | Edit this page View Source WriteXml(XmlWriter) Writes the data to an XML doc Declaration public virtual void WriteXml(XmlWriter writer) Parameters Type Name Description XmlWriter writer XML writer See Also Dynamo Events | Edit this page View Source GetValueEnd Called when the value/property is found but before it is returned to the caller Sends (this, PropertyName, EventArgs) to items attached to the event Declaration public event Action<Dynamo, string, OnEndEventArgs> GetValueEnd Event Type Type Description Action<Dynamo, string, OnEndEventArgs> See Also Dynamo | Edit this page View Source GetValueStart Called when beginning to get a value/property Sends (this, EventArgs) to items attached to the event Declaration public event Action<Dynamo, OnStartEventArgs> GetValueStart Event Type Type Description Action<Dynamo, OnStartEventArgs> See Also Dynamo | Edit this page View Source PropertyChanged Occurs when a property value changes. Declaration public event PropertyChangedEventHandler PropertyChanged Event Type Type Description PropertyChangedEventHandler See Also Dynamo Implements IDynamicMetaObjectProvider IDictionary<TKey, TValue> ICollection<T> IEnumerable<T> IEnumerable INotifyPropertyChanged See Also Dynamo"
  },
  "api/BigBook.Edge-1.html": {
    "href": "api/BigBook.Edge-1.html",
    "title": "Class Edge<T> | Big Book of DataTypes API Reference",
    "keywords": "Class Edge<T> Edge pointing from vertex source to vertex sink Inheritance object Edge<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook Assembly: BigBook.dll Syntax public class Edge<T> Type Parameters Name Description T Data type of the data Constructors | Edit this page View Source Edge(Vertex<T>, Vertex<T>) Initializes a new instance of the Edge<T> class. Declaration public Edge(Vertex<T> source, Vertex<T> sink) Parameters Type Name Description Vertex<T> source The source. Vertex<T> sink The sink. Properties | Edit this page View Source Sink Gets the sink vertex. Declaration public Vertex<T>? Sink { get; } Property Value Type Description Vertex<T> The sink vertex. | Edit this page View Source Source Gets the source vertex Declaration public Vertex<T>? Source { get; } Property Value Type Description Vertex<T> The source vertex Methods | Edit this page View Source Remove() Removes this edge from the sink and source vertices. Declaration public Edge<T> Remove() Returns Type Description Edge<T> This"
  },
  "api/BigBook.EventArgs.BaseEventArgs.html": {
    "href": "api/BigBook.EventArgs.BaseEventArgs.html",
    "title": "Class BaseEventArgs | Big Book of DataTypes API Reference",
    "keywords": "Class BaseEventArgs Base event args for the events used in the system Inheritance object EventArgs BaseEventArgs ChangedEventArgs DeletedEventArgs DeletingEventArgs LoadedEventArgs LoadingEventArgs OnEndEventArgs OnErrorEventArgs OnStartEventArgs SavedEventArgs SavingEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook.EventArgs Assembly: BigBook.dll Syntax public class BaseEventArgs : EventArgs Properties | Edit this page View Source Content Content of the event Declaration public object? Content { get; set; } Property Value Type Description object | Edit this page View Source Stop Should the event be stopped? Declaration public bool Stop { get; set; } Property Value Type Description bool"
  },
  "api/BigBook.EventArgs.ChangedEventArgs.html": {
    "href": "api/BigBook.EventArgs.ChangedEventArgs.html",
    "title": "Class ChangedEventArgs | Big Book of DataTypes API Reference",
    "keywords": "Class ChangedEventArgs Changed event args Inheritance object EventArgs BaseEventArgs ChangedEventArgs Inherited Members BaseEventArgs.Content BaseEventArgs.Stop EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook.EventArgs Assembly: BigBook.dll Syntax public class ChangedEventArgs : BaseEventArgs"
  },
  "api/BigBook.EventArgs.DeletedEventArgs.html": {
    "href": "api/BigBook.EventArgs.DeletedEventArgs.html",
    "title": "Class DeletedEventArgs | Big Book of DataTypes API Reference",
    "keywords": "Class DeletedEventArgs Deleted event args Inheritance object EventArgs BaseEventArgs DeletedEventArgs Inherited Members BaseEventArgs.Content BaseEventArgs.Stop EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook.EventArgs Assembly: BigBook.dll Syntax public class DeletedEventArgs : BaseEventArgs"
  },
  "api/BigBook.EventArgs.DeletingEventArgs.html": {
    "href": "api/BigBook.EventArgs.DeletingEventArgs.html",
    "title": "Class DeletingEventArgs | Big Book of DataTypes API Reference",
    "keywords": "Class DeletingEventArgs Deleting event args Inheritance object EventArgs BaseEventArgs DeletingEventArgs Inherited Members BaseEventArgs.Content BaseEventArgs.Stop EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook.EventArgs Assembly: BigBook.dll Syntax public class DeletingEventArgs : BaseEventArgs"
  },
  "api/BigBook.EventArgs.LoadedEventArgs.html": {
    "href": "api/BigBook.EventArgs.LoadedEventArgs.html",
    "title": "Class LoadedEventArgs | Big Book of DataTypes API Reference",
    "keywords": "Class LoadedEventArgs Loaded event args Inheritance object EventArgs BaseEventArgs LoadedEventArgs Inherited Members BaseEventArgs.Content BaseEventArgs.Stop EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook.EventArgs Assembly: BigBook.dll Syntax public class LoadedEventArgs : BaseEventArgs"
  },
  "api/BigBook.EventArgs.LoadingEventArgs.html": {
    "href": "api/BigBook.EventArgs.LoadingEventArgs.html",
    "title": "Class LoadingEventArgs | Big Book of DataTypes API Reference",
    "keywords": "Class LoadingEventArgs Loading event args Inheritance object EventArgs BaseEventArgs LoadingEventArgs Inherited Members BaseEventArgs.Content BaseEventArgs.Stop EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook.EventArgs Assembly: BigBook.dll Syntax public class LoadingEventArgs : BaseEventArgs"
  },
  "api/BigBook.EventArgs.OnEndEventArgs.html": {
    "href": "api/BigBook.EventArgs.OnEndEventArgs.html",
    "title": "Class OnEndEventArgs | Big Book of DataTypes API Reference",
    "keywords": "Class OnEndEventArgs On end event args Inheritance object EventArgs BaseEventArgs OnEndEventArgs Inherited Members BaseEventArgs.Content BaseEventArgs.Stop EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook.EventArgs Assembly: BigBook.dll Syntax public class OnEndEventArgs : BaseEventArgs"
  },
  "api/BigBook.EventArgs.OnErrorEventArgs.html": {
    "href": "api/BigBook.EventArgs.OnErrorEventArgs.html",
    "title": "Class OnErrorEventArgs | Big Book of DataTypes API Reference",
    "keywords": "Class OnErrorEventArgs On error event args Inheritance object EventArgs BaseEventArgs OnErrorEventArgs Inherited Members BaseEventArgs.Content BaseEventArgs.Stop EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook.EventArgs Assembly: BigBook.dll Syntax public class OnErrorEventArgs : BaseEventArgs"
  },
  "api/BigBook.EventArgs.OnStartEventArgs.html": {
    "href": "api/BigBook.EventArgs.OnStartEventArgs.html",
    "title": "Class OnStartEventArgs | Big Book of DataTypes API Reference",
    "keywords": "Class OnStartEventArgs On start event args Inheritance object EventArgs BaseEventArgs OnStartEventArgs Inherited Members BaseEventArgs.Content BaseEventArgs.Stop EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook.EventArgs Assembly: BigBook.dll Syntax public class OnStartEventArgs : BaseEventArgs"
  },
  "api/BigBook.EventArgs.SavedEventArgs.html": {
    "href": "api/BigBook.EventArgs.SavedEventArgs.html",
    "title": "Class SavedEventArgs | Big Book of DataTypes API Reference",
    "keywords": "Class SavedEventArgs Saved event args Inheritance object EventArgs BaseEventArgs SavedEventArgs Inherited Members BaseEventArgs.Content BaseEventArgs.Stop EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook.EventArgs Assembly: BigBook.dll Syntax public class SavedEventArgs : BaseEventArgs"
  },
  "api/BigBook.EventArgs.SavingEventArgs.html": {
    "href": "api/BigBook.EventArgs.SavingEventArgs.html",
    "title": "Class SavingEventArgs | Big Book of DataTypes API Reference",
    "keywords": "Class SavingEventArgs Saving event args Inheritance object EventArgs BaseEventArgs SavingEventArgs Inherited Members BaseEventArgs.Content BaseEventArgs.Stop EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook.EventArgs Assembly: BigBook.dll Syntax public class SavingEventArgs : BaseEventArgs"
  },
  "api/BigBook.EventArgs.html": {
    "href": "api/BigBook.EventArgs.html",
    "title": "Namespace BigBook.EventArgs | Big Book of DataTypes API Reference",
    "keywords": "Namespace BigBook.EventArgs Classes BaseEventArgs Base event args for the events used in the system ChangedEventArgs Changed event args DeletedEventArgs Deleted event args DeletingEventArgs Deleting event args LoadedEventArgs Loaded event args LoadingEventArgs Loading event args OnEndEventArgs On end event args OnErrorEventArgs On error event args OnStartEventArgs On start event args SavedEventArgs Saved event args SavingEventArgs Saving event args"
  },
  "api/BigBook.ExtensionMethods.Utils.DefaultValueLookup.html": {
    "href": "api/BigBook.ExtensionMethods.Utils.DefaultValueLookup.html",
    "title": "Class DefaultValueLookup | Big Book of DataTypes API Reference",
    "keywords": "Class DefaultValueLookup Default value lookup Inheritance object DefaultValueLookup Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook.ExtensionMethods.Utils Assembly: BigBook.dll Syntax public static class DefaultValueLookup Fields | Edit this page View Source Values The values Declaration public static Dictionary<int, object?> Values Field Value Type Description Dictionary<int, object>"
  },
  "api/BigBook.ExtensionMethods.Utils.html": {
    "href": "api/BigBook.ExtensionMethods.Utils.html",
    "title": "Namespace BigBook.ExtensionMethods.Utils | Big Book of DataTypes API Reference",
    "keywords": "Namespace BigBook.ExtensionMethods.Utils Classes DefaultValueLookup Default value lookup"
  },
  "api/BigBook.Formatters.GenericStringFormatter.html": {
    "href": "api/BigBook.Formatters.GenericStringFormatter.html",
    "title": "Class GenericStringFormatter | Big Book of DataTypes API Reference",
    "keywords": "Class GenericStringFormatter Generic string formatter Inheritance object GenericStringFormatter Implements IFormatProvider ICustomFormatter IStringFormatter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook.Formatters Assembly: BigBook.dll Syntax public class GenericStringFormatter : IFormatProvider, ICustomFormatter, IStringFormatter Constructors | Edit this page View Source GenericStringFormatter() Constructor Declaration public GenericStringFormatter() | Edit this page View Source GenericStringFormatter(char, char, char) Initializes a new instance of the GenericStringFormatter class. Declaration public GenericStringFormatter(char digitChar, char alphaChar, char escapeChar) Parameters Type Name Description char digitChar The digit character. char alphaChar The alpha character. char escapeChar The escape character. Properties | Edit this page View Source AlphaChar Represents alpha characters (defaults to @) Declaration public char AlphaChar { get; protected set; } Property Value Type Description char | Edit this page View Source DigitChar Represents digits (defaults to #) Declaration public char DigitChar { get; protected set; } Property Value Type Description char | Edit this page View Source EscapeChar Represents the escape character (defaults to ) Declaration public char EscapeChar { get; protected set; } Property Value Type Description char Methods | Edit this page View Source Format(string, object, IFormatProvider) Formats the string Declaration public string Format(string format, object arg, IFormatProvider formatProvider) Parameters Type Name Description string format Format to use object arg Argument object to use IFormatProvider formatProvider Format provider to use Returns Type Description string The formatted string | Edit this page View Source Format(string?, string) Formats the string based on the pattern Declaration public string Format(string? input, string formatPattern) Parameters Type Name Description string input Input string string formatPattern Format pattern Returns Type Description string The formatted string | Edit this page View Source GetFormat(Type) Gets the format associated with the type Declaration public object? GetFormat(Type formatType) Parameters Type Name Description Type formatType Format type Returns Type Description object The appropriate formatter based on the type | Edit this page View Source GetMatchingInput(string?, char, out char) Gets matching input Declaration protected string? GetMatchingInput(string? input, char formatChar, out char matchChar) Parameters Type Name Description string input Input string char formatChar Current format character char matchChar The matching character found Returns Type Description string The remainder of the input string left | Edit this page View Source IsValid(string) Checks if the format pattern is valid Declaration protected bool IsValid(string formatPattern) Parameters Type Name Description string formatPattern Format pattern Returns Type Description bool Returns true if it's valid, otherwise false Implements IFormatProvider ICustomFormatter IStringFormatter"
  },
  "api/BigBook.Formatters.Interfaces.IStringFormatter.html": {
    "href": "api/BigBook.Formatters.Interfaces.IStringFormatter.html",
    "title": "Interface IStringFormatter | Big Book of DataTypes API Reference",
    "keywords": "Interface IStringFormatter String formatter Namespace: BigBook.Formatters.Interfaces Assembly: BigBook.dll Syntax public interface IStringFormatter Methods | Edit this page View Source Format(string?, string) Formats the string based on the pattern Declaration string Format(string? input, string formatPattern) Parameters Type Name Description string input Input string string formatPattern Format pattern Returns Type Description string The formatted string"
  },
  "api/BigBook.Formatters.Interfaces.html": {
    "href": "api/BigBook.Formatters.Interfaces.html",
    "title": "Namespace BigBook.Formatters.Interfaces | Big Book of DataTypes API Reference",
    "keywords": "Namespace BigBook.Formatters.Interfaces Interfaces IStringFormatter String formatter"
  },
  "api/BigBook.Formatters.html": {
    "href": "api/BigBook.Formatters.html",
    "title": "Namespace BigBook.Formatters | Big Book of DataTypes API Reference",
    "keywords": "Namespace BigBook.Formatters Classes GenericStringFormatter Generic string formatter"
  },
  "api/BigBook.Fraction.html": {
    "href": "api/BigBook.Fraction.html",
    "title": "Class Fraction | Big Book of DataTypes API Reference",
    "keywords": "Class Fraction Represents a fraction Inheritance object Fraction Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: BigBook Assembly: BigBook.dll Syntax public class Fraction Constructors | Edit this page View Source Fraction(decimal, decimal) Constructor Declaration public Fraction(decimal numerator, decimal denominator) Parameters Type Name Description decimal numerator Numerator decimal denominator Denominator | Edit this page View Source Fraction(double, double) Constructor Declaration public Fraction(double numerator, double denominator) Parameters Type Name Description double numerator Numerator double denominator Denominator | Edit this page View Source Fraction(int, int) Constructor Declaration public Fraction(int numerator, int denominator) Parameters Type Name Description int numerator Numerator int denominator Denominator | Edit this page View Source Fraction(float, float) Constructor Declaration public Fraction(float numerator, float denominator) Parameters Type Name Description float numerator Numerator float denominator Denominator Exceptions Type Condition ArgumentException denominator Properties | Edit this page View Source Denominator Denominator of the fraction Declaration public int Denominator { get; set; } Property Value Type Description int | Edit this page View Source Numerator Numerator of the faction Declaration public int Numerator { get; set; } Property Value Type Description int Methods | Edit this page View Source Add(Fraction, Fraction) Adds the specified values. Declaration public static Fraction Add(Fraction left, Fraction right) Parameters Type Name Description Fraction left The left. Fraction right The right. Returns Type Description Fraction The result | Edit this page View Source Divide(Fraction, Fraction) Divides the specified values. Declaration public static Fraction Divide(Fraction left, Fraction right) Parameters Type Name Description Fraction left The left. Fraction right The right. Returns Type Description Fraction The result | Edit this page View Source Equals(object?) Determines if the fractions are equal Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj object to check Returns Type Description bool True if they are, false otherwise Overrides object.Equals(object) | Edit this page View Source GetHashCode() Gets the hash code of the fraction Declaration public override int GetHashCode() Returns Type Description int The hash code of the fraction Overrides object.GetHashCode() | Edit this page View Source Inverse() Returns the inverse of the fraction Declaration public Fraction Inverse() Returns Type Description Fraction The inverse | Edit this page View Source Multiply(Fraction, Fraction) Multiplies the specified values. Declaration public static Fraction Multiply(Fraction left, Fraction right) Parameters Type Name Description Fraction left The left. Fraction right The right. Returns Type Description Fraction The result | Edit this page View Source Negate(Fraction) Negates the specified item. Declaration public static Fraction Negate(Fraction item) Parameters Type Name Description Fraction item The item. Returns Type Description Fraction The result | Edit this page View Source Reduce() Reduces the fraction (finds the greatest common denominator and divides the numerator/denominator by it). Declaration public void Reduce() | Edit this page View Source Subtract(Fraction, Fraction) Subtracts the specified values. Declaration public static Fraction Subtract(Fraction left, Fraction right) Parameters Type Name Description Fraction left The left. Fraction right The right. Returns Type Description Fraction The result | Edit this page View Source ToDecimal() Converts to decimal. Declaration public decimal ToDecimal() Returns Type Description decimal The decimal value. | Edit this page View Source ToDouble() Converts to double. Declaration public double ToDouble() Returns Type Description double The value as a double | Edit this page View Source ToFraction(decimal) Converts to fraction. Declaration public static Fraction ToFraction(decimal value) Parameters Type Name Description decimal value Returns Type Description Fraction The value as a fraction. | Edit this page View Source ToFraction(double) Converts to fraction. Declaration public static Fraction ToFraction(double value) Parameters Type Name Description double value Returns Type Description Fraction The value as a fraction. | Edit this page View Source ToFraction(int) Converts to fraction. Declaration public static Fraction ToFraction(int value) Parameters Type Name Description int value Returns Type Description Fraction The value as a fraction. | Edit this page View Source ToFraction(float) Converts to fraction. Declaration public static Fraction ToFraction(float value) Parameters Type Name Description float value Returns Type Description Fraction The value as a fraction. | Edit this page View Source ToFraction(uint) Converts to fraction. Declaration public static Fraction ToFraction(uint value) Parameters Type Name Description uint value Returns Type Description Fraction The value as a fraction. | Edit this page View Source ToSingle() Converts to single. Declaration public float ToSingle() Returns Type Description float The value as a single. | Edit this page View Source ToString() Displays the fraction as a string Declaration public override string ToString() Returns Type Description string The fraction as a string Overrides object.ToString() Operators | Edit this page View Source operator +(Fraction?, Fraction?) Addition Declaration public static Fraction operator +(Fraction? first, Fraction? second) Parameters Type Name Description Fraction first First fraction Fraction second Second fraction Returns Type Description Fraction The added fraction | Edit this page View Source operator /(Fraction, Fraction) Division Declaration public static Fraction operator /(Fraction first, Fraction second) Parameters Type Name Description Fraction first First item Fraction second Second item Returns Type Description Fraction The divided fraction | Edit this page View Source operator ==(Fraction?, Fraction?) Equals operator Declaration public static bool operator ==(Fraction? first, Fraction? second) Parameters Type Name Description Fraction first First item Fraction second Second item Returns Type Description bool True if they are, false otherwise | Edit this page View Source operator ==(Fraction?, double) Equals operator Declaration public static bool operator ==(Fraction? first, double second) Parameters Type Name Description Fraction first First item double second Second item Returns Type Description bool True if they are, false otherwise | Edit this page View Source operator ==(double, Fraction) Equals operator Declaration public static bool operator ==(double first, Fraction second) Parameters Type Name Description double first First item Fraction second Second item Returns Type Description bool True if they are, false otherwise | Edit this page View Source implicit operator decimal(Fraction?) Converts the fraction to a decimal Declaration public static implicit operator decimal(Fraction? fraction) Parameters Type Name Description Fraction fraction Fraction Returns Type Description decimal The fraction as a decimal | Edit this page View Source implicit operator double(Fraction?) Converts the fraction to a double Declaration public static implicit operator double(Fraction? fraction) Parameters Type Name Description Fraction fraction Fraction Returns Type Description double The fraction as a double | Edit this page View Source implicit operator float(Fraction) Converts the fraction to a float Declaration public static implicit operator float(Fraction fraction) Parameters Type Name Description Fraction fraction Fraction Returns Type Description float The fraction as a float | Edit this page View Source implicit operator string(Fraction) Converts the fraction to a string Declaration public static implicit operator string(Fraction fraction) Parameters Type Name Description Fraction fraction Fraction Returns Type Description string The fraction as a string | Edit this page View Source implicit operator Fraction(decimal) Converts the decimal to a fraction Declaration public static implicit operator Fraction(decimal fraction) Parameters Type Name Description decimal fraction Fraction Returns Type Description Fraction The decimal as a fraction | Edit this page View Source implicit operator Fraction(double) Converts the double to a fraction Declaration public static implicit operator Fraction(double fraction) Parameters Type Name Description double fraction Fraction Returns Type Description Fraction The double as a fraction | Edit this page View Source implicit operator Fraction(int) Converts the int to a fraction Declaration public static implicit operator Fraction(int fraction) Parameters Type Name Description int fraction Fraction Returns Type Description Fraction The int as a fraction | Edit this page View Source implicit operator Fraction(float) Converts the float to a fraction Declaration public static implicit operator Fraction(float fraction) Parameters Type Name Description float fraction Fraction Returns Type Description Fraction The float as a fraction | Edit this page View Source implicit operator Fraction(uint) Converts the uint to a fraction Declaration public static implicit operator Fraction(uint fraction) Parameters Type Name Description uint fraction Fraction Returns Type Description Fraction The uint as a fraction | Edit this page View Source operator !=(Fraction, Fraction) Not equals operator Declaration public static bool operator !=(Fraction first, Fraction second) Parameters Type Name Description Fraction first First item Fraction second Second item Returns Type Description bool True if they are, false otherwise | Edit this page View Source operator !=(Fraction, double) Not equals operator Declaration public static bool operator !=(Fraction first, double second) Parameters Type Name Description Fraction first First item double second Second item Returns Type Description bool True if they are, false otherwise | Edit this page View Source operator !=(double, Fraction) Not equals operator Declaration public static bool operator !=(double first, Fraction second) Parameters Type Name Description double first First item Fraction second Second item Returns Type Description bool True if they are, false otherwise | Edit this page View Source operator *(Fraction, Fraction) Multiplication Declaration public static Fraction operator *(Fraction first, Fraction second) Parameters Type Name Description Fraction first First fraction Fraction second Second fraction Returns Type Description Fraction The resulting fraction | Edit this page View Source operator -(Fraction, Fraction) Subtraction Declaration public static Fraction operator -(Fraction first, Fraction second) Parameters Type Name Description Fraction first First fraction Fraction second Second fraction Returns Type Description Fraction The subtracted fraction | Edit this page View Source operator -(Fraction) Negation of the fraction Declaration public static Fraction operator -(Fraction first) Parameters Type Name Description Fraction first Fraction to negate Returns Type Description Fraction The negated fraction"
  },
  "api/BigBook.Graph-1.html": {
    "href": "api/BigBook.Graph-1.html",
    "title": "Class Graph<T> | Big Book of DataTypes API Reference",
    "keywords": "Class Graph<T> Class used to represent a graph Inheritance object Graph<T> Implements IEnumerable<Vertex<T>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook Assembly: BigBook.dll Syntax public class Graph<T> : IEnumerable<Vertex<T>>, IEnumerable Type Parameters Name Description T The data type stored in the graph Constructors | Edit this page View Source Graph() Initializes a new instance of the Graph<T> class. Declaration public Graph() Properties | Edit this page View Source Vertices Gets the vertices. Declaration public List<Vertex<T>> Vertices { get; } Property Value Type Description List<Vertex<T>> The vertices. Methods | Edit this page View Source AddEdge(Vertex<T>, Vertex<T>) Adds the edge. Declaration public Edge<T>? AddEdge(Vertex<T> source, Vertex<T> sink) Parameters Type Name Description Vertex<T> source The source. Vertex<T> sink The sink. Returns Type Description Edge<T> The new edge | Edit this page View Source AddVertex(T) Adds the vertex. Declaration public Vertex<T> AddVertex(T data) Parameters Type Name Description T data The data. Returns Type Description Vertex<T> The new vertex | Edit this page View Source Copy() Copies this instance. Declaration public Graph<T> Copy() Returns Type Description Graph<T> A copy of this graph | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<Vertex<T>> GetEnumerator() Returns Type Description IEnumerator<Vertex<T>> An enumerator that can be used to iterate through the collection. | Edit this page View Source RemoveVertex(Vertex<T>) Removes the vertex. Declaration public Graph<T> RemoveVertex(Vertex<T> vertex) Parameters Type Name Description Vertex<T> vertex The vertex. Returns Type Description Graph<T> This Implements IEnumerable<T> IEnumerable"
  },
  "api/BigBook.IO.BitReader.html": {
    "href": "api/BigBook.IO.BitReader.html",
    "title": "Class BitReader | Big Book of DataTypes API Reference",
    "keywords": "Class BitReader Bit reader Inheritance object BitReader Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook.IO Assembly: BigBook.dll Syntax public class BitReader : IDisposable Constructors | Edit this page View Source BitReader(byte[]) Initializes a new instance of the BitReader class. Declaration public BitReader(byte[] byteArray) Parameters Type Name Description byte[] byteArray The byte array. | Edit this page View Source BitReader(Stream) Initializes a new instance of the BitReader class. Declaration public BitReader(Stream stream) Parameters Type Name Description Stream stream The stream. Methods | Edit this page View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Edit this page View Source Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool managed) Parameters Type Name Description bool managed true to release both managed and unmanaged resources; false to release only unmanaged resources. | Edit this page View Source ReadBit(bool) Reads the next bit. Declaration public bool? ReadBit(bool bigEndian = false) Parameters Type Name Description bool bigEndian if set to true [big endian]. Returns Type Description bool? The next bit value in the stream | Edit this page View Source Skip(int) Skips the specified bit count. Declaration public void Skip(int bitCount) Parameters Type Name Description int bitCount The bit count. Implements IDisposable"
  },
  "api/BigBook.IO.Converters.BaseClasses.EndianBitConverterBase.html": {
    "href": "api/BigBook.IO.Converters.BaseClasses.EndianBitConverterBase.html",
    "title": "Class EndianBitConverterBase | Big Book of DataTypes API Reference",
    "keywords": "Class EndianBitConverterBase Endian bit converter base class Inheritance object EndianBitConverterBase BigEndianBitConverter LittleEndianBitConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook.IO.Converters.BaseClasses Assembly: BigBook.dll Syntax public abstract class EndianBitConverterBase Properties | Edit this page View Source BigEndian Gets the big endian bit converter. Declaration public static EndianBitConverterBase BigEndian { get; } Property Value Type Description EndianBitConverterBase The big endian bit converter. | Edit this page View Source IsLittleEndian Gets a value indicating whether this instance is little endian. Declaration public abstract bool IsLittleEndian { get; } Property Value Type Description bool true if this instance is little endian; otherwise, false. | Edit this page View Source LittleEndian Gets the little endian bit converter. Declaration public static EndianBitConverterBase LittleEndian { get; } Property Value Type Description EndianBitConverterBase The little endian bit converter. Methods | Edit this page View Source CopyBytes(bool, byte[], int) Copies the bytes. Declaration public void CopyBytes(bool value, byte[] buffer, int index) Parameters Type Name Description bool value if set to true [value]. byte[] buffer The buffer. int index The index. | Edit this page View Source CopyBytes(char, byte[], int) Copies the bytes. Declaration public void CopyBytes(char value, byte[] buffer, int index) Parameters Type Name Description char value The value. byte[] buffer The buffer. int index The index. | Edit this page View Source CopyBytes(decimal, byte[], int) Copies the bytes. Declaration public void CopyBytes(decimal value, byte[] buffer, int index) Parameters Type Name Description decimal value The value. byte[] buffer The buffer. int index The index. | Edit this page View Source CopyBytes(double, byte[], int) Copies the bytes. Declaration public void CopyBytes(double value, byte[] buffer, int index) Parameters Type Name Description double value The value. byte[] buffer The buffer. int index The index. | Edit this page View Source CopyBytes(short, byte[], int) Copies the bytes. Declaration public void CopyBytes(short value, byte[] buffer, int index) Parameters Type Name Description short value The value. byte[] buffer The buffer. int index The index. | Edit this page View Source CopyBytes(int, byte[], int) Copies the bytes. Declaration public void CopyBytes(int value, byte[] buffer, int index) Parameters Type Name Description int value The value. byte[] buffer The buffer. int index The index. | Edit this page View Source CopyBytes(long, byte[], int) Copies the bytes. Declaration public void CopyBytes(long value, byte[] buffer, int index) Parameters Type Name Description long value The value. byte[] buffer The buffer. int index The index. | Edit this page View Source CopyBytes(float, byte[], int) Copies the bytes. Declaration public void CopyBytes(float value, byte[] buffer, int index) Parameters Type Name Description float value The value. byte[] buffer The buffer. int index The index. | Edit this page View Source CopyBytes(ushort, byte[], int) Copies the bytes. Declaration public void CopyBytes(ushort value, byte[] buffer, int index) Parameters Type Name Description ushort value The value. byte[] buffer The buffer. int index The index. | Edit this page View Source CopyBytes(uint, byte[], int) Copies the bytes. Declaration public void CopyBytes(uint value, byte[] buffer, int index) Parameters Type Name Description uint value The value. byte[] buffer The buffer. int index The index. | Edit this page View Source CopyBytes(ulong, byte[], int) Copies the bytes. Declaration public void CopyBytes(ulong value, byte[] buffer, int index) Parameters Type Name Description ulong value The value. byte[] buffer The buffer. int index The index. | Edit this page View Source CopyBytesImpl(long, int, byte[], int) Copies the bytes implementation. Declaration protected abstract void CopyBytesImpl(long value, int bytes, byte[] buffer, int index) Parameters Type Name Description long value The value. int bytes The bytes. byte[] buffer The buffer. int index The index. | Edit this page View Source DoubleToLong(double) Converts a double to a long. Declaration public static long DoubleToLong(double value) Parameters Type Name Description double value The value. Returns Type Description long The resulting long. | Edit this page View Source FloatToInt(float) Converts a float to an integer Declaration public static int FloatToInt(float value) Parameters Type Name Description float value Float value Returns Type Description int The integer equivalent. | Edit this page View Source FromBytes(byte[], int, int) Converts a byte array to a long. Declaration protected abstract long FromBytes(byte[] value, int startIndex, int bytesToConvert) Parameters Type Name Description byte[] value The value. int startIndex The start index. int bytesToConvert The bytes to convert. Returns Type Description long The resulting long. | Edit this page View Source GetBytes(bool) Gets the bytes. Declaration public static byte[] GetBytes(bool value) Parameters Type Name Description bool value if set to true [value]. Returns Type Description byte[] Gets the resulting byte array. | Edit this page View Source GetBytes(char) Gets the bytes. Declaration public byte[] GetBytes(char value) Parameters Type Name Description char value The value. Returns Type Description byte[] The resulting byte array. | Edit this page View Source GetBytes(decimal) Gets the bytes. Declaration public byte[] GetBytes(decimal value) Parameters Type Name Description decimal value The value. Returns Type Description byte[] The resulting byte array. | Edit this page View Source GetBytes(double) Gets the bytes. Declaration public byte[] GetBytes(double value) Parameters Type Name Description double value The value. Returns Type Description byte[] The resulting byte array. | Edit this page View Source GetBytes(short) Gets the bytes. Declaration public byte[] GetBytes(short value) Parameters Type Name Description short value The value. Returns Type Description byte[] The resulting byte array. | Edit this page View Source GetBytes(int) Gets the bytes. Declaration public byte[] GetBytes(int value) Parameters Type Name Description int value The value. Returns Type Description byte[] The resulting byte array. | Edit this page View Source GetBytes(long) Gets the bytes. Declaration public byte[] GetBytes(long value) Parameters Type Name Description long value The value. Returns Type Description byte[] The resulting byte array. | Edit this page View Source GetBytes(float) Gets the bytes. Declaration public byte[] GetBytes(float value) Parameters Type Name Description float value The value. Returns Type Description byte[] The resulting byte array. | Edit this page View Source GetBytes(ushort) Gets the bytes. Declaration public byte[] GetBytes(ushort value) Parameters Type Name Description ushort value The value. Returns Type Description byte[] The resulting byte array. | Edit this page View Source GetBytes(uint) Gets the bytes. Declaration public byte[] GetBytes(uint value) Parameters Type Name Description uint value The value. Returns Type Description byte[] The resulting byte array. | Edit this page View Source GetBytes(ulong) Gets the bytes. Declaration public byte[] GetBytes(ulong value) Parameters Type Name Description ulong value The value. Returns Type Description byte[] The resulting byte array. | Edit this page View Source IntToFloat(int) Converts an integer to a float. Declaration public static float IntToFloat(int value) Parameters Type Name Description int value The integer value Returns Type Description float The float value. | Edit this page View Source LongToDouble(long) Converts a long to a double. Declaration public static double LongToDouble(long value) Parameters Type Name Description long value The value. Returns Type Description double The resulting double. | Edit this page View Source ToBoolean(byte[], int) To the boolean. Declaration public static bool ToBoolean(byte[] value, int startIndex) Parameters Type Name Description byte[] value The value. int startIndex The start index. Returns Type Description bool The resulting boolean. Exceptions Type Condition ArgumentOutOfRangeException | Edit this page View Source ToChar(byte[], int) To the character. Declaration public char ToChar(byte[] value, int startIndex) Parameters Type Name Description byte[] value The value. int startIndex The start index. Returns Type Description char The resulting character. | Edit this page View Source ToDecimal(byte[], int) To the decimal. Declaration public decimal ToDecimal(byte[] value, int startIndex) Parameters Type Name Description byte[] value The value. int startIndex The start index. Returns Type Description decimal The resulting decimal value | Edit this page View Source ToDouble(byte[], int) To the double. Declaration public double ToDouble(byte[] value, int startIndex) Parameters Type Name Description byte[] value The value. int startIndex The start index. Returns Type Description double The resulting double. | Edit this page View Source ToFloat(byte[], int) To the float. Declaration public float ToFloat(byte[] value, int startIndex) Parameters Type Name Description byte[] value The value. int startIndex The start index. Returns Type Description float The resulting float. | Edit this page View Source ToInt(byte[], int) Converts the string representation of a number to an integer. Declaration public int ToInt(byte[] value, int startIndex) Parameters Type Name Description byte[] value The value. int startIndex The start index. Returns Type Description int The resulting integer. | Edit this page View Source ToLong(byte[], int) To the long. Declaration public long ToLong(byte[] value, int startIndex) Parameters Type Name Description byte[] value The value. int startIndex The start index. Returns Type Description long The resulting long. | Edit this page View Source ToShort(byte[], int) To the short. Declaration public short ToShort(byte[] value, int startIndex) Parameters Type Name Description byte[] value The value. int startIndex The start index. Returns Type Description short The resulting short. | Edit this page View Source ToString(byte[]) Returns a string that represents this instance. Declaration public static string ToString(byte[] value) Parameters Type Name Description byte[] value The value. Returns Type Description string A string that represents this instance. | Edit this page View Source ToString(byte[], int) Returns a string that represents this instance. Declaration public static string ToString(byte[] value, int startIndex) Parameters Type Name Description byte[] value The value. int startIndex The start index. Returns Type Description string A string that represents this instance. | Edit this page View Source ToString(byte[], int, int) Returns a string that represents this instance. Declaration public static string ToString(byte[] value, int startIndex, int length) Parameters Type Name Description byte[] value The value. int startIndex The start index. int length The length. Returns Type Description string A string that represents this instance. | Edit this page View Source ToUnsignedInteger(byte[], int) To the unsigned integer. Declaration public uint ToUnsignedInteger(byte[] value, int startIndex) Parameters Type Name Description byte[] value The value. int startIndex The start index. Returns Type Description uint The resulting unsigned integer | Edit this page View Source ToUnsignedLong(byte[], int) To the unsigned long. Declaration public ulong ToUnsignedLong(byte[] value, int startIndex) Parameters Type Name Description byte[] value The value. int startIndex The start index. Returns Type Description ulong The resulting unsigned long. | Edit this page View Source ToUnsignedShort(byte[], int) To the unsigned short. Declaration public ushort ToUnsignedShort(byte[] value, int startIndex) Parameters Type Name Description byte[] value The value. int startIndex The start index. Returns Type Description ushort The resulting unsigned short."
  },
  "api/BigBook.IO.Converters.BaseClasses.html": {
    "href": "api/BigBook.IO.Converters.BaseClasses.html",
    "title": "Namespace BigBook.IO.Converters.BaseClasses | Big Book of DataTypes API Reference",
    "keywords": "Namespace BigBook.IO.Converters.BaseClasses Classes EndianBitConverterBase Endian bit converter base class"
  },
  "api/BigBook.IO.Converters.BigEndianBitConverter.html": {
    "href": "api/BigBook.IO.Converters.BigEndianBitConverter.html",
    "title": "Class BigEndianBitConverter | Big Book of DataTypes API Reference",
    "keywords": "Class BigEndianBitConverter Big endian bit converter Inheritance object EndianBitConverterBase BigEndianBitConverter Inherited Members EndianBitConverterBase.BigEndian EndianBitConverterBase.LittleEndian EndianBitConverterBase.DoubleToLong(double) EndianBitConverterBase.FloatToInt(float) EndianBitConverterBase.GetBytes(bool) EndianBitConverterBase.IntToFloat(int) EndianBitConverterBase.LongToDouble(long) EndianBitConverterBase.ToBoolean(byte[], int) EndianBitConverterBase.ToString(byte[]) EndianBitConverterBase.ToString(byte[], int) EndianBitConverterBase.ToString(byte[], int, int) EndianBitConverterBase.CopyBytes(decimal, byte[], int) EndianBitConverterBase.CopyBytes(bool, byte[], int) EndianBitConverterBase.CopyBytes(char, byte[], int) EndianBitConverterBase.CopyBytes(double, byte[], int) EndianBitConverterBase.CopyBytes(short, byte[], int) EndianBitConverterBase.CopyBytes(int, byte[], int) EndianBitConverterBase.CopyBytes(long, byte[], int) EndianBitConverterBase.CopyBytes(float, byte[], int) EndianBitConverterBase.CopyBytes(ushort, byte[], int) EndianBitConverterBase.CopyBytes(uint, byte[], int) EndianBitConverterBase.CopyBytes(ulong, byte[], int) EndianBitConverterBase.GetBytes(decimal) EndianBitConverterBase.GetBytes(char) EndianBitConverterBase.GetBytes(double) EndianBitConverterBase.GetBytes(short) EndianBitConverterBase.GetBytes(int) EndianBitConverterBase.GetBytes(long) EndianBitConverterBase.GetBytes(float) EndianBitConverterBase.GetBytes(ushort) EndianBitConverterBase.GetBytes(uint) EndianBitConverterBase.GetBytes(ulong) EndianBitConverterBase.ToChar(byte[], int) EndianBitConverterBase.ToDecimal(byte[], int) EndianBitConverterBase.ToDouble(byte[], int) EndianBitConverterBase.ToFloat(byte[], int) EndianBitConverterBase.ToInt(byte[], int) EndianBitConverterBase.ToLong(byte[], int) EndianBitConverterBase.ToShort(byte[], int) EndianBitConverterBase.ToUnsignedInteger(byte[], int) EndianBitConverterBase.ToUnsignedLong(byte[], int) EndianBitConverterBase.ToUnsignedShort(byte[], int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook.IO.Converters Assembly: BigBook.dll Syntax public class BigEndianBitConverter : EndianBitConverterBase Properties | Edit this page View Source IsLittleEndian Gets a value indicating whether this instance is little endian. Declaration public override bool IsLittleEndian { get; } Property Value Type Description bool true if this instance is little endian; otherwise, false. Overrides EndianBitConverterBase.IsLittleEndian See Also EndianBitConverterBase Methods | Edit this page View Source CopyBytesImpl(long, int, byte[], int) Copies the bytes implementation. Declaration protected override void CopyBytesImpl(long value, int bytes, byte[] buffer, int index) Parameters Type Name Description long value The value. int bytes The bytes. byte[] buffer The buffer. int index The index. Overrides EndianBitConverterBase.CopyBytesImpl(long, int, byte[], int) See Also EndianBitConverterBase | Edit this page View Source FromBytes(byte[], int, int) Converts a byte array to a long. Declaration protected override long FromBytes(byte[] value, int startIndex, int bytesToConvert) Parameters Type Name Description byte[] value The value. int startIndex The start index. int bytesToConvert The bytes to convert. Returns Type Description long The resulting long. Overrides EndianBitConverterBase.FromBytes(byte[], int, int) See Also EndianBitConverterBase See Also EndianBitConverterBase"
  },
  "api/BigBook.IO.Converters.LittleEndianBitConverter.html": {
    "href": "api/BigBook.IO.Converters.LittleEndianBitConverter.html",
    "title": "Class LittleEndianBitConverter | Big Book of DataTypes API Reference",
    "keywords": "Class LittleEndianBitConverter Little endian bit converter Inheritance object EndianBitConverterBase LittleEndianBitConverter Inherited Members EndianBitConverterBase.BigEndian EndianBitConverterBase.LittleEndian EndianBitConverterBase.DoubleToLong(double) EndianBitConverterBase.FloatToInt(float) EndianBitConverterBase.GetBytes(bool) EndianBitConverterBase.IntToFloat(int) EndianBitConverterBase.LongToDouble(long) EndianBitConverterBase.ToBoolean(byte[], int) EndianBitConverterBase.ToString(byte[]) EndianBitConverterBase.ToString(byte[], int) EndianBitConverterBase.ToString(byte[], int, int) EndianBitConverterBase.CopyBytes(decimal, byte[], int) EndianBitConverterBase.CopyBytes(bool, byte[], int) EndianBitConverterBase.CopyBytes(char, byte[], int) EndianBitConverterBase.CopyBytes(double, byte[], int) EndianBitConverterBase.CopyBytes(short, byte[], int) EndianBitConverterBase.CopyBytes(int, byte[], int) EndianBitConverterBase.CopyBytes(long, byte[], int) EndianBitConverterBase.CopyBytes(float, byte[], int) EndianBitConverterBase.CopyBytes(ushort, byte[], int) EndianBitConverterBase.CopyBytes(uint, byte[], int) EndianBitConverterBase.CopyBytes(ulong, byte[], int) EndianBitConverterBase.GetBytes(decimal) EndianBitConverterBase.GetBytes(char) EndianBitConverterBase.GetBytes(double) EndianBitConverterBase.GetBytes(short) EndianBitConverterBase.GetBytes(int) EndianBitConverterBase.GetBytes(long) EndianBitConverterBase.GetBytes(float) EndianBitConverterBase.GetBytes(ushort) EndianBitConverterBase.GetBytes(uint) EndianBitConverterBase.GetBytes(ulong) EndianBitConverterBase.ToChar(byte[], int) EndianBitConverterBase.ToDecimal(byte[], int) EndianBitConverterBase.ToDouble(byte[], int) EndianBitConverterBase.ToFloat(byte[], int) EndianBitConverterBase.ToInt(byte[], int) EndianBitConverterBase.ToLong(byte[], int) EndianBitConverterBase.ToShort(byte[], int) EndianBitConverterBase.ToUnsignedInteger(byte[], int) EndianBitConverterBase.ToUnsignedLong(byte[], int) EndianBitConverterBase.ToUnsignedShort(byte[], int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook.IO.Converters Assembly: BigBook.dll Syntax public class LittleEndianBitConverter : EndianBitConverterBase Properties | Edit this page View Source IsLittleEndian Gets a value indicating whether this instance is little endian. Declaration public override bool IsLittleEndian { get; } Property Value Type Description bool true if this instance is little endian; otherwise, false. Overrides EndianBitConverterBase.IsLittleEndian See Also EndianBitConverterBase Methods | Edit this page View Source CopyBytesImpl(long, int, byte[], int) Copies the bytes implementation. Declaration protected override void CopyBytesImpl(long value, int bytes, byte[] buffer, int index) Parameters Type Name Description long value The value. int bytes The bytes. byte[] buffer The buffer. int index The index. Overrides EndianBitConverterBase.CopyBytesImpl(long, int, byte[], int) See Also EndianBitConverterBase | Edit this page View Source FromBytes(byte[], int, int) Converts a byte array to a long. Declaration protected override long FromBytes(byte[] value, int startIndex, int bytesToConvert) Parameters Type Name Description byte[] value The value. int startIndex The start index. int bytesToConvert The bytes to convert. Returns Type Description long The resulting long. Overrides EndianBitConverterBase.FromBytes(byte[], int, int) See Also EndianBitConverterBase See Also EndianBitConverterBase"
  },
  "api/BigBook.IO.Converters.Structs.IntFloatUnion.html": {
    "href": "api/BigBook.IO.Converters.Structs.IntFloatUnion.html",
    "title": "Struct IntFloatUnion | Big Book of DataTypes API Reference",
    "keywords": "Struct IntFloatUnion Int/float union struct. Implements IEquatable<IntFloatUnion> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: BigBook.IO.Converters.Structs Assembly: BigBook.dll Syntax public struct IntFloatUnion : IEquatable<IntFloatUnion> Constructors | Edit this page View Source IntFloatUnion(int) Initializes a new instance of the IntFloatUnion struct. Declaration public IntFloatUnion(int integerValue) Parameters Type Name Description int integerValue The integer value. | Edit this page View Source IntFloatUnion(float) Initializes a new instance of the IntFloatUnion struct. Declaration public IntFloatUnion(float floatValue) Parameters Type Name Description float floatValue The float value. Fields | Edit this page View Source FloatValue The float value Declaration public readonly float FloatValue Field Value Type Description float | Edit this page View Source IntegerValue The integer value Declaration public readonly int IntegerValue Field Value Type Description int Methods | Edit this page View Source Equals(IntFloatUnion) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(IntFloatUnion other) Parameters Type Name Description IntFloatUnion other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object) Determines whether the specified object, is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with this instance. Returns Type Description bool true if the specified object is equal to this instance; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() Operators | Edit this page View Source operator ==(IntFloatUnion, IntFloatUnion) Implements the operator ==. Declaration public static bool operator ==(IntFloatUnion union1, IntFloatUnion union2) Parameters Type Name Description IntFloatUnion union1 The union1. IntFloatUnion union2 The union2. Returns Type Description bool The result of the operator. | Edit this page View Source operator !=(IntFloatUnion, IntFloatUnion) Implements the operator !=. Declaration public static bool operator !=(IntFloatUnion union1, IntFloatUnion union2) Parameters Type Name Description IntFloatUnion union1 The union1. IntFloatUnion union2 The union2. Returns Type Description bool The result of the operator. Implements IEquatable<T>"
  },
  "api/BigBook.IO.Converters.Structs.html": {
    "href": "api/BigBook.IO.Converters.Structs.html",
    "title": "Namespace BigBook.IO.Converters.Structs | Big Book of DataTypes API Reference",
    "keywords": "Namespace BigBook.IO.Converters.Structs Structs IntFloatUnion Int/float union struct."
  },
  "api/BigBook.IO.Converters.html": {
    "href": "api/BigBook.IO.Converters.html",
    "title": "Namespace BigBook.IO.Converters | Big Book of DataTypes API Reference",
    "keywords": "Namespace BigBook.IO.Converters Classes BigEndianBitConverter Big endian bit converter LittleEndianBitConverter Little endian bit converter"
  },
  "api/BigBook.IO.EndianBinaryReader.html": {
    "href": "api/BigBook.IO.EndianBinaryReader.html",
    "title": "Class EndianBinaryReader | Big Book of DataTypes API Reference",
    "keywords": "Class EndianBinaryReader Endian binary reader Inheritance object EndianBinaryReader Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook.IO Assembly: BigBook.dll Syntax public class EndianBinaryReader : IDisposable Constructors | Edit this page View Source EndianBinaryReader(EndianBitConverterBase, Stream) Initializes a new instance of the EndianBinaryReader class. Declaration public EndianBinaryReader(EndianBitConverterBase bitConverter, Stream stream) Parameters Type Name Description EndianBitConverterBase bitConverter The bit converter. Stream stream The stream. See Also IDisposable | Edit this page View Source EndianBinaryReader(EndianBitConverterBase, Stream, Encoding) Initializes a new instance of the EndianBinaryReader class. Declaration public EndianBinaryReader(EndianBitConverterBase bitConverter, Stream stream, Encoding encoding) Parameters Type Name Description EndianBitConverterBase bitConverter The bit converter. Stream stream The stream. Encoding encoding The encoding. Exceptions Type Condition ArgumentException Stream is not readable See Also IDisposable Properties | Edit this page View Source BaseStream Gets the underlying stream of the EndianBinaryReader. Declaration public Stream? BaseStream { get; } Property Value Type Description Stream See Also IDisposable | Edit this page View Source BitConverter Gets the bit converter used to read values from the stream. Declaration public EndianBitConverterBase BitConverter { get; } Property Value Type Description EndianBitConverterBase See Also IDisposable | Edit this page View Source Encoding Gets the encoding used to read strings Declaration public Encoding Encoding { get; } Property Value Type Description Encoding See Also IDisposable Methods | Edit this page View Source Close() Closes the reader, including the underlying stream. Declaration public void Close() See Also IDisposable | Edit this page View Source Dispose() Disposes of the underlying stream. Declaration public void Dispose() See Also IDisposable | Edit this page View Source Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool managed) Parameters Type Name Description bool managed true to release both managed and unmanaged resources; false to release only unmanaged resources. See Also IDisposable | Edit this page View Source Read() Reads this instance. Declaration public int Read() Returns Type Description int The resulting int. See Also IDisposable | Edit this page View Source Read(byte[], int, int) Reads the specified buffer. Declaration public int Read(byte[] buffer, int index, int count) Parameters Type Name Description byte[] buffer The buffer. int index The index. int count The count. Returns Type Description int The resulting integer. Exceptions Type Condition NullReferenceException Base stream is currently null. See Also IDisposable | Edit this page View Source Read(char[], int, int) Reads the specified data. Declaration public int Read(char[] data, int index, int count) Parameters Type Name Description char[] data The data. int index The index. int count The count. Returns Type Description int The resulting integer Exceptions Type Condition NullReferenceException Base stream is currently null. See Also IDisposable | Edit this page View Source Read7BitEncodedInt() Read7s the bit encoded int. Declaration public int Read7BitEncodedInt() Returns Type Description int The resulting int. Exceptions Type Condition NullReferenceException Base stream is currently null. EndOfStreamException IOException Invalid 7-bit encoded integer in stream. See Also IDisposable | Edit this page View Source ReadBigEndian7BitEncodedInt() Reads the big endian7 bit encoded int. Declaration public int ReadBigEndian7BitEncodedInt() Returns Type Description int The resulting int. Exceptions Type Condition NullReferenceException Base stream is currently null. EndOfStreamException IOException Invalid 7-bit encoded integer in stream. See Also IDisposable | Edit this page View Source ReadBoolean() Reads the boolean. Declaration public bool ReadBoolean() Returns Type Description bool The resulting boolean See Also IDisposable | Edit this page View Source ReadByte() Reads a single byte from the stream. Declaration public byte ReadByte() Returns Type Description byte The byte read See Also IDisposable | Edit this page View Source ReadBytes(int) Reads the specified number of bytes, returning them in a new byte array. If not enough bytes are available before the end of the stream, this method will return what is available. Declaration public byte[] ReadBytes(int count) Parameters Type Name Description int count The number of bytes to read Returns Type Description byte[] The bytes read See Also IDisposable | Edit this page View Source ReadBytesOrThrow(int) Reads the specified number of bytes, returning them in a new byte array. If not enough bytes are available before the end of the stream, this method will throw an IOException. Declaration public byte[] ReadBytesOrThrow(int count) Parameters Type Name Description int count The number of bytes to read Returns Type Description byte[] The bytes read See Also IDisposable | Edit this page View Source ReadDecimal() Reads a decimal value from the stream, using the bit converter for this reader. 16 bytes are read. Declaration public decimal ReadDecimal() Returns Type Description decimal The decimal value read See Also IDisposable | Edit this page View Source ReadDouble() Reads a double-precision floating-point value from the stream, using the bit converter for this reader. 8 bytes are read. Declaration public double ReadDouble() Returns Type Description double The floating point value read See Also IDisposable | Edit this page View Source ReadFloat() Reads a single-precision floating-point value from the stream, using the bit converter for this reader. 4 bytes are read. Declaration public float ReadFloat() Returns Type Description float The floating point value read See Also IDisposable | Edit this page View Source ReadInt() Reads a 32-bit signed integer from the stream, using the bit converter for this reader. 4 bytes are read. Declaration public int ReadInt() Returns Type Description int The 32-bit integer read See Also IDisposable | Edit this page View Source ReadLong() Reads a 64-bit signed integer from the stream, using the bit converter for this reader. 8 bytes are read. Declaration public long ReadLong() Returns Type Description long The 64-bit integer read See Also IDisposable | Edit this page View Source ReadShort() Reads a 16-bit signed integer from the stream, using the bit converter for this reader. 2 bytes are read. Declaration public short ReadShort() Returns Type Description short The 16-bit integer read See Also IDisposable | Edit this page View Source ReadSignedByte() Reads a single signed byte from the stream. Declaration public sbyte ReadSignedByte() Returns Type Description sbyte The byte read See Also IDisposable | Edit this page View Source ReadString() Reads a length-prefixed string from the stream, using the encoding for this reader. A 7-bit encoded integer is first read, which specifies the number of bytes to read from the stream. These bytes are then converted into a string with the encoding for this reader. Declaration public string ReadString() Returns Type Description string The string read from the stream. See Also IDisposable | Edit this page View Source ReadUnsignedInt() Reads a 32-bit unsigned integer from the stream, using the bit converter for this reader. 4 bytes are read. Declaration public uint ReadUnsignedInt() Returns Type Description uint The 32-bit unsigned integer read See Also IDisposable | Edit this page View Source ReadUnsignedLong() Reads a 64-bit unsigned integer from the stream, using the bit converter for this reader. 8 bytes are read. Declaration public ulong ReadUnsignedLong() Returns Type Description ulong The 64-bit unsigned integer read See Also IDisposable | Edit this page View Source ReadUnsignedShort() Reads a 16-bit unsigned integer from the stream, using the bit converter for this reader. 2 bytes are read. Declaration public ushort ReadUnsignedShort() Returns Type Description ushort The 16-bit unsigned integer read See Also IDisposable | Edit this page View Source Seek(int, SeekOrigin) Seeks within the stream. Declaration public void Seek(int offset, SeekOrigin origin) Parameters Type Name Description int offset Offset to seek to. SeekOrigin origin Origin of seek operation. See Also IDisposable Implements IDisposable See Also IDisposable"
  },
  "api/BigBook.IO.EndianBinaryWriter.html": {
    "href": "api/BigBook.IO.EndianBinaryWriter.html",
    "title": "Class EndianBinaryWriter | Big Book of DataTypes API Reference",
    "keywords": "Class EndianBinaryWriter Endian based binary writer Inheritance object EndianBinaryWriter Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook.IO Assembly: BigBook.dll Syntax public class EndianBinaryWriter : IDisposable Constructors | Edit this page View Source EndianBinaryWriter(EndianBitConverterBase, Stream) Initializes a new instance of the EndianBinaryWriter class. Declaration public EndianBinaryWriter(EndianBitConverterBase bitConverter, Stream stream) Parameters Type Name Description EndianBitConverterBase bitConverter The bit converter. Stream stream The stream. See Also IDisposable | Edit this page View Source EndianBinaryWriter(EndianBitConverterBase, Stream, Encoding) Initializes a new instance of the EndianBinaryWriter class. Declaration public EndianBinaryWriter(EndianBitConverterBase bitConverter, Stream stream, Encoding encoding) Parameters Type Name Description EndianBitConverterBase bitConverter The bit converter. Stream stream The stream. Encoding encoding The encoding. Exceptions Type Condition ArgumentException Stream is not writable See Also IDisposable Properties | Edit this page View Source BaseStream Gets the underlying stream of the EndianBinaryWriter. Declaration public Stream? BaseStream { get; } Property Value Type Description Stream The base stream. See Also IDisposable | Edit this page View Source BitConverter Gets the bit converter used to write values to the stream Declaration public EndianBitConverterBase BitConverter { get; } Property Value Type Description EndianBitConverterBase The bit converter. See Also IDisposable | Edit this page View Source Encoding Gets the encoding used to write strings Declaration public Encoding Encoding { get; } Property Value Type Description Encoding The encoding. See Also IDisposable Methods | Edit this page View Source Close() Closes the writer, including the underlying stream. Declaration public void Close() See Also IDisposable | Edit this page View Source Dispose() Disposes of the underlying stream. Declaration public void Dispose() See Also IDisposable | Edit this page View Source Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool managed) Parameters Type Name Description bool managed true to release both managed and unmanaged resources; false to release only unmanaged resources. See Also IDisposable | Edit this page View Source Flush() Flushes the underlying stream. Declaration public void Flush() See Also IDisposable | Edit this page View Source Seek(int, SeekOrigin) Seeks within the stream. Declaration public void Seek(int offset, SeekOrigin origin) Parameters Type Name Description int offset Offset to seek to. SeekOrigin origin Origin of seek operation. See Also IDisposable | Edit this page View Source Write(bool) Writes a boolean value to the stream. 1 byte is written. Declaration public void Write(bool value) Parameters Type Name Description bool value The value to write See Also IDisposable | Edit this page View Source Write(byte) Writes a signed byte to the stream. Declaration public void Write(byte value) Parameters Type Name Description byte value The value to write See Also IDisposable | Edit this page View Source Write(byte[]) Writes an array of bytes to the stream. Declaration public void Write(byte[] value) Parameters Type Name Description byte[] value The values to write See Also IDisposable | Edit this page View Source Write(byte[], int, int) Writes a portion of an array of bytes to the stream. Declaration public void Write(byte[] value, int offset, int count) Parameters Type Name Description byte[] value An array containing the bytes to write int offset The index of the first byte to write within the array int count The number of bytes to write See Also IDisposable | Edit this page View Source Write(char) Writes a single character to the stream, using the encoding for this writer. Declaration public void Write(char value) Parameters Type Name Description char value The value to write See Also IDisposable | Edit this page View Source Write(char[]) Writes an array of characters to the stream, using the encoding for this writer. Declaration public void Write(char[] value) Parameters Type Name Description char[] value An array containing the characters to write See Also IDisposable | Edit this page View Source Write(decimal) Writes a decimal value to the stream, using the bit converter for this writer. 16 bytes are written. Declaration public void Write(decimal value) Parameters Type Name Description decimal value The value to write See Also IDisposable | Edit this page View Source Write(double) Writes a double-precision floating-point value to the stream, using the bit converter for this writer. 8 bytes are written. Declaration public void Write(double value) Parameters Type Name Description double value The value to write See Also IDisposable | Edit this page View Source Write(short) Writes a 16-bit signed integer to the stream, using the bit converter for this writer. 2 bytes are written. Declaration public void Write(short value) Parameters Type Name Description short value The value to write See Also IDisposable | Edit this page View Source Write(int) Writes a 32-bit signed integer to the stream, using the bit converter for this writer. 4 bytes are written. Declaration public void Write(int value) Parameters Type Name Description int value The value to write See Also IDisposable | Edit this page View Source Write(long) Writes a 64-bit signed integer to the stream, using the bit converter for this writer. 8 bytes are written. Declaration public void Write(long value) Parameters Type Name Description long value The value to write See Also IDisposable | Edit this page View Source Write(sbyte) Writes an unsigned byte to the stream. Declaration public void Write(sbyte value) Parameters Type Name Description sbyte value The value to write See Also IDisposable | Edit this page View Source Write(float) Writes a single-precision floating-point value to the stream, using the bit converter for this writer. 4 bytes are written. Declaration public void Write(float value) Parameters Type Name Description float value The value to write See Also IDisposable | Edit this page View Source Write(string) Writes a string to the stream, using the encoding for this writer. Declaration public void Write(string value) Parameters Type Name Description string value The value to write. Must not be null. Exceptions Type Condition ArgumentNullException value is null See Also IDisposable | Edit this page View Source Write(ushort) Writes a 16-bit unsigned integer to the stream, using the bit converter for this writer. 2 bytes are written. Declaration public void Write(ushort value) Parameters Type Name Description ushort value The value to write See Also IDisposable | Edit this page View Source Write(uint) Writes a 32-bit unsigned integer to the stream, using the bit converter for this writer. 4 bytes are written. Declaration public void Write(uint value) Parameters Type Name Description uint value The value to write See Also IDisposable | Edit this page View Source Write(ulong) Writes a 64-bit unsigned integer to the stream, using the bit converter for this writer. 8 bytes are written. Declaration public void Write(ulong value) Parameters Type Name Description ulong value The value to write See Also IDisposable | Edit this page View Source Write7BitEncodedInt(int) Writes a 7-bit encoded integer from the stream. This is stored with the least significant information first, with 7 bits of information per byte of value, and the top bit as a continuation flag. Declaration public void Write7BitEncodedInt(int value) Parameters Type Name Description int value The 7-bit encoded integer to write to the stream See Also IDisposable Implements IDisposable See Also IDisposable"
  },
  "api/BigBook.IO.html": {
    "href": "api/BigBook.IO.html",
    "title": "Namespace BigBook.IO | Big Book of DataTypes API Reference",
    "keywords": "Namespace BigBook.IO Classes BitReader Bit reader EndianBinaryReader Endian binary reader EndianBinaryWriter Endian based binary writer"
  },
  "api/BigBook.LazyAsync-1.html": {
    "href": "api/BigBook.LazyAsync-1.html",
    "title": "Class LazyAsync<T> | Big Book of DataTypes API Reference",
    "keywords": "Class LazyAsync<T> Lazy class that handles asyc Inheritance object Lazy<Task<T>> LazyAsync<T> Inherited Members Lazy<Task<T>>.ToString() Lazy<Task<T>>.IsValueCreated Lazy<Task<T>>.Value object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: BigBook Assembly: BigBook.dll Syntax public class LazyAsync<T> : Lazy<Task<T>> Type Parameters Name Description T The return type Constructors | Edit this page View Source LazyAsync(Func<Task<T>>) Initializes a new instance of the LazyAsync<T> class. Declaration public LazyAsync(Func<Task<T>> func) Parameters Type Name Description Func<Task<T>> func The function. See Also Lazy<T> | Edit this page View Source LazyAsync(Func<T>) Initializes a new instance of the LazyAsync<T> class. Declaration public LazyAsync(Func<T> func) Parameters Type Name Description Func<T> func The function. See Also Lazy<T> Methods | Edit this page View Source GetAwaiter() Gets the awaiter. Declaration public TaskAwaiter<T> GetAwaiter() Returns Type Description TaskAwaiter<T> The awaiter. See Also Lazy<T> See Also Lazy<T>"
  },
  "api/BigBook.ListMapping-2.html": {
    "href": "api/BigBook.ListMapping-2.html",
    "title": "Class ListMapping<T1, T2> | Big Book of DataTypes API Reference",
    "keywords": "Class ListMapping<T1, T2> Maps a key to a list of data Inheritance object ListMapping<T1, T2> Implements IDictionary<T1, IEnumerable<T2>> ICollection<KeyValuePair<T1, IEnumerable<T2>>> IEnumerable<KeyValuePair<T1, IEnumerable<T2>>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: BigBook Assembly: BigBook.dll Syntax public class ListMapping<T1, T2> : IDictionary<T1, IEnumerable<T2>>, ICollection<KeyValuePair<T1, IEnumerable<T2>>>, IEnumerable<KeyValuePair<T1, IEnumerable<T2>>>, IEnumerable where T1 : notnull Type Parameters Name Description T1 Key value T2 Type that the list should contain Properties | Edit this page View Source Count The number of items in the listing Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source IsReadOnly Not read only Declaration public bool IsReadOnly { get; } Property Value Type Description bool | Edit this page View Source this[T1] Gets a list of values associated with a key Declaration public IEnumerable<T2> this[T1 key] { get; set; } Parameters Type Name Description T1 key Key to look for Property Value Type Description IEnumerable<T2> The list of values | Edit this page View Source Items Container holding the data Declaration protected Dictionary<T1, List<T2>> Items { get; } Property Value Type Description Dictionary<T1, List<T2>> | Edit this page View Source Keys The list of keys within the mapping Declaration public ICollection<T1> Keys { get; } Property Value Type Description ICollection<T1> | Edit this page View Source Values List that contains the list of values Declaration public ICollection<IEnumerable<T2>> Values { get; } Property Value Type Description ICollection<IEnumerable<T2>> Methods | Edit this page View Source Add(KeyValuePair<T1, IEnumerable<T2>>) Adds a key value pair Declaration public void Add(KeyValuePair<T1, IEnumerable<T2>> item) Parameters Type Name Description KeyValuePair<T1, IEnumerable<T2>> item Key value pair to add | Edit this page View Source Add(T1, IEnumerable<T2>) Adds a list of items to the mapping Declaration public void Add(T1 key, IEnumerable<T2> value) Parameters Type Name Description T1 key Key value IEnumerable<T2> value The values to add | Edit this page View Source Add(T1, T2) Adds an item to the mapping Declaration public void Add(T1 key, T2 value) Parameters Type Name Description T1 key Key value T2 value The value to add | Edit this page View Source Clear() Clears all items from the listing Declaration public void Clear() | Edit this page View Source Contains(KeyValuePair<T1, IEnumerable<T2>>) Does this contain the key value pairs? Declaration public bool Contains(KeyValuePair<T1, IEnumerable<T2>> item) Parameters Type Name Description KeyValuePair<T1, IEnumerable<T2>> item Key value pair to check Returns Type Description bool True if it exists, false otherwise | Edit this page View Source Contains(T1, IEnumerable<T2>) Does the list mapping contain the key value pairs? Declaration public bool Contains(T1 key, IEnumerable<T2> values) Parameters Type Name Description T1 key Key value IEnumerable<T2> values Value Returns Type Description bool True if it exists, false otherwise | Edit this page View Source Contains(T1, T2) Does the list mapping contain the key value pair? Declaration public bool Contains(T1 key, T2 value) Parameters Type Name Description T1 key Key T2 value Value Returns Type Description bool True if it exists, false otherwise | Edit this page View Source ContainsKey(T1) Determines if a key exists Declaration public bool ContainsKey(T1 key) Parameters Type Name Description T1 key Key to check on Returns Type Description bool True if it exists, false otherwise | Edit this page View Source CopyTo(KeyValuePair<T1, IEnumerable<T2>>[], int) Not implemented Declaration public void CopyTo(KeyValuePair<T1, IEnumerable<T2>>[] array, int arrayIndex) Parameters Type Name Description KeyValuePair<T1, IEnumerable<T2>>[] array Array to copy to int arrayIndex array index | Edit this page View Source GetEnumerator() Gets the enumerator Declaration public IEnumerator<KeyValuePair<T1, IEnumerable<T2>>> GetEnumerator() Returns Type Description IEnumerator<KeyValuePair<T1, IEnumerable<T2>>> The enumerator for this object | Edit this page View Source Remove(KeyValuePair<T1, IEnumerable<T2>>) Removes a key value pair from the list mapping Declaration public bool Remove(KeyValuePair<T1, IEnumerable<T2>> item) Parameters Type Name Description KeyValuePair<T1, IEnumerable<T2>> item items to remove Returns Type Description bool True if it is removed, false otherwise | Edit this page View Source Remove(T1) Remove a list of items associated with a key Declaration public bool Remove(T1 key) Parameters Type Name Description T1 key Key to use Returns Type Description bool True if the key is found, false otherwise | Edit this page View Source Remove(T1, T2) Removes a key value pair from the list mapping Declaration public bool Remove(T1 key, T2 value) Parameters Type Name Description T1 key Key to remove T2 value Value to remove Returns Type Description bool True if it is removed, false otherwise | Edit this page View Source ToString() Returns a string that represents this instance. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides object.ToString() | Edit this page View Source TryGetValue(T1, out IEnumerable<T2>) Tries to get the value associated with the key Declaration public bool TryGetValue(T1 key, out IEnumerable<T2> value) Parameters Type Name Description T1 key Key value IEnumerable<T2> value The values getting Returns Type Description bool True if it was able to get the value, false otherwise Implements IDictionary<TKey, TValue> ICollection<T> IEnumerable<T> IEnumerable"
  },
  "api/BigBook.ManyToManyIndex-2.html": {
    "href": "api/BigBook.ManyToManyIndex-2.html",
    "title": "Class ManyToManyIndex<TFirst, TSecond> | Big Book of DataTypes API Reference",
    "keywords": "Class ManyToManyIndex<TFirst, TSecond> Two way, many to many index Inheritance object ManyToManyIndex<TFirst, TSecond> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook Assembly: BigBook.dll Syntax public class ManyToManyIndex<TFirst, TSecond> where TFirst : notnull where TSecond : notnull Type Parameters Name Description TFirst The type of the first. TSecond The type of the second. Properties | Edit this page View Source First Gets the first. Declaration public IEnumerable<TFirst> First { get; } Property Value Type Description IEnumerable<TFirst> The first. | Edit this page View Source Second Gets the second. Declaration public IEnumerable<TSecond> Second { get; } Property Value Type Description IEnumerable<TSecond> The second. Methods | Edit this page View Source Add(TFirst, IEnumerable<TSecond>) Adds the specified data to the mapping Declaration public void Add(TFirst key, IEnumerable<TSecond> list) Parameters Type Name Description TFirst key The key. IEnumerable<TSecond> list The list. | Edit this page View Source Add(TFirst, params TSecond[]) Adds the specified data to the mapping Declaration public void Add(TFirst key, params TSecond[] list) Parameters Type Name Description TFirst key The key. TSecond[] list The list. | Edit this page View Source Add(TSecond, IEnumerable<TFirst>) Adds the specified data to the mapping Declaration public void Add(TSecond key, IEnumerable<TFirst> list) Parameters Type Name Description TSecond key The key. IEnumerable<TFirst> list The list. | Edit this page View Source Add(TSecond, params TFirst[]) Adds the specified data to the mapping Declaration public void Add(TSecond key, params TFirst[] list) Parameters Type Name Description TSecond key The key. TFirst[] list The list. | Edit this page View Source Clear() Clears this instance. Declaration public void Clear() | Edit this page View Source Remove(TFirst) Removes the specified key. Declaration public bool Remove(TFirst key) Parameters Type Name Description TFirst key The key. Returns Type Description bool True if it is removed, false otherwise | Edit this page View Source Remove(TSecond) Removes the specified key. Declaration public bool Remove(TSecond key) Parameters Type Name Description TSecond key The key. Returns Type Description bool True if it is removed, false otherwise | Edit this page View Source TryGetValue(TFirst, out IEnumerable<TSecond>) Tries to get the value. Declaration public bool TryGetValue(TFirst key, out IEnumerable<TSecond> values) Parameters Type Name Description TFirst key The key. IEnumerable<TSecond> values The values. Returns Type Description bool True if it is returned, false otherwise. | Edit this page View Source TryGetValue(TSecond, out IEnumerable<TFirst>) Tries to get the value. Declaration public bool TryGetValue(TSecond key, out IEnumerable<TFirst> values) Parameters Type Name Description TSecond key The key. IEnumerable<TFirst> values The values. Returns Type Description bool True if it is returned, false otherwise."
  },
  "api/BigBook.Matrix.html": {
    "href": "api/BigBook.Matrix.html",
    "title": "Class Matrix | Big Book of DataTypes API Reference",
    "keywords": "Class Matrix Matrix used in linear algebra Inheritance object Matrix Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: BigBook Assembly: BigBook.dll Syntax public class Matrix Constructors | Edit this page View Source Matrix(int, int, double[,]?) Constructor Declaration public Matrix(int width, int height, double[,]? values = null) Parameters Type Name Description int width Width of the matrix int height Height of the matrix double[,] values Values to use in the matrix Properties | Edit this page View Source Height Height of the matrix Declaration public int Height { get; } Property Value Type Description int | Edit this page View Source this[int, int] Sets the values of the matrix Declaration public double this[int x, int y] { get; set; } Parameters Type Name Description int x X position int y Y position Property Value Type Description double the value at a point in the matrix | Edit this page View Source Values Values for the matrix Declaration public double[,] Values { get; } Property Value Type Description double[,] | Edit this page View Source Width Width of the matrix Declaration public int Width { get; } Property Value Type Description int Methods | Edit this page View Source Add(Matrix, Matrix) Adds the specified values. Declaration public static Matrix Add(Matrix left, Matrix right) Parameters Type Name Description Matrix left The left. Matrix right The right. Returns Type Description Matrix The results | Edit this page View Source Determinant() Gets the determinant of a square matrix Declaration public double Determinant() Returns Type Description double The determinant of a square matrix | Edit this page View Source Divide(Matrix, double) Divides the specified values. Declaration public static Matrix Divide(Matrix left, double right) Parameters Type Name Description Matrix left The left. double right The right. Returns Type Description Matrix The result | Edit this page View Source Equals(object) Determines if the objects are equal Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Object to check Returns Type Description bool True if they are, false otherwise Overrides object.Equals(object) | Edit this page View Source GetHashCode() Gets the hash code for the object Declaration public override int GetHashCode() Returns Type Description int The hash code for the object Overrides object.GetHashCode() | Edit this page View Source Multiply(Matrix, Matrix) Multiplies the specified values. Declaration public static Matrix Multiply(Matrix left, Matrix right) Parameters Type Name Description Matrix left The left. Matrix right The right. Returns Type Description Matrix The results | Edit this page View Source Negate(Matrix) Negates the specified item. Declaration public static Matrix Negate(Matrix item) Parameters Type Name Description Matrix item The item. Returns Type Description Matrix The result | Edit this page View Source Subtract(Matrix, Matrix) Subtracts the specified values. Declaration public static Matrix Subtract(Matrix left, Matrix right) Parameters Type Name Description Matrix left The left. Matrix right The right. Returns Type Description Matrix The results | Edit this page View Source ToString() Gets the string representation of the matrix Declaration public override string ToString() Returns Type Description string The matrix as a string Overrides object.ToString() | Edit this page View Source Transpose() Transposes the matrix Declaration public Matrix Transpose() Returns Type Description Matrix Returns a new transposed matrix Operators | Edit this page View Source operator +(Matrix, Matrix) Adds two matrices Declaration public static Matrix operator +(Matrix m1, Matrix m2) Parameters Type Name Description Matrix m1 Matrix 1 Matrix m2 Matrix 2 Returns Type Description Matrix The result | Edit this page View Source operator /(Matrix, double) Divides a matrix by a value Declaration public static Matrix operator /(Matrix m1, double d) Parameters Type Name Description Matrix m1 Matrix 1 double d Value to divide by Returns Type Description Matrix The result | Edit this page View Source operator /(double, Matrix) Divides a matrix by a value Declaration public static Matrix operator /(double d, Matrix m1) Parameters Type Name Description double d Value to divide by Matrix m1 Matrix 1 Returns Type Description Matrix The result | Edit this page View Source operator ==(Matrix?, Matrix?) Determines if two matrices are equal Declaration public static bool operator ==(Matrix? m1, Matrix? m2) Parameters Type Name Description Matrix m1 Matrix 1 Matrix m2 Matrix 2 Returns Type Description bool True if they are equal, false otherwise | Edit this page View Source operator !=(Matrix?, Matrix?) Determines if two matrices are unequal Declaration public static bool operator !=(Matrix? m1, Matrix? m2) Parameters Type Name Description Matrix m1 Matrix 1 Matrix m2 Matrix 2 Returns Type Description bool True if they are not equal, false otherwise | Edit this page View Source operator *(Matrix, Matrix) Multiplies two matrices Declaration public static Matrix operator *(Matrix m1, Matrix m2) Parameters Type Name Description Matrix m1 Matrix 1 Matrix m2 Matrix 2 Returns Type Description Matrix The result | Edit this page View Source operator *(Matrix, double) Multiplies a matrix by a value Declaration public static Matrix operator *(Matrix m1, double d) Parameters Type Name Description Matrix m1 Matrix 1 double d Value to multiply by Returns Type Description Matrix The result | Edit this page View Source operator *(double, Matrix) Multiplies a matrix by a value Declaration public static Matrix operator *(double d, Matrix m1) Parameters Type Name Description double d Value to multiply by Matrix m1 Matrix 1 Returns Type Description Matrix The result | Edit this page View Source operator -(Matrix, Matrix) Subtracts two matrices Declaration public static Matrix operator -(Matrix m1, Matrix m2) Parameters Type Name Description Matrix m1 Matrix 1 Matrix m2 Matrix 2 Returns Type Description Matrix The result | Edit this page View Source operator -(Matrix) Negates a matrix Declaration public static Matrix operator -(Matrix m1) Parameters Type Name Description Matrix m1 Matrix 1 Returns Type Description Matrix The result"
  },
  "api/BigBook.MinificationType.html": {
    "href": "api/BigBook.MinificationType.html",
    "title": "Enum MinificationType | Big Book of DataTypes API Reference",
    "keywords": "Enum MinificationType Minification type Namespace: BigBook Assembly: BigBook.dll Syntax public enum MinificationType Fields Name Description CSS The CSS HTML The HTML JavaScript The java script"
  },
  "api/BigBook.ObservableList-1.html": {
    "href": "api/BigBook.ObservableList-1.html",
    "title": "Class ObservableList<T> | Big Book of DataTypes API Reference",
    "keywords": "Class ObservableList<T> Observable List class Inheritance object ObservableList<T> Implements IList<T> ICollection<T> IEnumerable<T> INotifyCollectionChanged INotifyPropertyChanged IList ICollection IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook Assembly: BigBook.dll Syntax public class ObservableList<T> : IList<T>, ICollection<T>, IEnumerable<T>, INotifyCollectionChanged, INotifyPropertyChanged, IList, ICollection, IEnumerable Type Parameters Name Description T Object type that the list holds Constructors | Edit this page View Source ObservableList() Initializes a virtual instance of the ObservableList<T> class. Declaration public ObservableList() | Edit this page View Source ObservableList(IEnumerable<T>) Initializes a virtual instance of the ObservableList<T> class. Declaration public ObservableList(IEnumerable<T> collection) Parameters Type Name Description IEnumerable<T> collection The collection. | Edit this page View Source ObservableList(int) Initializes a virtual instance of the ObservableList<T> class. Declaration public ObservableList(int capacity) Parameters Type Name Description int capacity The number of elements that the virtual list can initially store. Properties | Edit this page View Source Count Gets the number of elements contained in the ICollection<T>. Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source IsFixedSize Gets a value indicating whether the IList has a fixed size. Declaration public bool IsFixedSize { get; } Property Value Type Description bool | Edit this page View Source IsReadOnly Gets a value indicating whether the collection is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description bool | Edit this page View Source IsSynchronized Gets a value indicating whether access to the ICollection is synchronized (thread safe). Declaration public bool IsSynchronized { get; } Property Value Type Description bool | Edit this page View Source this[int] Gets or sets the element at the specified index. Declaration public T this[int index] { get; set; } Parameters Type Name Description int index The index. Property Value Type Description T | Edit this page View Source SyncRoot Gets an object that can be used to synchronize access to the ICollection. Declaration public object? SyncRoot { get; } Property Value Type Description object Methods | Edit this page View Source Add(object) Adds an item to the IList. Declaration public int Add(object value) Parameters Type Name Description object value The object to add to the IList. Returns Type Description int The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection. | Edit this page View Source Add(T) Adds an object to the end of the List<T>. Declaration public virtual void Add(T item) Parameters Type Name Description T item The object to be added to the end of the list. The value can be null for reference types. | Edit this page View Source AddRange(IEnumerable<T>) Adds the range. Declaration public virtual void AddRange(IEnumerable<T> collection) Parameters Type Name Description IEnumerable<T> collection The collection. | Edit this page View Source Clear() Removes all elements from the List<T>. Declaration public virtual void Clear() | Edit this page View Source ClearDelegates() Clears the delegates from the list. Declaration public void ClearDelegates() | Edit this page View Source Contains(object) Determines whether the IList contains a specific value. Declaration public bool Contains(object value) Parameters Type Name Description object value The object to locate in the IList. Returns Type Description bool true if the object is found in the IList; otherwise, false. | Edit this page View Source Contains(T) Determines whether the ICollection<T> contains a specific value. Declaration public bool Contains(T item) Parameters Type Name Description T item The object to locate in the ICollection<T>. Returns Type Description bool true if item is found in the collection; otherwise, false. | Edit this page View Source CopyTo(Array, int) Copies the elements of the ICollection to an Array, starting at a particular Array index. Declaration public void CopyTo(Array array, int index) Parameters Type Name Description Array array The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing. int index The zero-based index in array at which copying begins. | Edit this page View Source CopyTo(T[], int) Copies to. Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array The array. int arrayIndex Index of the array. | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator<T> A IEnumerator<T> that can be used to iterate through the collection. | Edit this page View Source IndexOf(object) Determines the index of a specific item in the IList. Declaration public int IndexOf(object value) Parameters Type Name Description object value The object to locate in the IList. Returns Type Description int The index of value if found in the list; otherwise, -1. | Edit this page View Source IndexOf(T) Determines the index of a specific item in the IList<T>. Declaration public int IndexOf(T item) Parameters Type Name Description T item The object to locate in the IList<T>. Returns Type Description int The index of item if found in the list; otherwise, -1. | Edit this page View Source Insert(int, object) Inserts an item to the IList at the specified index. Declaration public void Insert(int index, object value) Parameters Type Name Description int index The zero-based index at which value should be inserted. object value The object to insert into the IList. | Edit this page View Source Insert(int, T) Inserts an element into the List<T> at the specified index. Declaration public virtual void Insert(int index, T item) Parameters Type Name Description int index The zero-based index at which item should be inserted. T item The object to insert. The value can be null for reference types. | Edit this page View Source InsertRange(int, IEnumerable<T>) Inserts the range. Declaration public virtual void InsertRange(int index, IEnumerable<T> collection) Parameters Type Name Description int index The index. IEnumerable<T> collection The collection. | Edit this page View Source NotifyCollectionChanged(NotifyCollectionChangedEventArgs) Notifies the collection changed. Declaration protected void NotifyCollectionChanged(NotifyCollectionChangedEventArgs args) Parameters Type Name Description NotifyCollectionChangedEventArgs args The NotifyCollectionChangedEventArgs instance containing the event data. | Edit this page View Source NotifyObjectChanged(object) Notifies the list that an item in the list has been modified. Declaration public void NotifyObjectChanged(object itemChanged) Parameters Type Name Description object itemChanged The item that was changed. | Edit this page View Source NotifyPropertyChanged(string) Notifies the property changed. Declaration protected void NotifyPropertyChanged(string propertyName = \"\") Parameters Type Name Description string propertyName Name of the property. | Edit this page View Source Remove(object) Removes the first occurrence of a specific object from the IList. Declaration public void Remove(object value) Parameters Type Name Description object value The object to remove from the IList. | Edit this page View Source Remove(T) Removes the first occurrence of a specific object from the List<T>. Declaration public virtual bool Remove(T item) Parameters Type Name Description T item The object to remove from the List<T>. The value can be null for reference types. Returns Type Description bool true if item is successfully removed; otherwise, false. This method also returns false if item was not found in the List<T>. | Edit this page View Source RemoveAll(Predicate<T>) Removes all. Declaration public virtual int RemoveAll(Predicate<T> match) Parameters Type Name Description Predicate<T> match The match. Returns Type Description int | Edit this page View Source RemoveAt(int) Removes the element at the specified index of the List<T>. Declaration public virtual void RemoveAt(int index) Parameters Type Name Description int index The zero-based index of the element to remove. | Edit this page View Source RemoveRange(int, int) Removes a range of elements from the List<T>. Declaration public virtual void RemoveRange(int index, int count) Parameters Type Name Description int index The zero-based starting index of the range of elements to remove. int count The number of elements to remove. Events | Edit this page View Source CollectionChanged Occurs when the collection changes. Declaration public event NotifyCollectionChangedEventHandler CollectionChanged Event Type Type Description NotifyCollectionChangedEventHandler | Edit this page View Source PropertyChanged Occurs when a property value changes. Declaration public event PropertyChangedEventHandler PropertyChanged Event Type Type Description PropertyChangedEventHandler Implements IList<T> ICollection<T> IEnumerable<T> INotifyCollectionChanged INotifyPropertyChanged IList ICollection IEnumerable"
  },
  "api/BigBook.Patterns.BaseClasses.SafeDisposableBaseClass.html": {
    "href": "api/BigBook.Patterns.BaseClasses.SafeDisposableBaseClass.html",
    "title": "Class SafeDisposableBaseClass | Big Book of DataTypes API Reference",
    "keywords": "Class SafeDisposableBaseClass Base class used for disposable objects Inheritance object SafeDisposableBaseClass Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook.Patterns.BaseClasses Assembly: BigBook.dll Syntax public abstract class SafeDisposableBaseClass : IDisposable Constructors | Edit this page View Source SafeDisposableBaseClass() Construct Declaration protected SafeDisposableBaseClass() Methods | Edit this page View Source Dispose() Dispose function Declaration public void Dispose() | Edit this page View Source Dispose(bool) Function to override in order to dispose objects Declaration protected abstract void Dispose(bool Managed) Parameters Type Name Description bool Managed If true, managed and unmanaged objects should be disposed. Otherwise unmanaged objects only. | Edit this page View Source ~SafeDisposableBaseClass() Destructor Declaration protected ~SafeDisposableBaseClass() Implements IDisposable"
  },
  "api/BigBook.Patterns.BaseClasses.Singleton-1.html": {
    "href": "api/BigBook.Patterns.BaseClasses.Singleton-1.html",
    "title": "Class Singleton<T> | Big Book of DataTypes API Reference",
    "keywords": "Class Singleton<T> Base class used for singletons Inheritance object Singleton<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook.Patterns.BaseClasses Assembly: BigBook.dll Syntax public abstract class Singleton<T> where T : class Type Parameters Name Description T The class type Constructors | Edit this page View Source Singleton() Constructor Declaration protected Singleton() Properties | Edit this page View Source Instance Gets the instance of the singleton Declaration public static T Instance { get; } Property Value Type Description T"
  },
  "api/BigBook.Patterns.BaseClasses.StringEnumBaseClass-1.html": {
    "href": "api/BigBook.Patterns.BaseClasses.StringEnumBaseClass-1.html",
    "title": "Class StringEnumBaseClass<TClass> | Big Book of DataTypes API Reference",
    "keywords": "Class StringEnumBaseClass<TClass> String enum base class Inheritance object StringEnumBaseClass<TClass> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: BigBook.Patterns.BaseClasses Assembly: BigBook.dll Syntax public abstract class StringEnumBaseClass<TClass> where TClass : StringEnumBaseClass<TClass>, new() Type Parameters Name Description TClass The type of the class. Constructors | Edit this page View Source StringEnumBaseClass(string) Initializes a new instance of the StringEnumBaseClass<TClass> class. Declaration protected StringEnumBaseClass(string name) Parameters Type Name Description string name The name. Properties | Edit this page View Source Name Gets or sets the name. Declaration protected string Name { get; set; } Property Value Type Description string The name. Methods | Edit this page View Source ToString() Returns a string that represents this instance. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides object.ToString() | Edit this page View Source ToStringEnumBaseClass(string) Converts to the enum from a string. Declaration public static StringEnumBaseClass<TClass> ToStringEnumBaseClass(string enumType) Parameters Type Name Description string enumType Type of the enum. Returns Type Description StringEnumBaseClass<TClass> The enum value Operators | Edit this page View Source implicit operator string(StringEnumBaseClass<TClass>?) Performs an implicit conversion from StringEnumBaseClass<TClass> to string. Declaration public static implicit operator string(StringEnumBaseClass<TClass>? enumType) Parameters Type Name Description StringEnumBaseClass<TClass> enumType Type of the enum. Returns Type Description string The result of the conversion. | Edit this page View Source implicit operator StringEnumBaseClass<TClass>(string?) Performs an implicit conversion from string to StringEnumBaseClass<TClass>. Declaration public static implicit operator StringEnumBaseClass<TClass>(string? enumType) Parameters Type Name Description string enumType Type of the enum. Returns Type Description StringEnumBaseClass<TClass> The result of the conversion."
  },
  "api/BigBook.Patterns.BaseClasses.html": {
    "href": "api/BigBook.Patterns.BaseClasses.html",
    "title": "Namespace BigBook.Patterns.BaseClasses | Big Book of DataTypes API Reference",
    "keywords": "Namespace BigBook.Patterns.BaseClasses Classes SafeDisposableBaseClass Base class used for disposable objects Singleton<T> Base class used for singletons StringEnumBaseClass<TClass> String enum base class"
  },
  "api/BigBook.Patterns.Factory-2.html": {
    "href": "api/BigBook.Patterns.Factory-2.html",
    "title": "Class Factory<TKey, TClass> | Big Book of DataTypes API Reference",
    "keywords": "Class Factory<TKey, TClass> Factory class Inheritance object Factory<TKey, TClass> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook.Patterns Assembly: BigBook.dll Syntax public class Factory<TKey, TClass> Type Parameters Name Description TKey The \"message\" type TClass The class type that you want created Constructors | Edit this page View Source Factory() Constructor Declaration public Factory() Properties | Edit this page View Source Constructors List of constructors/initializers Declaration protected Dictionary<TKey, Func<TClass>> Constructors { get; } Property Value Type Description Dictionary<TKey, Func<TClass>> Methods | Edit this page View Source Create(TKey) Creates an instance associated with the key Declaration public TClass Create(TKey key) Parameters Type Name Description TKey key Registered item Returns Type Description TClass The type returned by the initializer | Edit this page View Source Exists(TKey) Determines if a key has been registered Declaration public bool Exists(TKey key) Parameters Type Name Description TKey key Key to check Returns Type Description bool True if it exists, false otherwise | Edit this page View Source Register(TKey, Func<TClass>) Registers an item Declaration public Factory<TKey, TClass> Register(TKey key, Func<TClass> constructor) Parameters Type Name Description TKey key Item to register Func<TClass> constructor The function to call when creating the item Returns Type Description Factory<TKey, TClass> This | Edit this page View Source Register(TKey, TClass) Registers an item Declaration public Factory<TKey, TClass> Register(TKey key, TClass result) Parameters Type Name Description TKey key Item to register TClass result The object to be returned Returns Type Description Factory<TKey, TClass> This"
  },
  "api/BigBook.Patterns.IFluentInterface.html": {
    "href": "api/BigBook.Patterns.IFluentInterface.html",
    "title": "Interface IFluentInterface | Big Book of DataTypes API Reference",
    "keywords": "Interface IFluentInterface Helps in fluent interface design to hide ToString, Equals, and GetHashCode Namespace: BigBook.Patterns Assembly: BigBook.dll Syntax public interface IFluentInterface"
  },
  "api/BigBook.Patterns.html": {
    "href": "api/BigBook.Patterns.html",
    "title": "Namespace BigBook.Patterns | Big Book of DataTypes API Reference",
    "keywords": "Namespace BigBook.Patterns Classes Factory<TKey, TClass> Factory class Interfaces IFluentInterface Helps in fluent interface design to hide ToString, Equals, and GetHashCode"
  },
  "api/BigBook.PriorityQueue-1.html": {
    "href": "api/BigBook.PriorityQueue-1.html",
    "title": "Class PriorityQueue<T> | Big Book of DataTypes API Reference",
    "keywords": "Class PriorityQueue<T> Helper class that implements a priority queue Inheritance object PriorityQueue<T> Implements IDictionary<int, ICollection<T>> ICollection<KeyValuePair<int, ICollection<T>>> IEnumerable<KeyValuePair<int, ICollection<T>>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook Assembly: BigBook.dll Syntax public class PriorityQueue<T> : IDictionary<int, ICollection<T>>, ICollection<KeyValuePair<int, ICollection<T>>>, IEnumerable<KeyValuePair<int, ICollection<T>>>, IEnumerable Type Parameters Name Description T The type of the values placed in the queue Constructors | Edit this page View Source PriorityQueue() Constructor Declaration public PriorityQueue() Properties | Edit this page View Source Count The number of items in the listing Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source HighestKey Highest value key Declaration protected int HighestKey { get; set; } Property Value Type Description int | Edit this page View Source IsReadOnly Not read only Declaration public bool IsReadOnly { get; } Property Value Type Description bool | Edit this page View Source this[int] Gets a list of values associated with a key Declaration public ICollection<T> this[int key] { get; set; } Parameters Type Name Description int key Key to look for Property Value Type Description ICollection<T> The list of values | Edit this page View Source Items Container holding the data Declaration protected IDictionary<int, ICollection<T>> Items { get; } Property Value Type Description IDictionary<int, ICollection<T>> | Edit this page View Source Keys The list of keys within the mapping Declaration public ICollection<int> Keys { get; } Property Value Type Description ICollection<int> | Edit this page View Source Values List that contains the list of values Declaration public ICollection<ICollection<T>> Values { get; } Property Value Type Description ICollection<ICollection<T>> Methods | Edit this page View Source Add(KeyValuePair<int, ICollection<T>>) Adds a key value pair Declaration public void Add(KeyValuePair<int, ICollection<T>> item) Parameters Type Name Description KeyValuePair<int, ICollection<T>> item Key value pair to add | Edit this page View Source Add(int, ICollection<T>) Adds a list of items to the mapping Declaration public void Add(int key, ICollection<T> value) Parameters Type Name Description int key Key value ICollection<T> value The values to add | Edit this page View Source Add(int, T) Adds an item to the mapping Declaration public void Add(int key, T value) Parameters Type Name Description int key Key value T value The value to add | Edit this page View Source Clear() Clears all items from the listing Declaration public void Clear() | Edit this page View Source Contains(KeyValuePair<int, ICollection<T>>) Does this contain the key value pairs? Declaration public bool Contains(KeyValuePair<int, ICollection<T>> item) Parameters Type Name Description KeyValuePair<int, ICollection<T>> item Key value pair to check Returns Type Description bool True if it exists, false otherwise | Edit this page View Source Contains(int, ICollection<T>) Does the list mapping contain the key value pairs? Declaration public bool Contains(int key, ICollection<T> values) Parameters Type Name Description int key Key value ICollection<T> values Value Returns Type Description bool True if it exists, false otherwise | Edit this page View Source Contains(int, T) Does the list mapping contain the key value pair? Declaration public bool Contains(int key, T value) Parameters Type Name Description int key Key T value Value Returns Type Description bool True if it exists, false otherwise | Edit this page View Source ContainsKey(int) Determines if a key exists Declaration public bool ContainsKey(int key) Parameters Type Name Description int key Key to check on Returns Type Description bool True if it exists, false otherwise | Edit this page View Source CopyTo(KeyValuePair<int, ICollection<T>>[], int) Not implemented Declaration public void CopyTo(KeyValuePair<int, ICollection<T>>[] array, int arrayIndex) Parameters Type Name Description KeyValuePair<int, ICollection<T>>[] array Array to copy to int arrayIndex array index | Edit this page View Source GetEnumerator() Gets the enumerator Declaration public IEnumerator<KeyValuePair<int, ICollection<T>>> GetEnumerator() Returns Type Description IEnumerator<KeyValuePair<int, ICollection<T>>> The enumerator for this object | Edit this page View Source Peek() Peek at the next thing in the queue Declaration public T Peek() Returns Type Description T The next item in queue or default(T) if it is empty | Edit this page View Source Pop() Removes an item from the queue and returns it Declaration public T Pop() Returns Type Description T The next item in the queue | Edit this page View Source Remove(KeyValuePair<int, ICollection<T>>) Removes a key value pair from the list mapping Declaration public bool Remove(KeyValuePair<int, ICollection<T>> item) Parameters Type Name Description KeyValuePair<int, ICollection<T>> item items to remove Returns Type Description bool True if it is removed, false otherwise | Edit this page View Source Remove(int) Remove a list of items associated with a key Declaration public bool Remove(int key) Parameters Type Name Description int key Key to use Returns Type Description bool True if the key is found, false otherwise | Edit this page View Source Remove(int, T) Removes a key value pair from the list mapping Declaration public bool Remove(int key, T Value) Parameters Type Name Description int key Key to remove T Value Value to remove Returns Type Description bool True if it is removed, false otherwise | Edit this page View Source TryGetValue(int, out ICollection<T>) Tries to get the value associated with the key Declaration public bool TryGetValue(int key, out ICollection<T> value) Parameters Type Name Description int key Key value ICollection<T> value The values getting Returns Type Description bool True if it was able to get the value, false otherwise Implements IDictionary<TKey, TValue> ICollection<T> IEnumerable<T> IEnumerable"
  },
  "api/BigBook.Queryable.BaseClasses.QueryProviderBase.html": {
    "href": "api/BigBook.Queryable.BaseClasses.QueryProviderBase.html",
    "title": "Class QueryProviderBase | Big Book of DataTypes API Reference",
    "keywords": "Class QueryProviderBase Query provider base class Inheritance object QueryProviderBase Implements IQueryProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook.Queryable.BaseClasses Assembly: BigBook.dll Syntax public abstract class QueryProviderBase : IQueryProvider Constructors | Edit this page View Source QueryProviderBase() Initializes a new instance of the QueryProviderBase class. Declaration protected QueryProviderBase() See Also IQueryProvider Methods | Edit this page View Source CreateQuery(Expression) Constructs an IQueryable object that can evaluate the query represented by a specified expression tree. Declaration public IQueryable? CreateQuery(Expression expression) Parameters Type Name Description Expression expression An expression tree that represents a LINQ query. Returns Type Description IQueryable An IQueryable that can evaluate the query represented by the specified expression tree. See Also IQueryProvider | Edit this page View Source CreateQuery<TElement>(Expression) Constructs an IQueryable<T> object that can evaluate the query represented by a specified expression tree. Declaration public IQueryable<TElement> CreateQuery<TElement>(Expression expression) Parameters Type Name Description Expression expression An expression tree that represents a LINQ query. Returns Type Description IQueryable<TElement> An IQueryable<T> that can evaluate the query represented by the specified expression tree. Type Parameters Name Description TElement The type of the elements of the IQueryable<T> that is returned. See Also IQueryProvider | Edit this page View Source Execute(Expression) Executes the query represented by a specified expression tree. Declaration public abstract object? Execute(Expression expression) Parameters Type Name Description Expression expression An expression tree that represents a LINQ query. Returns Type Description object The value that results from executing the specified query. See Also IQueryProvider | Edit this page View Source Execute<TElement>(Expression) Executes the specified expression. Declaration public TElement Execute<TElement>(Expression expression) Parameters Type Name Description Expression expression The expression. Returns Type Description TElement The value that results from executing the specified query. Type Parameters Name Description TElement The type of the element. See Also IQueryProvider | Edit this page View Source GetQueryText(Expression) Gets the query text. Declaration public abstract string GetQueryText(Expression expression) Parameters Type Name Description Expression expression The expression. Returns Type Description string The query as a string See Also IQueryProvider Implements IQueryProvider See Also IQueryProvider"
  },
  "api/BigBook.Queryable.BaseClasses.html": {
    "href": "api/BigBook.Queryable.BaseClasses.html",
    "title": "Namespace BigBook.Queryable.BaseClasses | Big Book of DataTypes API Reference",
    "keywords": "Namespace BigBook.Queryable.BaseClasses Classes QueryProviderBase Query provider base class"
  },
  "api/BigBook.Queryable.Query-1.html": {
    "href": "api/BigBook.Queryable.Query-1.html",
    "title": "Class Query<T> | Big Book of DataTypes API Reference",
    "keywords": "Class Query<T> Reusable query class Inheritance object Query<T> Implements IOrderedQueryable<T> IQueryable<T> IEnumerable<T> IOrderedQueryable IQueryable IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: BigBook.Queryable Assembly: BigBook.dll Syntax public class Query<T> : IOrderedQueryable<T>, IQueryable<T>, IEnumerable<T>, IOrderedQueryable, IQueryable, IEnumerable Type Parameters Name Description T Element type Constructors | Edit this page View Source Query(QueryProviderBase) Initializes a new instance of the Query<T> class. Declaration public Query(QueryProviderBase provider) Parameters Type Name Description QueryProviderBase provider The provider. Exceptions Type Condition ArgumentNullException provider | Edit this page View Source Query(QueryProviderBase, Expression) Initializes a new instance of the Query<T> class. Declaration public Query(QueryProviderBase provider, Expression expression) Parameters Type Name Description QueryProviderBase provider The provider. Expression expression The expression. Exceptions Type Condition ArgumentNullException expression or provider ArgumentOutOfRangeException expression Properties | Edit this page View Source Expression Gets the expression tree that is associated with the instance of IQueryable. Declaration public Expression Expression { get; } Property Value Type Description Expression | Edit this page View Source Provider Gets the query provider that is associated with this data source. Declaration public IQueryProvider Provider { get; } Property Value Type Description IQueryProvider Methods | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator<T> An enumerator that can be used to iterate through the collection. | Edit this page View Source ToString() Returns a string that represents this instance. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides object.ToString() Implements IOrderedQueryable<T> IQueryable<T> IEnumerable<T> IOrderedQueryable IQueryable IEnumerable"
  },
  "api/BigBook.Queryable.html": {
    "href": "api/BigBook.Queryable.html",
    "title": "Namespace BigBook.Queryable | Big Book of DataTypes API Reference",
    "keywords": "Namespace BigBook.Queryable Classes Query<T> Reusable query class"
  },
  "api/BigBook.Reflection.TypeCacheFor-1.html": {
    "href": "api/BigBook.Reflection.TypeCacheFor-1.html",
    "title": "Class TypeCacheFor<T> | Big Book of DataTypes API Reference",
    "keywords": "Class TypeCacheFor<T> Type cache info Inheritance object TypeCacheFor<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook.Reflection Assembly: BigBook.dll Syntax public static class TypeCacheFor<T> Type Parameters Name Description T Type to cache. Fields | Edit this page View Source Constructors The constructors Declaration public static readonly ConstructorInfo[] Constructors Field Value Type Description ConstructorInfo[] | Edit this page View Source Fields The fields Declaration public static readonly FieldInfo[] Fields Field Value Type Description FieldInfo[] | Edit this page View Source Interfaces The interfaces Declaration public static readonly Type[] Interfaces Field Value Type Description Type[] | Edit this page View Source Methods The methods Declaration public static readonly MethodInfo[] Methods Field Value Type Description MethodInfo[] | Edit this page View Source Properties The properties Declaration public static readonly PropertyInfo[] Properties Field Value Type Description PropertyInfo[] | Edit this page View Source Type The type Declaration public static readonly Type Type Field Value Type Description Type"
  },
  "api/BigBook.Reflection.html": {
    "href": "api/BigBook.Reflection.html",
    "title": "Namespace BigBook.Reflection | Big Book of DataTypes API Reference",
    "keywords": "Namespace BigBook.Reflection Classes TypeCacheFor<T> Type cache info"
  },
  "api/BigBook.RingBuffer-1.html": {
    "href": "api/BigBook.RingBuffer-1.html",
    "title": "Class RingBuffer<T> | Big Book of DataTypes API Reference",
    "keywords": "Class RingBuffer<T> Implements a ring buffer Inheritance object RingBuffer<T> Implements ICollection<T> IEnumerable<T> ICollection IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: BigBook Assembly: BigBook.dll Syntax public class RingBuffer<T> : ICollection<T>, IEnumerable<T>, ICollection, IEnumerable Type Parameters Name Description T Type of the data it holds Constructors | Edit this page View Source RingBuffer() Constructor Declaration public RingBuffer() | Edit this page View Source RingBuffer(int, bool) Constructor Declaration public RingBuffer(int maxCapacity, bool allowOverflow = false) Parameters Type Name Description int maxCapacity Max capacity for the circular buffer bool allowOverflow Is overflow allowed (defaults to false) Properties | Edit this page View Source AllowOverflow Is overflow allowed? Declaration public bool AllowOverflow { get; protected set; } Property Value Type Description bool | Edit this page View Source Buffer Buffer that the circular buffer uses Declaration protected T[] Buffer { get; set; } Property Value Type Description T[] | Edit this page View Source Count Item count for the circular buffer Declaration public int Count { get; protected set; } Property Value Type Description int | Edit this page View Source IsReadOnly Is this read only? Declaration public bool IsReadOnly { get; protected set; } Property Value Type Description bool | Edit this page View Source IsSynchronized Is this synchronized? Declaration public bool IsSynchronized { get; protected set; } Property Value Type Description bool | Edit this page View Source this[int] Allows getting an item at a specific position in the buffer Declaration public T this[int position] { get; set; } Parameters Type Name Description int position Position to look at Property Value Type Description T The specified item | Edit this page View Source MaxCapacity Maximum capacity Declaration public int MaxCapacity { get; protected set; } Property Value Type Description int | Edit this page View Source ReadPosition Read position Declaration protected int ReadPosition { get; set; } Property Value Type Description int | Edit this page View Source SyncRoot Sync root Declaration public object SyncRoot { get; } Property Value Type Description object | Edit this page View Source WritePosition Write position Declaration protected int WritePosition { get; set; } Property Value Type Description int Methods | Edit this page View Source Add(IEnumerable<T>) Adds a number of items to the buffer Declaration public void Add(IEnumerable<T> items) Parameters Type Name Description IEnumerable<T> items Items to add | Edit this page View Source Add(T) Adds an item to the buffer Declaration public void Add(T item) Parameters Type Name Description T item Item to add | Edit this page View Source Add(T[], int, int) Adds a number of items to the buffer Declaration public void Add(T[] buffer, int offset, int count) Parameters Type Name Description T[] buffer Items to add int offset Offset to start at int count Number of items to add | Edit this page View Source Clear() Clears the buffer Declaration public void Clear() | Edit this page View Source Contains(T) Determines if the buffer contains the item Declaration public bool Contains(T item) Parameters Type Name Description T item Item to check Returns Type Description bool True if the item is present, false otherwise | Edit this page View Source CopyTo(Array, int) Copies the buffer to an array Declaration public void CopyTo(Array array, int index) Parameters Type Name Description Array array Array to copy to int index Array index to start at | Edit this page View Source CopyTo(T[], int) Copies the buffer to an array Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array Array to copy to int arrayIndex Array index to start at | Edit this page View Source GetEnumerator() Gets the enumerator for the buffer Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator<T> The enumerator | Edit this page View Source Remove() Reads the next item from the buffer Declaration public T Remove() Returns Type Description T The next item from the buffer | Edit this page View Source Remove(int) Reads the next X number of items from the buffer Declaration public IEnumerable<T> Remove(int amount) Parameters Type Name Description int amount Number of items to return Returns Type Description IEnumerable<T> The next X items from the buffer | Edit this page View Source Remove(T) Removes an item from the buffer Declaration public bool Remove(T item) Parameters Type Name Description T item Item to remove Returns Type Description bool True if it is removed, false otherwise | Edit this page View Source Remove(T[], int, int) Reads the next X number of items and places them in the array passed in Declaration public int Remove(T[] array, int offset, int count) Parameters Type Name Description T[] array Array to copy to int offset Offset to start at int count Number of items to read Returns Type Description int The number of items that were read | Edit this page View Source Skip(int) Skips ahead in the buffer Declaration public void Skip(int count) Parameters Type Name Description int count Number of items in the buffer to skip | Edit this page View Source ToString() Returns the buffer as a string Declaration public override string ToString() Returns Type Description string The buffer as a string Overrides object.ToString() Operators | Edit this page View Source implicit operator string(RingBuffer<T>) Converts the object to a string Declaration public static implicit operator string(RingBuffer<T> value) Parameters Type Name Description RingBuffer<T> value Value to convert Returns Type Description string The value as a string Implements ICollection<T> IEnumerable<T> ICollection IEnumerable"
  },
  "api/BigBook.Row.html": {
    "href": "api/BigBook.Row.html",
    "title": "Class Row | Big Book of DataTypes API Reference",
    "keywords": "Class Row Holds an individual row Inheritance object Row Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook Assembly: BigBook.dll Syntax public class Row Constructors | Edit this page View Source Row(Hashtable, string[], params object[]) Constructor Declaration public Row(Hashtable columnNameHash, string[] columnNames, params object[] columnValues) Parameters Type Name Description Hashtable columnNameHash Column name hash string[] columnNames Column names object[] columnValues Column values Properties | Edit this page View Source ColumnNameHash Column names Declaration public Hashtable ColumnNameHash { get; } Property Value Type Description Hashtable | Edit this page View Source ColumnNames Column names Declaration public string[] ColumnNames { get; protected set; } Property Value Type Description string[] | Edit this page View Source ColumnValues Column values Declaration public object[] ColumnValues { get; protected set; } Property Value Type Description object[] | Edit this page View Source this[int] Returns a column based on the value specified Declaration public object? this[int column] { get; } Parameters Type Name Description int column Column number Property Value Type Description object The value specified | Edit this page View Source this[string] Returns a column based on the column name specified Declaration public object? this[string columnName] { get; } Parameters Type Name Description string columnName Column name to search for Property Value Type Description object The value specified"
  },
  "api/BigBook.Set-1.html": {
    "href": "api/BigBook.Set-1.html",
    "title": "Class Set<T> | Big Book of DataTypes API Reference",
    "keywords": "Class Set<T> Class to be used for sets of data Inheritance object List<T> Set<T> Implements IList<T> ICollection<T> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IList ICollection IEnumerable Inherited Members List<T>.Add(T) List<T>.AddRange(IEnumerable<T>) List<T>.AsReadOnly() List<T>.BinarySearch(int, int, T, IComparer<T>) List<T>.BinarySearch(T) List<T>.BinarySearch(T, IComparer<T>) List<T>.Clear() List<T>.Contains(T) List<T>.ConvertAll<TOutput>(Converter<T, TOutput>) List<T>.CopyTo(int, T[], int, int) List<T>.CopyTo(T[]) List<T>.CopyTo(T[], int) List<T>.EnsureCapacity(int) List<T>.Exists(Predicate<T>) List<T>.Find(Predicate<T>) List<T>.FindAll(Predicate<T>) List<T>.FindIndex(int, int, Predicate<T>) List<T>.FindIndex(int, Predicate<T>) List<T>.FindIndex(Predicate<T>) List<T>.FindLast(Predicate<T>) List<T>.FindLastIndex(int, int, Predicate<T>) List<T>.FindLastIndex(int, Predicate<T>) List<T>.FindLastIndex(Predicate<T>) List<T>.ForEach(Action<T>) List<T>.GetEnumerator() List<T>.GetRange(int, int) List<T>.IndexOf(T) List<T>.IndexOf(T, int) List<T>.IndexOf(T, int, int) List<T>.Insert(int, T) List<T>.InsertRange(int, IEnumerable<T>) List<T>.LastIndexOf(T) List<T>.LastIndexOf(T, int) List<T>.LastIndexOf(T, int, int) List<T>.Remove(T) List<T>.RemoveAll(Predicate<T>) List<T>.RemoveAt(int) List<T>.RemoveRange(int, int) List<T>.Reverse() List<T>.Reverse(int, int) List<T>.Sort() List<T>.Sort(IComparer<T>) List<T>.Sort(Comparison<T>) List<T>.Sort(int, int, IComparer<T>) List<T>.ToArray() List<T>.TrimExcess() List<T>.TrueForAll(Predicate<T>) List<T>.Capacity List<T>.Count List<T>.this[int] object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: BigBook Assembly: BigBook.dll Syntax public class Set<T> : List<T>, IList<T>, ICollection<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IList, ICollection, IEnumerable Type Parameters Name Description T Type that the set holds Constructors | Edit this page View Source Set() Initializes a new instance of the Set<T> class. Declaration public Set() | Edit this page View Source Set(int) Constructor Declaration public Set(int initialSize) Parameters Type Name Description int initialSize Initial size Methods | Edit this page View Source Add(Set<T>, Set<T>) Adds the specified values. Declaration public static Set<T> Add(Set<T> left, Set<T> right) Parameters Type Name Description Set<T> left The left. Set<T> right The right. Returns Type Description Set<T> The result | Edit this page View Source Contains(Set<T>) Used to tell if this set contains the other Declaration public bool Contains(Set<T> set) Parameters Type Name Description Set<T> set Set to check against Returns Type Description bool True if it is, false otherwise | Edit this page View Source Equals(object) Determines if the two sets are equivalent Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare to Returns Type Description bool True if they are, false otherwise Overrides object.Equals(object) | Edit this page View Source GetHashCode() Returns the hash code for the object Declaration public override int GetHashCode() Returns Type Description int The hash code for the object Overrides object.GetHashCode() | Edit this page View Source GetIntersection(Set<T>, Set<T>) Gets the intersection of set 1 and set 2 Declaration public static Set<T>? GetIntersection(Set<T> set1, Set<T> set2) Parameters Type Name Description Set<T> set1 Set 1 Set<T> set2 Set 2 Returns Type Description Set<T> The intersection of the two sets | Edit this page View Source Intersect(Set<T>) Determines if the sets intersect Declaration public bool Intersect(Set<T> set) Parameters Type Name Description Set<T> set Set to check against Returns Type Description bool True if they do, false otherwise | Edit this page View Source IsSubset(Set<T>) Used to tell if this is a subset of the other Declaration public bool IsSubset(Set<T> set) Parameters Type Name Description Set<T> set Set to check against Returns Type Description bool True if it is, false otherwise | Edit this page View Source Subtract(Set<T>, Set<T>) Subtracts the specified values. Declaration public static Set<T> Subtract(Set<T> left, Set<T> right) Parameters Type Name Description Set<T> left The left. Set<T> right The right. Returns Type Description Set<T> The result. | Edit this page View Source ToString() Returns the set as a string Declaration public override string ToString() Returns Type Description string The set as a string Overrides object.ToString() Operators | Edit this page View Source operator +(Set<T>, Set<T>) Adds two sets together Declaration public static Set<T> operator +(Set<T> set1, Set<T> set2) Parameters Type Name Description Set<T> set1 Set 1 Set<T> set2 Set 2 Returns Type Description Set<T> The joined sets | Edit this page View Source operator ==(Set<T>?, Set<T>?) Determines if the two sets are equivalent Declaration public static bool operator ==(Set<T>? set1, Set<T>? set2) Parameters Type Name Description Set<T> set1 Set 1 Set<T> set2 Set 2 Returns Type Description bool True if they are, false otherwise | Edit this page View Source operator !=(Set<T>, Set<T>) Determines if the two sets are not equivalent Declaration public static bool operator !=(Set<T> set1, Set<T> set2) Parameters Type Name Description Set<T> set1 Set 1 Set<T> set2 Set 2 Returns Type Description bool False if they are, true otherwise | Edit this page View Source operator -(Set<T>, Set<T>) Removes items from set 2 from set 1 Declaration public static Set<T> operator -(Set<T> set1, Set<T> set2) Parameters Type Name Description Set<T> set1 Set 1 Set<T> set2 Set 2 Returns Type Description Set<T> The resulting set Implements IList<T> ICollection<T> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IList ICollection IEnumerable"
  },
  "api/BigBook.StringCase.html": {
    "href": "api/BigBook.StringCase.html",
    "title": "Enum StringCase | Big Book of DataTypes API Reference",
    "keywords": "Enum StringCase What sort of string capitalization should be used? Namespace: BigBook Assembly: BigBook.dll Syntax public enum StringCase Fields Name Description CamelCase Camel case FirstCharacterUpperCase First character upper case SentenceCapitalize Sentence capitalization TitleCase Title case"
  },
  "api/BigBook.StringCompare.html": {
    "href": "api/BigBook.StringCompare.html",
    "title": "Enum StringCompare | Big Book of DataTypes API Reference",
    "keywords": "Enum StringCompare What type of string comparison are we doing? Namespace: BigBook Assembly: BigBook.dll Syntax public enum StringCompare Fields Name Description Anagram Is this an anagram? CreditCard Is this a credit card number? Unicode Is this Unicode"
  },
  "api/BigBook.StringFilter.html": {
    "href": "api/BigBook.StringFilter.html",
    "title": "Enum StringFilter | Big Book of DataTypes API Reference",
    "keywords": "Enum StringFilter Predefined filters Namespace: BigBook Assembly: BigBook.dll Syntax [Flags] public enum StringFilter Fields Name Description Alpha Alpha characters ExtraSpaces Multiple spaces FloatNumeric Numbers with period, basically allows for decimal point None The none Numeric Numeric characters"
  },
  "api/BigBook.StringTrie.html": {
    "href": "api/BigBook.StringTrie.html",
    "title": "Class StringTrie | Big Book of DataTypes API Reference",
    "keywords": "Class StringTrie Special case Inheritance object Trie<char, string> StringTrie Inherited Members Trie<char, string>.Add(IEnumerable<char>, string) Trie<char, string>.Build() Trie<char, string>.FindAll(char[]) Trie<char, string>.FindAll(List<char>) Trie<char, string>.FindAll(Span<char>) Trie<char, string>.FindAll(ReadOnlySpan<char>) Trie<char, string>.FindAny(Span<char>) Trie<char, string>.FindAny(ReadOnlySpan<char>) Trie<char, string>.FindAny(List<char>) Trie<char, string>.FindAny(char[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook Assembly: BigBook.dll Syntax public class StringTrie : Trie<char, string> Methods | Edit this page View Source Add(params string[]) Adds the specified values. Declaration public StringTrie Add(params string[] values) Parameters Type Name Description string[] values The values. Returns Type Description StringTrie See Also Trie<TObject, TReturn> See Also Trie<TObject, TReturn>"
  },
  "api/BigBook.Table.html": {
    "href": "api/BigBook.Table.html",
    "title": "Class Table | Big Book of DataTypes API Reference",
    "keywords": "Class Table Holds tabular information Inheritance object Table Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook Assembly: BigBook.dll Syntax public class Table Constructors | Edit this page View Source Table(DbDataReader) Constructor Declaration public Table(DbDataReader reader) Parameters Type Name Description DbDataReader reader Data reader to get the data from | Edit this page View Source Table(params string[]) Constructor Declaration public Table(params string[] columnNames) Parameters Type Name Description string[] columnNames Column names Properties | Edit this page View Source ColumnNameHash Column Name hash table Declaration public Hashtable ColumnNameHash { get; } Property Value Type Description Hashtable | Edit this page View Source ColumnNames Column names for the table Declaration public string[] ColumnNames { get; protected set; } Property Value Type Description string[] | Edit this page View Source this[int] Gets a specific row Declaration public Row? this[int rowNumber] { get; } Parameters Type Name Description int rowNumber Row number Property Value Type Description Row The row specified | Edit this page View Source Rows Rows within the table Declaration public List<Row> Rows { get; } Property Value Type Description List<Row> Methods | Edit this page View Source AddRow(params object[]) Adds a row using the objects passed in Declaration public Table AddRow(params object[] objects) Parameters Type Name Description object[] objects Objects to create the row from Returns Type Description Table This"
  },
  "api/BigBook.TagDictionary-2.html": {
    "href": "api/BigBook.TagDictionary-2.html",
    "title": "Class TagDictionary<TKey, TValue> | Big Book of DataTypes API Reference",
    "keywords": "Class TagDictionary<TKey, TValue> Dictionary that matches multiple keys to each value Inheritance object TagDictionary<TKey, TValue> Implements IDictionary<TKey, IEnumerable<TValue>> ICollection<KeyValuePair<TKey, IEnumerable<TValue>>> IEnumerable<KeyValuePair<TKey, IEnumerable<TValue>>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook Assembly: BigBook.dll Syntax public class TagDictionary<TKey, TValue> : IDictionary<TKey, IEnumerable<TValue>>, ICollection<KeyValuePair<TKey, IEnumerable<TValue>>>, IEnumerable<KeyValuePair<TKey, IEnumerable<TValue>>>, IEnumerable Type Parameters Name Description TKey Key type TValue Value type Constructors | Edit this page View Source TagDictionary() Constructor Declaration public TagDictionary() Properties | Edit this page View Source Count Number of items in the dictionary Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source IsReadOnly Always false Declaration public bool IsReadOnly { get; } Property Value Type Description bool | Edit this page View Source this[TKey] Gets the values based on a key Declaration public IEnumerable<TValue> this[TKey key] { get; set; } Parameters Type Name Description TKey key Key to get the values of Property Value Type Description IEnumerable<TValue> The values associated with the key | Edit this page View Source Keys Gets the keys found in the dictionary Declaration public ICollection<TKey> Keys { get; } Property Value Type Description ICollection<TKey> | Edit this page View Source Values Gets the values found in the dictionary Declaration public ICollection<IEnumerable<TValue>> Values { get; } Property Value Type Description ICollection<IEnumerable<TValue>> Methods | Edit this page View Source Add(KeyValuePair<TKey, IEnumerable<TValue>>) Adds an item to the dictionary Declaration public void Add(KeyValuePair<TKey, IEnumerable<TValue>> item) Parameters Type Name Description KeyValuePair<TKey, IEnumerable<TValue>> item item to add | Edit this page View Source Add(TKey, IEnumerable<TValue>) Adds a list of values to the key Declaration public void Add(TKey key, IEnumerable<TValue> value) Parameters Type Name Description TKey key Key IEnumerable<TValue> value Values to add | Edit this page View Source Add(TValue, params TKey[]) Adds a value to the dicionary Declaration public void Add(TValue value, params TKey[] keys) Parameters Type Name Description TValue value Value to add TKey[] keys Keys to associate the value with | Edit this page View Source Clear() Clears the dictionary Declaration public void Clear() | Edit this page View Source Contains(KeyValuePair<TKey, IEnumerable<TValue>>) Determines if the dictionary contains the key/value pair Declaration public bool Contains(KeyValuePair<TKey, IEnumerable<TValue>> item) Parameters Type Name Description KeyValuePair<TKey, IEnumerable<TValue>> item item to check Returns Type Description bool True if it is, false otherwise | Edit this page View Source ContainsKey(TKey) Determines if a key is in the dictionary Declaration public bool ContainsKey(TKey key) Parameters Type Name Description TKey key Key to check Returns Type Description bool True if it exists, false otherwise | Edit this page View Source CopyTo(KeyValuePair<TKey, IEnumerable<TValue>>[], int) Copies itself to an array Declaration public void CopyTo(KeyValuePair<TKey, IEnumerable<TValue>>[] array, int arrayIndex) Parameters Type Name Description KeyValuePair<TKey, IEnumerable<TValue>>[] array Array int arrayIndex Array index | Edit this page View Source GetEnumerator() Gets the enumerator Declaration public IEnumerator<KeyValuePair<TKey, IEnumerable<TValue>>> GetEnumerator() Returns Type Description IEnumerator<KeyValuePair<TKey, IEnumerable<TValue>>> The enumerator | Edit this page View Source Remove(KeyValuePair<TKey, IEnumerable<TValue>>) Removes a specific key/value pair Declaration public bool Remove(KeyValuePair<TKey, IEnumerable<TValue>> item) Parameters Type Name Description KeyValuePair<TKey, IEnumerable<TValue>> item item to remove Returns Type Description bool True if it is removed, false otherwise | Edit this page View Source Remove(TKey) Removes all items that are associated with a key Declaration public bool Remove(TKey key) Parameters Type Name Description TKey key Key Returns Type Description bool Returns true if the key was found, false otherwise | Edit this page View Source TryGetValue(TKey, out IEnumerable<TValue>) Attempts to get the values associated with a key Declaration public bool TryGetValue(TKey key, out IEnumerable<TValue> value) Parameters Type Name Description TKey key Key IEnumerable<TValue> value Values associated with a key Returns Type Description bool True if something is returned, false otherwise Implements IDictionary<TKey, TValue> ICollection<T> IEnumerable<T> IEnumerable"
  },
  "api/BigBook.TaskQueue-1.html": {
    "href": "api/BigBook.TaskQueue-1.html",
    "title": "Class TaskQueue<T> | Big Book of DataTypes API Reference",
    "keywords": "Class TaskQueue<T> Class that helps with running tasks in parallel on a set of objects (that will come in on an ongoing basis, think producer/consumer situations) Inheritance object BlockingCollection<T> TaskQueue<T> Implements IReadOnlyCollection<T> IEnumerable<T> ICollection IEnumerable IDisposable Inherited Members BlockingCollection<T>.Add(T) BlockingCollection<T>.Add(T, CancellationToken) BlockingCollection<T>.AddToAny(BlockingCollection<T>[], T) BlockingCollection<T>.AddToAny(BlockingCollection<T>[], T, CancellationToken) BlockingCollection<T>.CompleteAdding() BlockingCollection<T>.CopyTo(T[], int) BlockingCollection<T>.Dispose() BlockingCollection<T>.GetConsumingEnumerable() BlockingCollection<T>.GetConsumingEnumerable(CancellationToken) BlockingCollection<T>.Take() BlockingCollection<T>.Take(CancellationToken) BlockingCollection<T>.TakeFromAny(BlockingCollection<T>[], out T) BlockingCollection<T>.TakeFromAny(BlockingCollection<T>[], out T, CancellationToken) BlockingCollection<T>.ToArray() BlockingCollection<T>.TryAdd(T) BlockingCollection<T>.TryAdd(T, int) BlockingCollection<T>.TryAdd(T, int, CancellationToken) BlockingCollection<T>.TryAdd(T, TimeSpan) BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[], T) BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[], T, int) BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[], T, int, CancellationToken) BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[], T, TimeSpan) BlockingCollection<T>.TryTake(out T) BlockingCollection<T>.TryTake(out T, int) BlockingCollection<T>.TryTake(out T, int, CancellationToken) BlockingCollection<T>.TryTake(out T, TimeSpan) BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[], out T) BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[], out T, int) BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[], out T, int, CancellationToken) BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[], out T, TimeSpan) BlockingCollection<T>.BoundedCapacity BlockingCollection<T>.Count BlockingCollection<T>.IsAddingCompleted BlockingCollection<T>.IsCompleted object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook Assembly: BigBook.dll Syntax public class TaskQueue<T> : BlockingCollection<T>, IReadOnlyCollection<T>, IEnumerable<T>, ICollection, IEnumerable, IDisposable Type Parameters Name Description T Object type to process Constructors | Edit this page View Source TaskQueue(int, Func<T, bool>, int, Action<Exception, T>?) Constructor Declaration public TaskQueue(int capacity, Func<T, bool> processItem, int timeOut = 100, Action<Exception, T>? handleError = null) Parameters Type Name Description int capacity Number of items that are allowed to be processed in the queue at one time Func<T, bool> processItem Action that is used to process each item int timeOut The time out to wait between items to process. Action<Exception, T> handleError Handles an exception if it occurs (defaults to eating the error) Properties | Edit this page View Source Capacity Gets the capacity. Declaration public int Capacity { get; } Property Value Type Description int The capacity. | Edit this page View Source IsCanceled Determines if it has been cancelled Declaration public bool IsCanceled { get; } Property Value Type Description bool | Edit this page View Source IsComplete Determines if it has completed all tasks Declaration public bool IsComplete { get; } Property Value Type Description bool | Edit this page View Source TimeOut Gets the time out. Declaration public int TimeOut { get; } Property Value Type Description int The time out. Methods | Edit this page View Source Cancel(bool) Cancels the queue from processing Declaration public bool Cancel(bool wait = false) Parameters Type Name Description bool wait Determines if the function should wait for the tasks to complete before returning Returns Type Description bool True if it is cancelled, false otherwise | Edit this page View Source Dispose(bool) Disposes of the objects Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing True to dispose of all resources, false only disposes of native resources Overrides BlockingCollection<T>.Dispose(bool) | Edit this page View Source Enqueue(T) Adds the item to the queue to be processed Declaration public bool Enqueue(T item) Parameters Type Name Description T item Item to process Returns Type Description bool True if it is enqueued, false otherwise Implements IReadOnlyCollection<T> IEnumerable<T> ICollection IEnumerable IDisposable"
  },
  "api/BigBook.TimeFrame.html": {
    "href": "api/BigBook.TimeFrame.html",
    "title": "Enum TimeFrame | Big Book of DataTypes API Reference",
    "keywords": "Enum TimeFrame Time frame Namespace: BigBook Assembly: BigBook.dll Syntax public enum TimeFrame Fields Name Description Day Day Month Month Quarter Quarter Week Week Year Year"
  },
  "api/BigBook.TreeNode-1.html": {
    "href": "api/BigBook.TreeNode-1.html",
    "title": "Class TreeNode<T> | Big Book of DataTypes API Reference",
    "keywords": "Class TreeNode<T> Node class for the Binary tree Inheritance object TreeNode<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: BigBook Assembly: BigBook.dll Syntax public class TreeNode<T> Type Parameters Name Description T The value type Constructors | Edit this page View Source TreeNode(T, TreeNode<T>?, TreeNode<T>?, TreeNode<T>?) Constructor Declaration public TreeNode(T value = default, TreeNode<T>? parent = null, TreeNode<T>? left = null, TreeNode<T>? right = null) Parameters Type Name Description T value Value of the node TreeNode<T> parent Parent node TreeNode<T> left Left node TreeNode<T> right Right node Properties | Edit this page View Source IsLeaf Is this a leaf Declaration public bool IsLeaf { get; } Property Value Type Description bool | Edit this page View Source IsRoot Is this the root Declaration public bool IsRoot { get; } Property Value Type Description bool | Edit this page View Source Left Left node Declaration public TreeNode<T>? Left { get; set; } Property Value Type Description TreeNode<T> | Edit this page View Source Parent Parent node Declaration public TreeNode<T>? Parent { get; set; } Property Value Type Description TreeNode<T> | Edit this page View Source Right Right node Declaration public TreeNode<T>? Right { get; set; } Property Value Type Description TreeNode<T> | Edit this page View Source Value Value of the node Declaration public T Value { get; set; } Property Value Type Description T Methods | Edit this page View Source ToString() Returns the node as a string Declaration public override string ToString() Returns Type Description string String representation of the node Overrides object.ToString()"
  },
  "api/BigBook.Trie-2.html": {
    "href": "api/BigBook.Trie-2.html",
    "title": "Class Trie<TObject, TReturn> | Big Book of DataTypes API Reference",
    "keywords": "Class Trie<TObject, TReturn> Trie class Inheritance object Trie<TObject, TReturn> StringTrie Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook Assembly: BigBook.dll Syntax public class Trie<TObject, TReturn> Type Parameters Name Description TObject The type of the object. TReturn The type of the return. Constructors | Edit this page View Source Trie() Initializes a new instance of the Trie<TObject, TReturn> class. Declaration public Trie() Methods | Edit this page View Source Add(IEnumerable<TObject>, TReturn) Adds the specified \"word\". Declaration public Trie<TObject, TReturn> Add(IEnumerable<TObject> word, TReturn returnValue) Parameters Type Name Description IEnumerable<TObject> word The word. TReturn returnValue The return value. Returns Type Description Trie<TObject, TReturn> | Edit this page View Source Build() Builds this instance. Declaration public Trie<TObject, TReturn> Build() Returns Type Description Trie<TObject, TReturn> | Edit this page View Source FindAll(List<TObject>) Finds all added words in the text. Declaration public IEnumerable<TReturn> FindAll(List<TObject> text) Parameters Type Name Description List<TObject> text The text to search in. Returns Type Description IEnumerable<TReturn> The values that were added for the found words. | Edit this page View Source FindAll(ReadOnlySpan<TObject>) Finds all added words in the text. Declaration public IEnumerable<TReturn> FindAll(ReadOnlySpan<TObject> text) Parameters Type Name Description ReadOnlySpan<TObject> text The text to search in. Returns Type Description IEnumerable<TReturn> The values that were added for the found words. | Edit this page View Source FindAll(Span<TObject>) Finds all added words in the text. Declaration public IEnumerable<TReturn> FindAll(Span<TObject> text) Parameters Type Name Description Span<TObject> text The text to search in. Returns Type Description IEnumerable<TReturn> The values that were added for the found words. | Edit this page View Source FindAll(TObject[]) Finds all added words in the text. Declaration public IEnumerable<TReturn> FindAll(TObject[] text) Parameters Type Name Description TObject[] text The text to search in. Returns Type Description IEnumerable<TReturn> The values that were added for the found words. | Edit this page View Source FindAny(List<TObject>) Finds the first added word in the text. Declaration public TReturn FindAny(List<TObject> text) Parameters Type Name Description List<TObject> text The text. Returns Type Description TReturn The first value that was found. The default value is returned if nothing is found. | Edit this page View Source FindAny(ReadOnlySpan<TObject>) Finds the first added word in the text. Declaration public TReturn FindAny(ReadOnlySpan<TObject> text) Parameters Type Name Description ReadOnlySpan<TObject> text The text. Returns Type Description TReturn The first value that was found. The default value is returned if nothing is found. | Edit this page View Source FindAny(Span<TObject>) Finds the first added word in the text. Declaration public TReturn FindAny(Span<TObject> text) Parameters Type Name Description Span<TObject> text The text. Returns Type Description TReturn The first value that was found. The default value is returned if nothing is found. | Edit this page View Source FindAny(TObject[]) Finds the first added word in the text. Declaration public TReturn FindAny(TObject[] text) Parameters Type Name Description TObject[] text The text. Returns Type Description TReturn The first value that was found. The default value is returned if nothing is found."
  },
  "api/BigBook.Vector3.html": {
    "href": "api/BigBook.Vector3.html",
    "title": "Class Vector3 | Big Book of DataTypes API Reference",
    "keywords": "Class Vector3 Vector class (holds three items) Inheritance object Vector3 Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: BigBook Assembly: BigBook.dll Syntax public class Vector3 Constructors | Edit this page View Source Vector3(double, double, double) Constructor Declaration public Vector3(double x, double y, double z) Parameters Type Name Description double x X direction double y Y direction double z Z direction Properties | Edit this page View Source Array Used for converting this to an array and back Declaration public double[] Array { get; set; } Property Value Type Description double[] | Edit this page View Source Magnitude Returns the magnitude of the vector Declaration public double Magnitude { get; } Property Value Type Description double | Edit this page View Source X X value Declaration public double X { get; set; } Property Value Type Description double | Edit this page View Source Y Y Value Declaration public double Y { get; set; } Property Value Type Description double | Edit this page View Source Z Z value Declaration public double Z { get; set; } Property Value Type Description double Methods | Edit this page View Source Add(Vector3, Vector3) Adds the two values Declaration public static Vector3 Add(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left The left. Vector3 right The right. Returns Type Description Vector3 The results | Edit this page View Source Angle(Vector3, Vector3) Determines the angle between the vectors Declaration public static double Angle(Vector3 v1, Vector3 v2) Parameters Type Name Description Vector3 v1 Vector 1 Vector3 v2 Vector 2 Returns Type Description double Angle between the vectors | Edit this page View Source CompareTo(Vector3) Compares the two vectors. Declaration public int CompareTo(Vector3 other) Parameters Type Name Description Vector3 other The other. Returns Type Description int The result. | Edit this page View Source Distance(Vector3, Vector3) The distance between two vectors Declaration public static double Distance(Vector3 v1, Vector3 v2) Parameters Type Name Description Vector3 v1 Vector 1 Vector3 v2 Vector 2 Returns Type Description double Distance between the vectors | Edit this page View Source Divide(Vector3, double) Divides the specified values. Declaration public static Vector3 Divide(Vector3 left, double right) Parameters Type Name Description Vector3 left The left. double right The right. Returns Type Description Vector3 The result | Edit this page View Source DotProduct(Vector3, Vector3) Does a dot product Declaration public static double DotProduct(Vector3 v1, Vector3 v2) Parameters Type Name Description Vector3 v1 Vector 1 Vector3 v2 Vector 2 Returns Type Description double a dot product | Edit this page View Source Equals(object) Determines if the items are equal Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Object to compare Returns Type Description bool true if they are, false otherwise Overrides object.Equals(object) | Edit this page View Source GetHashCode() Gets the hash code Declaration public override int GetHashCode() Returns Type Description int The hash code Overrides object.GetHashCode() | Edit this page View Source Interpolate(Vector3, Vector3, double) Interpolates between the vectors Declaration public static Vector3 Interpolate(Vector3 v1, Vector3 v2, double control) Parameters Type Name Description Vector3 v1 Vector 1 Vector3 v2 Vector 2 double control Percent to move between 1 and 2 Returns Type Description Vector3 The interpolated vector | Edit this page View Source Multiply(Vector3, Vector3) Multiplies the specified values. Declaration public static Vector3 Multiply(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left The left. Vector3 right The right. Returns Type Description Vector3 The result | Edit this page View Source Negate(Vector3) Negates the specified item. Declaration public static Vector3 Negate(Vector3 item) Parameters Type Name Description Vector3 item The item. Returns Type Description Vector3 The result. | Edit this page View Source Normalize() Normalizes the vector Declaration public Vector3 Normalize() Returns Type Description Vector3 This | Edit this page View Source Subtract(Vector3, Vector3) Subtracts the specified vectors. Declaration public static Vector3 Subtract(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left The left. Vector3 right The right. Returns Type Description Vector3 The resulting vector | Edit this page View Source ToString() To string function Declaration public override string ToString() Returns Type Description string String representation of the vector Overrides object.ToString() Operators | Edit this page View Source operator +(Vector3, Vector3) Addition Declaration public static Vector3 operator +(Vector3 v1, Vector3 v2) Parameters Type Name Description Vector3 v1 Item 1 Vector3 v2 Item 2 Returns Type Description Vector3 The resulting vector | Edit this page View Source operator /(Vector3, double) Division Declaration public static Vector3 operator /(Vector3 v1, double d) Parameters Type Name Description Vector3 v1 Item 1 double d Item 2 Returns Type Description Vector3 The resulting vector | Edit this page View Source operator ==(Vector3, Vector3) Equals Declaration public static bool operator ==(Vector3 v1, Vector3 v2) Parameters Type Name Description Vector3 v1 Item 1 Vector3 v2 Item 2 Returns Type Description bool The resulting vector | Edit this page View Source operator >(Vector3, Vector3) Greater than Declaration public static bool operator >(Vector3 v1, Vector3 v2) Parameters Type Name Description Vector3 v1 Item 1 Vector3 v2 Item 2 Returns Type Description bool The resulting vector | Edit this page View Source operator >=(Vector3, Vector3) Greater than or equal Declaration public static bool operator >=(Vector3 v1, Vector3 v2) Parameters Type Name Description Vector3 v1 Item 1 Vector3 v2 Item 2 Returns Type Description bool The resulting vector | Edit this page View Source operator !=(Vector3, Vector3) Not equals Declaration public static bool operator !=(Vector3 v1, Vector3 v2) Parameters Type Name Description Vector3 v1 Item 1 Vector3 v2 Item 2 Returns Type Description bool The resulting vector | Edit this page View Source operator <(Vector3, Vector3) Less than Declaration public static bool operator <(Vector3 v1, Vector3 v2) Parameters Type Name Description Vector3 v1 Item 1 Vector3 v2 Item 2 Returns Type Description bool The resulting vector | Edit this page View Source operator <=(Vector3, Vector3) Less than or equal Declaration public static bool operator <=(Vector3 v1, Vector3 v2) Parameters Type Name Description Vector3 v1 Item 1 Vector3 v2 Item 2 Returns Type Description bool The resulting vector | Edit this page View Source operator *(Vector3, Vector3) Does a cross product Declaration public static Vector3 operator *(Vector3 v1, Vector3 v2) Parameters Type Name Description Vector3 v1 Item 1 Vector3 v2 Item 2 Returns Type Description Vector3 The resulting vector | Edit this page View Source operator *(Vector3, double) Multiplication Declaration public static Vector3 operator *(Vector3 v1, double d) Parameters Type Name Description Vector3 v1 Item 1 double d Item 2 Returns Type Description Vector3 The resulting vector | Edit this page View Source operator *(double, Vector3) Multiplication Declaration public static Vector3 operator *(double d, Vector3 v1) Parameters Type Name Description double d Item 2 Vector3 v1 Item 1 Returns Type Description Vector3 The resulting vector | Edit this page View Source operator -(Vector3, Vector3) Subtraction Declaration public static Vector3 operator -(Vector3 v1, Vector3 v2) Parameters Type Name Description Vector3 v1 Item 1 Vector3 v2 Item 2 Returns Type Description Vector3 The resulting vector | Edit this page View Source operator -(Vector3) Negation Declaration public static Vector3 operator -(Vector3 v1) Parameters Type Name Description Vector3 v1 Item 1 Returns Type Description Vector3 The resulting vector"
  },
  "api/BigBook.VersionInfo.html": {
    "href": "api/BigBook.VersionInfo.html",
    "title": "Enum VersionInfo | Big Book of DataTypes API Reference",
    "keywords": "Enum VersionInfo Version info Namespace: BigBook Assembly: BigBook.dll Syntax [Flags] public enum VersionInfo Fields Name Description LongVersion Long version ShortVersion Short version"
  },
  "api/BigBook.Vertex-1.html": {
    "href": "api/BigBook.Vertex-1.html",
    "title": "Class Vertex<T> | Big Book of DataTypes API Reference",
    "keywords": "Class Vertex<T> Vertex within the graph Inheritance object Vertex<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: BigBook Assembly: BigBook.dll Syntax public class Vertex<T> Type Parameters Name Description T Data type saved in the vertex Constructors | Edit this page View Source Vertex(T, Graph<T>) Initializes a new instance of the Vertex<T> class. Declaration public Vertex(T data, Graph<T> graph) Parameters Type Name Description T data The data. Graph<T> graph The graph. Properties | Edit this page View Source Data Gets or sets the data. Declaration public T Data { get; set; } Property Value Type Description T The data. | Edit this page View Source IncomingEdges Gets the incoming edges. Declaration public List<Edge<T>> IncomingEdges { get; } Property Value Type Description List<Edge<T>> The incoming edges. | Edit this page View Source OutgoingEdges Gets the outgoing edges. Declaration public List<Edge<T>> OutgoingEdges { get; } Property Value Type Description List<Edge<T>> The outgoing edges. Methods | Edit this page View Source AddOutgoingEdge(Vertex<T>) Adds an outgoing edge to the vertex specified Declaration public Edge<T> AddOutgoingEdge(Vertex<T> sink) Parameters Type Name Description Vertex<T> sink The sink. Returns Type Description Edge<T> The new edge | Edit this page View Source Remove() Removes all edges from this vertex and removes it from the graph. Declaration public Vertex<T> Remove() Returns Type Description Vertex<T> This | Edit this page View Source RemoveEdge(Edge<T>) Removes the edge. Declaration public Vertex<T> RemoveEdge(Edge<T> edge) Parameters Type Name Description Edge<T> edge The edge. Returns Type Description Vertex<T> This"
  },
  "api/BigBook.html": {
    "href": "api/BigBook.html",
    "title": "Namespace BigBook | Big Book of DataTypes API Reference",
    "keywords": "Namespace BigBook Classes AsyncHelper Async helper. Bag<T> Used to count the number of times something is added to the list BinaryTree<T> Binary tree BloomFilter<TObject> Bloom filter DateSpan Represents a date span Dynamo Dynamic object implementation Dynamo<TClass> Dynamic object implementation (used when inheriting) Edge<T> Edge pointing from vertex source to vertex sink Fraction Represents a fraction Graph<T> Class used to represent a graph LazyAsync<T> Lazy class that handles asyc ListMapping<T1, T2> Maps a key to a list of data ManyToManyIndex<TFirst, TSecond> Two way, many to many index Matrix Matrix used in linear algebra ObservableList<T> Observable List class PriorityQueue<T> Helper class that implements a priority queue RingBuffer<T> Implements a ring buffer Row Holds an individual row Set<T> Class to be used for sets of data StringTrie Special case Table Holds tabular information TagDictionary<TKey, TValue> Dictionary that matches multiple keys to each value TaskQueue<T> Class that helps with running tasks in parallel on a set of objects (that will come in on an ongoing basis, think producer/consumer situations) TreeNode<T> Node class for the Binary tree Trie<TObject, TReturn> Trie class Vector3 Vector class (holds three items) Vertex<T> Vertex within the graph Structs Change Change class Enums CharIs What type of character is this DateCompare Date comparison type MinificationType Minification type StringCase What sort of string capitalization should be used? StringCompare What type of string comparison are we doing? StringFilter Predefined filters TimeFrame Time frame VersionInfo Version info Delegates BloomFilter<TObject>.HashFunction Hash function delegate"
  },
  "api/Microsoft.Extensions.DependencyInjection.BigBookCanisterExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.BigBookCanisterExtensions.html",
    "title": "Class BigBookCanisterExtensions | Big Book of DataTypes API Reference",
    "keywords": "Class BigBookCanisterExtensions Canister registration extension Inheritance object BigBookCanisterExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.Extensions.DependencyInjection Assembly: BigBook.dll Syntax public static class BigBookCanisterExtensions Methods | Edit this page View Source RegisterBigBookOfDataTypes(ICanisterConfiguration?) Registers the big book of data types. Declaration public static ICanisterConfiguration? RegisterBigBookOfDataTypes(this ICanisterConfiguration? bootstrapper) Parameters Type Name Description ICanisterConfiguration bootstrapper The bootstrapper. Returns Type Description ICanisterConfiguration The bootstrapper"
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | Big Book of DataTypes API Reference",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes BigBookCanisterExtensions Canister registration extension"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome | Big Book of DataTypes API Reference",
    "keywords": "Welcome Welcome to the API browser."
  },
  "articles/example2.html": {
    "href": "articles/example2.html",
    "title": "Code | Big Book of DataTypes API Reference",
    "keywords": "Code namespace BigBook.Example { /// <summary> /// Example 2. This example shows how to use the ListMapping class. /// </summary> public static class Example2 { /// <summary> /// ListMapping example. /// </summary> public static void ListMappings() { // Now for one of the many data types that are available. This one lets you have lists of items that are grouped by a key. var BucketFilterExample = new ListMapping<string, ExampleClass>(); BucketFilterExample.Add(\"Test\", new ExampleClass { Name = \"Test\", Value = 5 }); BucketFilterExample.Add(\"Test\", new ExampleClass { Name = \"Test\", Value = 10 }); BucketFilterExample.Add(\"Test2\", new ExampleClass { Name = \"Test2\", Value = 15 }); BucketFilterExample.Add(\"Test2\", new ExampleClass { Name = \"Test2\", Value = 20 }); BucketFilterExample.Add(\"Test3\", new ExampleClass { Name = \"Test3\", Value = 25 }); BucketFilterExample.Add(\"Test3\", new ExampleClass { Name = \"Test3\", Value = 30 }); // Now we can get the values back out and they will be grouped by the key. // This also uses the extension method that is available to convert the list to a joined string. Console.WriteLine(\"Test1: {0}\", BucketFilterExample[\"Test\"].ToString(x => x.Value.ToString(), \", \")); Console.WriteLine(\"Test2: {0}\", BucketFilterExample[\"Test2\"].ToString(x => x.Value.ToString(), \", \")); Console.WriteLine(\"Test3: {0}\", BucketFilterExample[\"Test3\"].ToString(x => x.Value.ToString(), \", \")); } } } Output Test1: 5, 10 Test2: 15, 20 Test3: 25, 30"
  },
  "articles/example3.html": {
    "href": "articles/example3.html",
    "title": "Code | Big Book of DataTypes API Reference",
    "keywords": "Code namespace BigBook.Example { /// <summary> /// Example 3. This example shows how to use the LazyAsync class. /// </summary> public static class Example3 { /// <summary> /// Asynchronous lazy loading. /// </summary> public static async Task AsyncLazyLoading() { // This is an example of the lazy async class. It will only run the function when the value is requested. var TestObject = new LazyAsync<int>(async () => { await Task.Delay(500).ConfigureAwait(false); return 5; }); // This will take 500ms to run and will return 5. Console.WriteLine(await TestObject); } } } Output 5"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Code | Big Book of DataTypes API Reference",
    "keywords": "Code namespace BigBook.Example { /// <summary> /// Example 1. This example shows how to use some of the string extensions. /// </summary> public static class Example1 { /// <summary> /// String extension example. /// </summary> public static void StringExtensions() { // This is an example of one of the many extensions that are available. This one is used to keep only the characters you want. // In this case, it will only keep the letters. var ExampleString = \"This is an example string #1\".Keep(StringFilter.Alpha); Console.WriteLine(ExampleString); // In this case, it will only keep the letters and numbers. ExampleString = \"This is an example string #2\".Keep(StringFilter.Alpha | StringFilter.Numeric); Console.WriteLine(ExampleString); // You can also use regular expressions. This one will keep everything. ExampleString = \"This is an example string #3\".Keep(@\"[\\s\\d\\S]\"); Console.WriteLine(ExampleString); // There are a ton of extra extension methods available. This one will add spaces to the string by splitting on upper case letters. // This is useful for converting PascalCase to a sentence. ExampleString = nameof(Example1.StringExtensions).AddSpaces(); Console.WriteLine(ExampleString); } } } Output Thisisanexamplestring Thisisanexamplestring2 This is an example string #3 String Extensions"
  },
  "index.html": {
    "href": "index.html",
    "title": "Big Book of Data Types | Big Book of DataTypes API Reference",
    "keywords": "Big Book of Data Types Big Book of Data Types is a set of classes and extension methods to help with data. This includes classes for caching, data comparison, data conversion, data mapping, string formatting, as well as various data types that are missing from .Net. Setting Up the Library Depending on the features you use in Big Book of Data Types, you may need to register Canister modules as the Dynamo class requires it in order to hook itself up. In order for this to work, you must do the following at startup: services.AddCanisterModules(); The AddCanisterModules function is an extension method on your app's ServiceCollection. When this is done, the Dynamo class is ready to use. If you are not using that class, you should be able to go without registration. Basic usage Most of the library is simply data types that can be used fairly easily. These include: Bag BinaryTree DateSpan Fraction ListMapping Matrix ObservableList PriorityQueue RingBuffer Set Table TagDictionary TaskQueue Vector3 Similarly the extension methods for various types can be found by adding: using BigBook; To your list of usings. From there a number of extension methods should be available for arrays, IEnumerable, string, ConcurrentBag, ConcurrentDictionary, DateTime, Exception, ICollection, IComparable, IDictionary, MatchCollection, Process, Stream, TimeSpan, etc. There are a couple hundred extension methods and I suggest you just take a look at them to see what they do. Another portion of the library that might be of some interest and yet not completely intuitive is the Dynamo class. Dynamo is a true dynamic type for .Net. ExpandoObject is generally great for basic work that requires a dynamic, however it is not easy to convert to other data types. For instance you can't do this: dynamic MyDynamicValue=new ExpandoObject(); SomeClass FinalObject=MyDynamicValue; Dynamo, on the other hand, has no issues with this: dynamic MyDynamicValue=new Dynamo(); SomeClass FinalObject=MyDynamicValue; The class handles conversion to and from class types, can convert properties from one type to another, and comes with a set of built in functionality. The class implements INotifyPropertyChanged, has a built in change log, and is thread safe. It can also be added as a base class for other classes to add this functionality automatically. Installation The library is available via Nuget with the package name \"BigBook\". To install it run the following command in the Package Manager Console: Install-Package BigBook Build Process In order to build the library you will require the following: Visual Studio 2019 Other than that, just clone the project and you should be able to load the solution and build without too much effort."
  }
}