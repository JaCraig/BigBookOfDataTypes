{
  "api/BigBook.AsyncHelper.html": {
    "href": "api/BigBook.AsyncHelper.html",
    "title": "Class AsyncHelper | Big Book of DataTypes API Reference",
    "keywords": "Class AsyncHelper Namespace BigBook Assembly BigBook.dll Async helper. public static class AsyncHelper Inheritance object AsyncHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RunSync(Func<Task>) Runs the synchronously. public static void RunSync(this Func<Task> func) Parameters func Func<Task> The function. RunSync<TResult>(Func<Task<TResult>>) Runs the Func synchronously. public static TResult RunSync<TResult>(Func<Task<TResult>> func) Parameters func Func<Task<TResult>> The function. Returns TResult The result. Type Parameters TResult The type of the result."
  },
  "api/BigBook.Bag-1.html": {
    "href": "api/BigBook.Bag-1.html",
    "title": "Class Bag<T> | Big Book of DataTypes API Reference",
    "keywords": "Class Bag<T> Namespace BigBook Assembly BigBook.dll Used to count the number of times something is added to the list public class Bag<T> : ICollection<T>, IEnumerable<T>, IEnumerable Type Parameters T Type of data within the bag Inheritance object Bag<T> Implements ICollection<T> IEnumerable<T> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Bag() Constructor public Bag() Properties Count Number of items in the bag public virtual int Count { get; } Property Value int IsReadOnly Is this read only? public virtual bool IsReadOnly { get; } Property Value bool this[T] Gets a specified item public virtual int this[T index] { get; set; } Parameters index T Item to get Property Value int The number of this item in the bag Items Actual internal container protected ConcurrentDictionary<T, int> Items { get; } Property Value ConcurrentDictionary<T, int> Methods Add(T) Adds an item to the bag public virtual void Add(T item) Parameters item T Item to add Clear() Clears the bag public virtual void Clear() Contains(T) Determines if the bag contains an item public virtual bool Contains(T item) Parameters item T Item to check Returns bool True if it does, false otherwise CopyTo(T[], int) Copies the bag to an array public virtual void CopyTo(T[] array, int arrayIndex) Parameters array T[] Array to copy to arrayIndex int Index to start at GetEnumerator() Gets the enumerator public virtual IEnumerator<T> GetEnumerator() Returns IEnumerator<T> The enumerator Remove(T) Removes an item from the bag public virtual bool Remove(T item) Parameters item T Item to remove Returns bool True if it is removed, false otherwise"
  },
  "api/BigBook.BinaryTree-1.html": {
    "href": "api/BigBook.BinaryTree-1.html",
    "title": "Class BinaryTree<T> | Big Book of DataTypes API Reference",
    "keywords": "Class BinaryTree<T> Namespace BigBook Assembly BigBook.dll Binary tree public class BinaryTree<T> : ICollection<T>, IEnumerable<T>, IEnumerable where T : IComparable<T> Type Parameters T The type held by the nodes Inheritance object BinaryTree<T> Implements ICollection<T> IEnumerable<T> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors BinaryTree(TreeNode<T>?) Constructor public BinaryTree(TreeNode<T>? root = null) Parameters root TreeNode<T> Root of the binary tree Properties Count Number of items in the tree public int Count { get; } Property Value int IsEmpty Is the tree empty public bool IsEmpty { get; } Property Value bool IsReadOnly Is this read only? public bool IsReadOnly { get; } Property Value bool MaxValue Gets the maximum value of the tree public T MaxValue { get; } Property Value T MinValue Gets the minimum value of the tree public T MinValue { get; } Property Value T NumberOfNodes The number of nodes in the tree protected int NumberOfNodes { get; set; } Property Value int Root The root value public TreeNode<T>? Root { get; set; } Property Value TreeNode<T> Methods Add(T) Adds an item to a binary tree public void Add(T item) Parameters item T Item to add Clear() Clears all items from the tree public void Clear() Contains(T) Determines if the tree contains an item public bool Contains(T item) Parameters item T Item to check Returns bool True if it is, false otherwise CopyTo(T[], int) Copies the tree to an array public void CopyTo(T[] array, int arrayIndex) Parameters array T[] Array to copy to arrayIndex int Index to start at Find(T) Finds a specific object protected TreeNode<T>? Find(T item) Parameters item T The item to find Returns TreeNode<T> The node if it is found GetEnumerator() Gets the enumerator public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> The enumerator Insert(T) Inserts a value protected void Insert(T item) Parameters item T item to insert Remove(T) Removes an item from the tree public bool Remove(T item) Parameters item T Item to remove Returns bool True if it is removed, false otherwise ToString() Outputs the tree as a string public override string ToString() Returns string The string representation of the tree Traversal(TreeNode<T>?) Traverses the list protected IEnumerable<TreeNode<T>> Traversal(TreeNode<T>? node) Parameters node TreeNode<T> The node to start the search from Returns IEnumerable<TreeNode<T>> The individual items from the tree Operators implicit operator string(BinaryTree<T>?) Converts the object to a string public static implicit operator string(BinaryTree<T>? value) Parameters value BinaryTree<T> Value to convert Returns string The value as a string"
  },
  "api/BigBook.BloomFilter-1.HashFunction.html": {
    "href": "api/BigBook.BloomFilter-1.HashFunction.html",
    "title": "Delegate BloomFilter<TObject>.HashFunction | Big Book of DataTypes API Reference",
    "keywords": "Delegate BloomFilter<TObject>.HashFunction Namespace BigBook Assembly BigBook.dll Hash function delegate public delegate int BloomFilter<TObject>.HashFunction(TObject input) Parameters input TObject The input. Returns int The hashed value."
  },
  "api/BigBook.BloomFilter-1.html": {
    "href": "api/BigBook.BloomFilter-1.html",
    "title": "Class BloomFilter<TObject> | Big Book of DataTypes API Reference",
    "keywords": "Class BloomFilter<TObject> Namespace BigBook Assembly BigBook.dll Bloom filter public class BloomFilter<TObject> Type Parameters TObject The type of the object. Inheritance object BloomFilter<TObject> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BloomFilter(int) Initializes a new instance of the BloomFilter<TObject> class. public BloomFilter(int size) Parameters size int The size. BloomFilter(int, HashFunction?) Initializes a new instance of the BloomFilter<TObject> class. public BloomFilter(int size, BloomFilter<TObject>.HashFunction? hashFunction) Parameters size int The size. hashFunction BloomFilter<TObject>.HashFunction The hash function. BloomFilter(int, float) Initializes a new instance of the BloomFilter<TObject> class. public BloomFilter(int size, float errorRate) Parameters size int The size. errorRate float The error rate. BloomFilter(int, float, HashFunction?) Initializes a new instance of the BloomFilter<TObject> class. public BloomFilter(int size, float errorRate, BloomFilter<TObject>.HashFunction? hashFunction) Parameters size int The size. errorRate float The error rate. hashFunction BloomFilter<TObject>.HashFunction The hash function. BloomFilter(int, float, HashFunction?, int, int) Initializes a new instance of the BloomFilter<TObject> class. public BloomFilter(int size, float errorRate, BloomFilter<TObject>.HashFunction? hashFunction, int m, int k) Parameters size int The size. errorRate float The error rate. hashFunction BloomFilter<TObject>.HashFunction The hash function. m int The m. k int The k. Exceptions ArgumentOutOfRangeException ArgumentNullException hashFunction Methods Add(TObject) Adds a new item to the filter. It cannot be removed. public void Add(TObject item) Parameters item TObject The item. Contains(TObject) Checks for the existance of the item in the filter for a given probability. public bool Contains(TObject item) Parameters item TObject The item. Returns bool true if [contains] [the specified item]; otherwise, false."
  },
  "api/BigBook.CanisterModules.BigBookModule.html": {
    "href": "api/BigBook.CanisterModules.BigBookModule.html",
    "title": "Class BigBookModule | Big Book of DataTypes API Reference",
    "keywords": "Class BigBookModule Namespace BigBook.CanisterModules Assembly BigBook.dll Big book module public class BigBookModule : IModule Inheritance object BigBookModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Order Order to run it in public int Order { get; } Property Value int Methods Load(IServiceCollection?) Loads the module public void Load(IServiceCollection? bootstrapper) Parameters bootstrapper IServiceCollection Bootstrapper to register with See Also IModule"
  },
  "api/BigBook.CanisterModules.html": {
    "href": "api/BigBook.CanisterModules.html",
    "title": "Namespace BigBook.CanisterModules | Big Book of DataTypes API Reference",
    "keywords": "Namespace BigBook.CanisterModules Classes BigBookModule Big book module"
  },
  "api/BigBook.Change.html": {
    "href": "api/BigBook.Change.html",
    "title": "Struct Change | Big Book of DataTypes API Reference",
    "keywords": "Struct Change Namespace BigBook Assembly BigBook.dll Change class public struct Change : IEquatable<Change> Implements IEquatable<Change> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Change(object?, object?) Constructor public Change(object? originalValue, object? newValue) Parameters originalValue object Original value newValue object New value Properties NewValue New value public readonly object? NewValue { get; } Property Value object OriginalValue Original value public readonly object? OriginalValue { get; } Property Value object Methods Equals(Change) Indicates whether the current object is equal to another object of the same type. public bool Equals(Change other) Parameters other Change An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns a hash code for this instance. public override int GetHashCode() Returns int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Operators operator ==(Change, Change) Implements the operator ==. public static bool operator ==(Change left, Change right) Parameters left Change The left. right Change The right. Returns bool The result of the operator. operator !=(Change, Change) Implements the operator !=. public static bool operator !=(Change left, Change right) Parameters left Change The left. right Change The right. Returns bool The result of the operator. See Also IEquatable<T>"
  },
  "api/BigBook.CharIs.html": {
    "href": "api/BigBook.CharIs.html",
    "title": "Enum CharIs | Big Book of DataTypes API Reference",
    "keywords": "Enum CharIs Namespace BigBook Assembly BigBook.dll What type of character is this [Flags] public enum CharIs Fields Control = 4096 Control Digit = 2048 Digit HighSurrogate = 1024 High surrogate Letter = 512 Letter LetterOrDigit = 256 letter or digit LowSurrogate = 64 Low surrogate Lower = 128 Lower None = 0 The none Number = 32 Number Punctuation = 16 Punctuation Surrogate = 8 Surrogate Symbol = 4 Symbol Upper = 2 Upper case WhiteSpace = 1 White space"
  },
  "api/BigBook.Comparison.GenericComparer-1.html": {
    "href": "api/BigBook.Comparison.GenericComparer-1.html",
    "title": "Class GenericComparer<TData> | Big Book of DataTypes API Reference",
    "keywords": "Class GenericComparer<TData> Namespace BigBook.Comparison Assembly BigBook.dll Generic IComparable class public class GenericComparer<TData> : IComparer<TData> where TData : IComparable Type Parameters TData Data type Inheritance object GenericComparer<TData> Implements IComparer<TData> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Comparer Gets the comparer. public static GenericComparer<TData> Comparer { get; } Property Value GenericComparer<TData> The comparer. Methods Compare(TData, TData) Compares the two objects public int Compare(TData x, TData y) Parameters x TData Object 1 y TData Object 2 Returns int 0 if they're equal, any other value they are not"
  },
  "api/BigBook.Comparison.GenericEqualityComparer-1.html": {
    "href": "api/BigBook.Comparison.GenericEqualityComparer-1.html",
    "title": "Class GenericEqualityComparer<TData> | Big Book of DataTypes API Reference",
    "keywords": "Class GenericEqualityComparer<TData> Namespace BigBook.Comparison Assembly BigBook.dll Generic equality comparer public class GenericEqualityComparer<TData> : IEqualityComparer<TData> Type Parameters TData Data type Inheritance object GenericEqualityComparer<TData> Implements IEqualityComparer<TData> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Comparer Gets the comparer. public static GenericEqualityComparer<TData> Comparer { get; } Property Value GenericEqualityComparer<TData> The comparer. Methods Equals(TData, TData) Determines if the two items are equal public bool Equals(TData x, TData y) Parameters x TData Object 1 y TData Object 2 Returns bool True if they are, false otherwise GetHashCode(TData) Get hash code public int GetHashCode(TData obj) Parameters obj TData Object to get the hash code of Returns int The object's hash code"
  },
  "api/BigBook.Comparison.SimpleComparer-1.html": {
    "href": "api/BigBook.Comparison.SimpleComparer-1.html",
    "title": "Class SimpleComparer<TData> | Big Book of DataTypes API Reference",
    "keywords": "Class SimpleComparer<TData> Namespace BigBook.Comparison Assembly BigBook.dll Simple IComparable class public class SimpleComparer<TData> : IComparer<TData> where TData : IComparable Type Parameters TData Data type Inheritance object SimpleComparer<TData> Implements IComparer<TData> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SimpleComparer(Func<TData, TData, int>) Initializes a new instance of the SimpleComparer<TData> class. public SimpleComparer(Func<TData, TData, int> comparisonFunction) Parameters comparisonFunction Func<TData, TData, int> The comparison function. Properties ComparisonFunction Gets or sets the comparison function. protected Func<TData, TData, int> ComparisonFunction { get; set; } Property Value Func<TData, TData, int> The comparison function. Methods Compare(TData, TData) Compares the two objects public int Compare(TData x, TData y) Parameters x TData Object 1 y TData Object 2 Returns int 0 if they're equal, any other value they are not"
  },
  "api/BigBook.Comparison.SimpleEqualityComparer-1.html": {
    "href": "api/BigBook.Comparison.SimpleEqualityComparer-1.html",
    "title": "Class SimpleEqualityComparer<TData> | Big Book of DataTypes API Reference",
    "keywords": "Class SimpleEqualityComparer<TData> Namespace BigBook.Comparison Assembly BigBook.dll Simple equality comparer public class SimpleEqualityComparer<TData> : IEqualityComparer<TData> Type Parameters TData Data type Inheritance object SimpleEqualityComparer<TData> Implements IEqualityComparer<TData> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SimpleEqualityComparer(Func<TData, TData, bool>, Func<TData, int>) Initializes a new instance of the SimpleEqualityComparer<TData> class. public SimpleEqualityComparer(Func<TData, TData, bool> comparisonFunction, Func<TData, int> hashFunction) Parameters comparisonFunction Func<TData, TData, bool> The comparison function. hashFunction Func<TData, int> The hash function. Properties ComparisonFunction Gets or sets the comparison function. protected Func<TData, TData, bool> ComparisonFunction { get; set; } Property Value Func<TData, TData, bool> The comparison function. HashFunction Gets or sets the hash function. protected Func<TData, int> HashFunction { get; set; } Property Value Func<TData, int> The hash function. Methods Equals(TData, TData) Determines if the two items are equal public bool Equals(TData x, TData y) Parameters x TData Object 1 y TData Object 2 Returns bool True if they are, false otherwise GetHashCode(TData) Get hash code public int GetHashCode(TData obj) Parameters obj TData Object to get the hash code of Returns int The object's hash code"
  },
  "api/BigBook.Comparison.html": {
    "href": "api/BigBook.Comparison.html",
    "title": "Namespace BigBook.Comparison | Big Book of DataTypes API Reference",
    "keywords": "Namespace BigBook.Comparison Classes GenericComparer<TData> Generic IComparable class GenericEqualityComparer<TData> Generic equality comparer SimpleComparer<TData> Simple IComparable class SimpleEqualityComparer<TData> Simple equality comparer"
  },
  "api/BigBook.DateCompare.html": {
    "href": "api/BigBook.DateCompare.html",
    "title": "Enum DateCompare | Big Book of DataTypes API Reference",
    "keywords": "Enum DateCompare Namespace BigBook Assembly BigBook.dll Date comparison type [Flags] public enum DateCompare Fields InFuture = 1 In the future InPast = 2 In the past None = 0 The none Today = 4 Today WeekDay = 8 Weekday WeekEnd = 16 Weekend"
  },
  "api/BigBook.DateSpan.html": {
    "href": "api/BigBook.DateSpan.html",
    "title": "Class DateSpan | Big Book of DataTypes API Reference",
    "keywords": "Class DateSpan Namespace BigBook Assembly BigBook.dll Represents a date span public class DateSpan Inheritance object DateSpan Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DateSpan(DateTime, DateTime) Constructor public DateSpan(DateTime start, DateTime end) Parameters start DateTime Start of the date span end DateTime End of the date span Properties Days Days between the two dates public int Days { get; } Property Value int End End date public DateTime End { get; } Property Value DateTime Hours Hours between the two dates public int Hours { get; } Property Value int MilliSeconds Milliseconds between the two dates public int MilliSeconds { get; } Property Value int Minutes Minutes between the two dates public int Minutes { get; } Property Value int Months Months between the two dates public int Months { get; } Property Value int Seconds Seconds between the two dates public int Seconds { get; } Property Value int Start Start date public DateTime Start { get; } Property Value DateTime Years Years between the two dates public int Years { get; } Property Value int Methods Add(DateSpan?, DateSpan?) Adds the specified values. public static DateSpan? Add(DateSpan? left, DateSpan? right) Parameters left DateSpan The left. right DateSpan The right. Returns DateSpan The result. Equals(object) Determines if two objects are equal public override bool Equals(object obj) Parameters obj object Object to check Returns bool True if they are, false otherwise GetHashCode() Gets the hash code for the date span public override int GetHashCode() Returns int The hash code Intersection(DateSpan?) Returns the intersecting time span between the two values public DateSpan? Intersection(DateSpan? span) Parameters span DateSpan Span to use Returns DateSpan The intersection of the two time spans Overlap(DateSpan?) Determines if two DateSpans overlap public bool Overlap(DateSpan? span) Parameters span DateSpan The span to compare to Returns bool True if they overlap, false otherwise ToString() Converts the DateSpan to a string public override string ToString() Returns string The DateSpan as a string Operators operator +(DateSpan?, DateSpan?) Addition operator public static DateSpan? operator +(DateSpan? span1, DateSpan? span2) Parameters span1 DateSpan Span 1 span2 DateSpan Span 2 Returns DateSpan The combined date span operator ==(DateSpan?, DateSpan?) Determines if two DateSpans are equal public static bool operator ==(DateSpan? span1, DateSpan? span2) Parameters span1 DateSpan Span 1 span2 DateSpan Span 2 Returns bool True if they are, false otherwise implicit operator string(DateSpan?) Converts the object to a string public static implicit operator string(DateSpan? value) Parameters value DateSpan Value to convert Returns string The value as a string operator !=(DateSpan?, DateSpan?) Determines if two DateSpans are not equal public static bool operator !=(DateSpan? span1, DateSpan? span2) Parameters span1 DateSpan Span 1 span2 DateSpan Span 2 Returns bool True if they are not equal, false otherwise"
  },
  "api/BigBook.Dynamo-1.html": {
    "href": "api/BigBook.Dynamo-1.html",
    "title": "Class Dynamo<TClass> | Big Book of DataTypes API Reference",
    "keywords": "Class Dynamo<TClass> Namespace BigBook Assembly BigBook.dll Dynamic object implementation (used when inheriting) public abstract class Dynamo<TClass> : Dynamo, IDynamicMetaObjectProvider, IDictionary<string, object?>, ICollection<KeyValuePair<string, object?>>, IEnumerable<KeyValuePair<string, object?>>, IEnumerable, INotifyPropertyChanged where TClass : Dynamo<TClass> Type Parameters TClass Child object type Inheritance object DynamicObject Dynamo Dynamo<TClass> Implements IDynamicMetaObjectProvider IDictionary<string, object> ICollection<KeyValuePair<string, object>> IEnumerable<KeyValuePair<string, object>> IEnumerable INotifyPropertyChanged Inherited Members Dynamo.ChangeLog Dynamo.Count Dynamo.IsReadOnly Dynamo.this[string] Dynamo.GetValueEnd Dynamo.GetValueStart Dynamo.PropertyChanged Dynamo.Add(string, object) Dynamo.Add(KeyValuePair<string, object>) Dynamo.Clear() Dynamo.Contains(KeyValuePair<string, object>) Dynamo.ContainsKey(string) Dynamo.Copy(object) Dynamo.CopyTo(KeyValuePair<string, object>[], int) Dynamo.CopyTo(object) Dynamo.Equals(object) Dynamo.GetDynamicMemberNames() Dynamo.GetEnumerator() Dynamo.GetHashCode() Dynamo.GetSchema() Dynamo.ReadXml(XmlReader) Dynamo.Remove(string) Dynamo.Remove(KeyValuePair<string, object>) Dynamo.SubSet(params string[]) Dynamo.To<TObject>(TObject) Dynamo.To(object, Type) Dynamo.ToString() Dynamo.TryConvert(ConvertBinder, out object) Dynamo.TryGetMember(GetMemberBinder, out object) Dynamo.TryGetValue(string, out object) Dynamo.TrySetMember(SetMemberBinder, object) Dynamo.TrySetValue(string, object) Dynamo.WriteXml(XmlWriter) Dynamo.GetValue(string, Type) Dynamo.RaiseGetValueEnd(string, object) Dynamo.RaiseGetValueStart(string) Dynamo.RaisePropertyChanged(string, object, object) DynamicObject.GetMetaObject(Expression) DynamicObject.TryBinaryOperation(BinaryOperationBinder, object, out object) DynamicObject.TryCreateInstance(CreateInstanceBinder, object[], out object) DynamicObject.TryDeleteIndex(DeleteIndexBinder, object[]) DynamicObject.TryDeleteMember(DeleteMemberBinder) DynamicObject.TryGetIndex(GetIndexBinder, object[], out object) DynamicObject.TryInvoke(InvokeBinder, object[], out object) DynamicObject.TryInvokeMember(InvokeMemberBinder, object[], out object) DynamicObject.TrySetIndex(SetIndexBinder, object[], object) DynamicObject.TryUnaryOperation(UnaryOperationBinder, out object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Dynamo() Constructor protected Dynamo() Dynamo(bool) Constructor protected Dynamo(bool useChangeLog) Parameters useChangeLog bool if set to true [use change log]. Dynamo(object?, bool) Constructor protected Dynamo(object? item, bool useChangeLog = false) Parameters item object Item to copy values from useChangeLog bool if set to true [use change log]. Properties Keys Keys to the dynamic type public override ICollection<string> Keys { get; } Property Value ICollection<string> Values Gets the Values public override ICollection<object?> Values { get; } Property Value ICollection<object>"
  },
  "api/BigBook.Dynamo.html": {
    "href": "api/BigBook.Dynamo.html",
    "title": "Class Dynamo | Big Book of DataTypes API Reference",
    "keywords": "Class Dynamo Namespace BigBook Assembly BigBook.dll Dynamic object implementation public class Dynamo : DynamicObject, IDynamicMetaObjectProvider, IDictionary<string, object?>, ICollection<KeyValuePair<string, object?>>, IEnumerable<KeyValuePair<string, object?>>, IEnumerable, INotifyPropertyChanged Inheritance object DynamicObject Dynamo Implements IDynamicMetaObjectProvider IDictionary<string, object> ICollection<KeyValuePair<string, object>> IEnumerable<KeyValuePair<string, object>> IEnumerable INotifyPropertyChanged Derived Dynamo<TClass> Inherited Members DynamicObject.GetMetaObject(Expression) DynamicObject.TryBinaryOperation(BinaryOperationBinder, object, out object) DynamicObject.TryCreateInstance(CreateInstanceBinder, object[], out object) DynamicObject.TryDeleteIndex(DeleteIndexBinder, object[]) DynamicObject.TryDeleteMember(DeleteMemberBinder) DynamicObject.TryGetIndex(GetIndexBinder, object[], out object) DynamicObject.TryInvoke(InvokeBinder, object[], out object) DynamicObject.TryInvokeMember(InvokeMemberBinder, object[], out object) DynamicObject.TrySetIndex(SetIndexBinder, object[], object) DynamicObject.TryUnaryOperation(UnaryOperationBinder, out object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Dynamo() Creates a new ExpandoObject with no members. public Dynamo() Dynamo(bool) Constructor public Dynamo(bool useChangeLog) Parameters useChangeLog bool if set to true [use change log]. Dynamo(object?, bool) Initializes a new instance of the Dynamo class. public Dynamo(object? item, bool useChangeLog = false) Parameters item object The item. useChangeLog bool if set to true [use change log]. Properties ChangeLog Gets the change log. public ConcurrentDictionary<string, Change>? ChangeLog { get; } Property Value ConcurrentDictionary<string, Change> The change log. Count Gets the number of elements contained in the ICollection<T>. public int Count { get; } Property Value int IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. public bool IsReadOnly { get; } Property Value bool this[string] Gets or sets the object with the specified key. public object? this[string key] { get; set; } Parameters key string The key. Property Value object The object. Keys Gets an ICollection<T> containing the keys of the IDictionary<TKey, TValue>. public virtual ICollection<string> Keys { get; } Property Value ICollection<string> Values Gets an ICollection<T> containing the values in the IDictionary<TKey, TValue>. public virtual ICollection<object?> Values { get; } Property Value ICollection<object> Methods Add(KeyValuePair<string, object?>) Adds an item to the ICollection<T>. public void Add(KeyValuePair<string, object?> item) Parameters item KeyValuePair<string, object> The object to add to the ICollection<T>. Add(string, object?) Adds an element with the provided key and value to the IDictionary<TKey, TValue>. public void Add(string key, object? value) Parameters key string The object to use as the key of the element to add. value object The object to use as the value of the element to add. Clear() Removes all items from the ICollection<T>. public void Clear() Contains(KeyValuePair<string, object?>) Determines whether this instance contains the object. public bool Contains(KeyValuePair<string, object?> item) Parameters item KeyValuePair<string, object> The object to locate in the ICollection<T>. Returns bool true if item is found in the ICollection<T>; otherwise, false. ContainsKey(string) Determines whether the IDictionary<TKey, TValue> contains an element with the specified key. public bool ContainsKey(string key) Parameters key string The key to locate in the IDictionary<TKey, TValue>. Returns bool true if the IDictionary<TKey, TValue> contains an element with the key; otherwise, false. Copy(object?) Copies the properties from an item public void Copy(object? item) Parameters item object Item to copy from CopyTo(KeyValuePair<string, object?>[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. public void CopyTo(KeyValuePair<string, object?>[] array, int arrayIndex) Parameters array KeyValuePair<string, object>[] The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. arrayIndex int The zero-based index in array at which copying begins. Exceptions ArgumentOutOfRangeException arrayIndex CopyTo(object?) Copies data from here to another object public void CopyTo(object? result) Parameters result object Result Equals(object?) Determines if two objects are equal public override bool Equals(object? obj) Parameters obj object Object to compare to Returns bool True if they're equal, false otherwise GetDynamicMemberNames() Gets the dynamic member names public override IEnumerable<string> GetDynamicMemberNames() Returns IEnumerable<string> The keys used internally GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<KeyValuePair<string, object?>> GetEnumerator() Returns IEnumerator<KeyValuePair<string, object>> An enumerator that can be used to iterate through the collection. GetHashCode() Gets the hash code public override int GetHashCode() Returns int The hash code GetSchema() Not used public XmlSchema? GetSchema() Returns XmlSchema Null GetValue(string, Type) Gets a value protected object? GetValue(string name, Type returnType) Parameters name string Name of the item returnType Type Return value type Returns object The returned value RaiseGetValueEnd(string, object?) Raises the get value end event protected object? RaiseGetValueEnd(string propertyName, object? value) Parameters propertyName string Property name value object Value initially being returned Returns object Returns null if the function should continue, any other value should be immediately returned to the user RaiseGetValueStart(string) Raises the get value start event protected object? RaiseGetValueStart(string propertyName) Parameters propertyName string Property name Returns object Returns null if the function should continue, any other value should be immediately returned to the user RaisePropertyChanged(string, object?, object?) Raises the property changed event protected void RaisePropertyChanged(string propertyName, object? oldValue, object? newValue) Parameters propertyName string Property name oldValue object The old value. newValue object New value for the property ReadXml(XmlReader) Reads the data from an XML doc public virtual void ReadXml(XmlReader reader) Parameters reader XmlReader XML reader Remove(KeyValuePair<string, object?>) Removes the first occurrence of a specific object from the ICollection<T>. public bool Remove(KeyValuePair<string, object?> item) Parameters item KeyValuePair<string, object> The object to remove from the ICollection<T>. Returns bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. Remove(string) Removes the element with the specified key from the IDictionary<TKey, TValue>. public bool Remove(string key) Parameters key string The key of the element to remove. Returns bool true if the element is successfully removed; otherwise, false. This method also returns false if key was not found in the original IDictionary<TKey, TValue>. SubSet(params string[]) Returns a subset of the current Dynamo object public dynamic SubSet(params string[] keys) Parameters keys string[] Property keys to return Returns dynamic A new Dynamo object containing only the keys specified To(object?, Type) Converts the object to the type specified public object To(object? defaultObject, Type ObjectType) Parameters defaultObject object The default object. ObjectType Type Object type Returns object The object converted to the type specified ToString() Outputs the object graph public override string ToString() Returns string The string version of the object To<TObject>(TObject) Converts the object to the type specified public TObject To<TObject>(TObject defaultObject = default) Parameters defaultObject TObject Returns TObject The object converted to the type specified Type Parameters TObject Object type TryConvert(ConvertBinder, out object?) Attempts to convert the object public override bool TryConvert(ConvertBinder binder, out object? result) Parameters binder ConvertBinder Convert binder result object Result Returns bool True if it is converted, false otherwise TryGetMember(GetMemberBinder, out object?) Attempts to get a member public override bool TryGetMember(GetMemberBinder binder, out object? result) Parameters binder GetMemberBinder GetMemberBinder object result object Result Returns bool True if it gets the member, false otherwise TryGetValue(string, out object?) Gets the value associated with the specified key. public bool TryGetValue(string key, out object? value) Parameters key string The key whose value to get. value object When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns bool true if the object that implements IDictionary<TKey, TValue> contains an element with the specified key; otherwise, false. TrySetMember(SetMemberBinder, object) Attempts to set the member public override bool TrySetMember(SetMemberBinder binder, object value) Parameters binder SetMemberBinder Member binder value object Value Returns bool True if it is set, false otherwise TrySetValue(string, object?) Tries to set the value. public bool TrySetValue(string key, object? value) Parameters key string The key. value object The value. Returns bool True if it is set, false otherwise. WriteXml(XmlWriter) Writes the data to an XML doc public virtual void WriteXml(XmlWriter writer) Parameters writer XmlWriter XML writer Events GetValueEnd Called when the value/property is found but before it is returned to the caller Sends (this, PropertyName, EventArgs) to items attached to the event public event Action<Dynamo, string, OnEndEventArgs> GetValueEnd Event Type Action<Dynamo, string, OnEndEventArgs> GetValueStart Called when beginning to get a value/property Sends (this, EventArgs) to items attached to the event public event Action<Dynamo, OnStartEventArgs> GetValueStart Event Type Action<Dynamo, OnStartEventArgs> PropertyChanged Occurs when a property value changes. public event PropertyChangedEventHandler PropertyChanged Event Type PropertyChangedEventHandler See Also Dynamo"
  },
  "api/BigBook.Edge-1.html": {
    "href": "api/BigBook.Edge-1.html",
    "title": "Class Edge<T> | Big Book of DataTypes API Reference",
    "keywords": "Class Edge<T> Namespace BigBook Assembly BigBook.dll Edge pointing from vertex source to vertex sink public class Edge<T> Type Parameters T Data type of the data Inheritance object Edge<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Edge(Vertex<T>, Vertex<T>) Initializes a new instance of the Edge<T> class. public Edge(Vertex<T> source, Vertex<T> sink) Parameters source Vertex<T> The source. sink Vertex<T> The sink. Properties Sink Gets the sink vertex. public Vertex<T>? Sink { get; } Property Value Vertex<T> The sink vertex. Source Gets the source vertex public Vertex<T>? Source { get; } Property Value Vertex<T> The source vertex Methods Remove() Removes this edge from the sink and source vertices. public Edge<T> Remove() Returns Edge<T> This"
  },
  "api/BigBook.EventArgs.BaseEventArgs.html": {
    "href": "api/BigBook.EventArgs.BaseEventArgs.html",
    "title": "Class BaseEventArgs | Big Book of DataTypes API Reference",
    "keywords": "Class BaseEventArgs Namespace BigBook.EventArgs Assembly BigBook.dll Base event args for the events used in the system public class BaseEventArgs : EventArgs Inheritance object EventArgs BaseEventArgs Derived ChangedEventArgs DeletedEventArgs DeletingEventArgs LoadedEventArgs LoadingEventArgs OnEndEventArgs OnErrorEventArgs OnStartEventArgs SavedEventArgs SavingEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Content Content of the event public object? Content { get; set; } Property Value object Stop Should the event be stopped? public bool Stop { get; set; } Property Value bool"
  },
  "api/BigBook.EventArgs.ChangedEventArgs.html": {
    "href": "api/BigBook.EventArgs.ChangedEventArgs.html",
    "title": "Class ChangedEventArgs | Big Book of DataTypes API Reference",
    "keywords": "Class ChangedEventArgs Namespace BigBook.EventArgs Assembly BigBook.dll Changed event args public class ChangedEventArgs : BaseEventArgs Inheritance object EventArgs BaseEventArgs ChangedEventArgs Inherited Members BaseEventArgs.Content BaseEventArgs.Stop EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/BigBook.EventArgs.DeletedEventArgs.html": {
    "href": "api/BigBook.EventArgs.DeletedEventArgs.html",
    "title": "Class DeletedEventArgs | Big Book of DataTypes API Reference",
    "keywords": "Class DeletedEventArgs Namespace BigBook.EventArgs Assembly BigBook.dll Deleted event args public class DeletedEventArgs : BaseEventArgs Inheritance object EventArgs BaseEventArgs DeletedEventArgs Inherited Members BaseEventArgs.Content BaseEventArgs.Stop EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/BigBook.EventArgs.DeletingEventArgs.html": {
    "href": "api/BigBook.EventArgs.DeletingEventArgs.html",
    "title": "Class DeletingEventArgs | Big Book of DataTypes API Reference",
    "keywords": "Class DeletingEventArgs Namespace BigBook.EventArgs Assembly BigBook.dll Deleting event args public class DeletingEventArgs : BaseEventArgs Inheritance object EventArgs BaseEventArgs DeletingEventArgs Inherited Members BaseEventArgs.Content BaseEventArgs.Stop EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/BigBook.EventArgs.LoadedEventArgs.html": {
    "href": "api/BigBook.EventArgs.LoadedEventArgs.html",
    "title": "Class LoadedEventArgs | Big Book of DataTypes API Reference",
    "keywords": "Class LoadedEventArgs Namespace BigBook.EventArgs Assembly BigBook.dll Loaded event args public class LoadedEventArgs : BaseEventArgs Inheritance object EventArgs BaseEventArgs LoadedEventArgs Inherited Members BaseEventArgs.Content BaseEventArgs.Stop EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/BigBook.EventArgs.LoadingEventArgs.html": {
    "href": "api/BigBook.EventArgs.LoadingEventArgs.html",
    "title": "Class LoadingEventArgs | Big Book of DataTypes API Reference",
    "keywords": "Class LoadingEventArgs Namespace BigBook.EventArgs Assembly BigBook.dll Loading event args public class LoadingEventArgs : BaseEventArgs Inheritance object EventArgs BaseEventArgs LoadingEventArgs Inherited Members BaseEventArgs.Content BaseEventArgs.Stop EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/BigBook.EventArgs.OnEndEventArgs.html": {
    "href": "api/BigBook.EventArgs.OnEndEventArgs.html",
    "title": "Class OnEndEventArgs | Big Book of DataTypes API Reference",
    "keywords": "Class OnEndEventArgs Namespace BigBook.EventArgs Assembly BigBook.dll On end event args public class OnEndEventArgs : BaseEventArgs Inheritance object EventArgs BaseEventArgs OnEndEventArgs Inherited Members BaseEventArgs.Content BaseEventArgs.Stop EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/BigBook.EventArgs.OnErrorEventArgs.html": {
    "href": "api/BigBook.EventArgs.OnErrorEventArgs.html",
    "title": "Class OnErrorEventArgs | Big Book of DataTypes API Reference",
    "keywords": "Class OnErrorEventArgs Namespace BigBook.EventArgs Assembly BigBook.dll On error event args public class OnErrorEventArgs : BaseEventArgs Inheritance object EventArgs BaseEventArgs OnErrorEventArgs Inherited Members BaseEventArgs.Content BaseEventArgs.Stop EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/BigBook.EventArgs.OnStartEventArgs.html": {
    "href": "api/BigBook.EventArgs.OnStartEventArgs.html",
    "title": "Class OnStartEventArgs | Big Book of DataTypes API Reference",
    "keywords": "Class OnStartEventArgs Namespace BigBook.EventArgs Assembly BigBook.dll On start event args public class OnStartEventArgs : BaseEventArgs Inheritance object EventArgs BaseEventArgs OnStartEventArgs Inherited Members BaseEventArgs.Content BaseEventArgs.Stop EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/BigBook.EventArgs.SavedEventArgs.html": {
    "href": "api/BigBook.EventArgs.SavedEventArgs.html",
    "title": "Class SavedEventArgs | Big Book of DataTypes API Reference",
    "keywords": "Class SavedEventArgs Namespace BigBook.EventArgs Assembly BigBook.dll Saved event args public class SavedEventArgs : BaseEventArgs Inheritance object EventArgs BaseEventArgs SavedEventArgs Inherited Members BaseEventArgs.Content BaseEventArgs.Stop EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/BigBook.EventArgs.SavingEventArgs.html": {
    "href": "api/BigBook.EventArgs.SavingEventArgs.html",
    "title": "Class SavingEventArgs | Big Book of DataTypes API Reference",
    "keywords": "Class SavingEventArgs Namespace BigBook.EventArgs Assembly BigBook.dll Saving event args public class SavingEventArgs : BaseEventArgs Inheritance object EventArgs BaseEventArgs SavingEventArgs Inherited Members BaseEventArgs.Content BaseEventArgs.Stop EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/BigBook.EventArgs.html": {
    "href": "api/BigBook.EventArgs.html",
    "title": "Namespace BigBook.EventArgs | Big Book of DataTypes API Reference",
    "keywords": "Namespace BigBook.EventArgs Classes BaseEventArgs Base event args for the events used in the system ChangedEventArgs Changed event args DeletedEventArgs Deleted event args DeletingEventArgs Deleting event args LoadedEventArgs Loaded event args LoadingEventArgs Loading event args OnEndEventArgs On end event args OnErrorEventArgs On error event args OnStartEventArgs On start event args SavedEventArgs Saved event args SavingEventArgs Saving event args"
  },
  "api/BigBook.ExtensionMethods.Utils.DefaultValueLookup.html": {
    "href": "api/BigBook.ExtensionMethods.Utils.DefaultValueLookup.html",
    "title": "Class DefaultValueLookup | Big Book of DataTypes API Reference",
    "keywords": "Class DefaultValueLookup Namespace BigBook.ExtensionMethods.Utils Assembly BigBook.dll Default value lookup public static class DefaultValueLookup Inheritance object DefaultValueLookup Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Values The values public static Dictionary<int, object?> Values Field Value Dictionary<int, object>"
  },
  "api/BigBook.ExtensionMethods.Utils.html": {
    "href": "api/BigBook.ExtensionMethods.Utils.html",
    "title": "Namespace BigBook.ExtensionMethods.Utils | Big Book of DataTypes API Reference",
    "keywords": "Namespace BigBook.ExtensionMethods.Utils Classes DefaultValueLookup Default value lookup"
  },
  "api/BigBook.Formatters.GenericStringFormatter.html": {
    "href": "api/BigBook.Formatters.GenericStringFormatter.html",
    "title": "Class GenericStringFormatter | Big Book of DataTypes API Reference",
    "keywords": "Class GenericStringFormatter Namespace BigBook.Formatters Assembly BigBook.dll Generic string formatter public class GenericStringFormatter : IFormatProvider, ICustomFormatter, IStringFormatter Inheritance object GenericStringFormatter Implements IFormatProvider ICustomFormatter IStringFormatter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GenericStringFormatter() Constructor public GenericStringFormatter() GenericStringFormatter(char, char, char) Initializes a new instance of the GenericStringFormatter class. public GenericStringFormatter(char digitChar, char alphaChar, char escapeChar) Parameters digitChar char The digit character. alphaChar char The alpha character. escapeChar char The escape character. Properties AlphaChar Represents alpha characters (defaults to @) public char AlphaChar { get; protected set; } Property Value char DigitChar Represents digits (defaults to #) public char DigitChar { get; protected set; } Property Value char EscapeChar Represents the escape character (defaults to ) public char EscapeChar { get; protected set; } Property Value char Methods Format(string, object, IFormatProvider) Formats the string public string Format(string format, object arg, IFormatProvider formatProvider) Parameters format string Format to use arg object Argument object to use formatProvider IFormatProvider Format provider to use Returns string The formatted string Format(string?, string) Formats the string based on the pattern public string Format(string? input, string formatPattern) Parameters input string Input string formatPattern string Format pattern Returns string The formatted string GetFormat(Type) Gets the format associated with the type public object? GetFormat(Type formatType) Parameters formatType Type Format type Returns object The appropriate formatter based on the type GetMatchingInput(string?, char, out char) Gets matching input protected string? GetMatchingInput(string? input, char formatChar, out char matchChar) Parameters input string Input string formatChar char Current format character matchChar char The matching character found Returns string The remainder of the input string left IsValid(string) Checks if the format pattern is valid protected bool IsValid(string formatPattern) Parameters formatPattern string Format pattern Returns bool Returns true if it's valid, otherwise false"
  },
  "api/BigBook.Formatters.Interfaces.IStringFormatter.html": {
    "href": "api/BigBook.Formatters.Interfaces.IStringFormatter.html",
    "title": "Interface IStringFormatter | Big Book of DataTypes API Reference",
    "keywords": "Interface IStringFormatter Namespace BigBook.Formatters.Interfaces Assembly BigBook.dll String formatter public interface IStringFormatter Methods Format(string?, string) Formats the string based on the pattern string Format(string? input, string formatPattern) Parameters input string Input string formatPattern string Format pattern Returns string The formatted string"
  },
  "api/BigBook.Formatters.Interfaces.html": {
    "href": "api/BigBook.Formatters.Interfaces.html",
    "title": "Namespace BigBook.Formatters.Interfaces | Big Book of DataTypes API Reference",
    "keywords": "Namespace BigBook.Formatters.Interfaces Interfaces IStringFormatter String formatter"
  },
  "api/BigBook.Formatters.html": {
    "href": "api/BigBook.Formatters.html",
    "title": "Namespace BigBook.Formatters | Big Book of DataTypes API Reference",
    "keywords": "Namespace BigBook.Formatters Classes GenericStringFormatter Generic string formatter"
  },
  "api/BigBook.Fraction.html": {
    "href": "api/BigBook.Fraction.html",
    "title": "Class Fraction | Big Book of DataTypes API Reference",
    "keywords": "Class Fraction Namespace BigBook Assembly BigBook.dll Represents a fraction public class Fraction Inheritance object Fraction Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Fraction(decimal, decimal) Constructor public Fraction(decimal numerator, decimal denominator) Parameters numerator decimal Numerator denominator decimal Denominator Fraction(double, double) Constructor public Fraction(double numerator, double denominator) Parameters numerator double Numerator denominator double Denominator Fraction(int, int) Constructor public Fraction(int numerator, int denominator) Parameters numerator int Numerator denominator int Denominator Fraction(float, float) Constructor public Fraction(float numerator, float denominator) Parameters numerator float Numerator denominator float Denominator Exceptions ArgumentException denominator Properties Denominator Denominator of the fraction public int Denominator { get; set; } Property Value int Numerator Numerator of the faction public int Numerator { get; set; } Property Value int Methods Add(Fraction, Fraction) Adds the specified values. public static Fraction Add(Fraction left, Fraction right) Parameters left Fraction The left. right Fraction The right. Returns Fraction The result Divide(Fraction, Fraction) Divides the specified values. public static Fraction Divide(Fraction left, Fraction right) Parameters left Fraction The left. right Fraction The right. Returns Fraction The result Equals(object?) Determines if the fractions are equal public override bool Equals(object? obj) Parameters obj object object to check Returns bool True if they are, false otherwise GetHashCode() Gets the hash code of the fraction public override int GetHashCode() Returns int The hash code of the fraction Inverse() Returns the inverse of the fraction public Fraction Inverse() Returns Fraction The inverse Multiply(Fraction, Fraction) Multiplies the specified values. public static Fraction Multiply(Fraction left, Fraction right) Parameters left Fraction The left. right Fraction The right. Returns Fraction The result Negate(Fraction) Negates the specified item. public static Fraction Negate(Fraction item) Parameters item Fraction The item. Returns Fraction The result Reduce() Reduces the fraction (finds the greatest common denominator and divides the numerator/denominator by it). public void Reduce() Subtract(Fraction, Fraction) Subtracts the specified values. public static Fraction Subtract(Fraction left, Fraction right) Parameters left Fraction The left. right Fraction The right. Returns Fraction The result ToDecimal() Converts to decimal. public decimal ToDecimal() Returns decimal The decimal value. ToDouble() Converts to double. public double ToDouble() Returns double The value as a double ToFraction(decimal) Converts to fraction. public static Fraction ToFraction(decimal value) Parameters value decimal Returns Fraction The value as a fraction. ToFraction(double) Converts to fraction. public static Fraction ToFraction(double value) Parameters value double Returns Fraction The value as a fraction. ToFraction(int) Converts to fraction. public static Fraction ToFraction(int value) Parameters value int Returns Fraction The value as a fraction. ToFraction(float) Converts to fraction. public static Fraction ToFraction(float value) Parameters value float Returns Fraction The value as a fraction. ToFraction(uint) Converts to fraction. public static Fraction ToFraction(uint value) Parameters value uint Returns Fraction The value as a fraction. ToSingle() Converts to single. public float ToSingle() Returns float The value as a single. ToString() Displays the fraction as a string public override string ToString() Returns string The fraction as a string Operators operator +(Fraction?, Fraction?) Addition public static Fraction operator +(Fraction? first, Fraction? second) Parameters first Fraction First fraction second Fraction Second fraction Returns Fraction The added fraction operator /(Fraction, Fraction) Division public static Fraction operator /(Fraction first, Fraction second) Parameters first Fraction First item second Fraction Second item Returns Fraction The divided fraction operator ==(Fraction?, Fraction?) Equals operator public static bool operator ==(Fraction? first, Fraction? second) Parameters first Fraction First item second Fraction Second item Returns bool True if they are, false otherwise operator ==(Fraction?, double) Equals operator public static bool operator ==(Fraction? first, double second) Parameters first Fraction First item second double Second item Returns bool True if they are, false otherwise operator ==(double, Fraction) Equals operator public static bool operator ==(double first, Fraction second) Parameters first double First item second Fraction Second item Returns bool True if they are, false otherwise implicit operator decimal(Fraction?) Converts the fraction to a decimal public static implicit operator decimal(Fraction? fraction) Parameters fraction Fraction Fraction Returns decimal The fraction as a decimal implicit operator double(Fraction?) Converts the fraction to a double public static implicit operator double(Fraction? fraction) Parameters fraction Fraction Fraction Returns double The fraction as a double implicit operator float(Fraction) Converts the fraction to a float public static implicit operator float(Fraction fraction) Parameters fraction Fraction Fraction Returns float The fraction as a float implicit operator string(Fraction) Converts the fraction to a string public static implicit operator string(Fraction fraction) Parameters fraction Fraction Fraction Returns string The fraction as a string implicit operator Fraction(decimal) Converts the decimal to a fraction public static implicit operator Fraction(decimal fraction) Parameters fraction decimal Fraction Returns Fraction The decimal as a fraction implicit operator Fraction(double) Converts the double to a fraction public static implicit operator Fraction(double fraction) Parameters fraction double Fraction Returns Fraction The double as a fraction implicit operator Fraction(int) Converts the int to a fraction public static implicit operator Fraction(int fraction) Parameters fraction int Fraction Returns Fraction The int as a fraction implicit operator Fraction(float) Converts the float to a fraction public static implicit operator Fraction(float fraction) Parameters fraction float Fraction Returns Fraction The float as a fraction implicit operator Fraction(uint) Converts the uint to a fraction public static implicit operator Fraction(uint fraction) Parameters fraction uint Fraction Returns Fraction The uint as a fraction operator !=(Fraction, Fraction) Not equals operator public static bool operator !=(Fraction first, Fraction second) Parameters first Fraction First item second Fraction Second item Returns bool True if they are, false otherwise operator !=(Fraction, double) Not equals operator public static bool operator !=(Fraction first, double second) Parameters first Fraction First item second double Second item Returns bool True if they are, false otherwise operator !=(double, Fraction) Not equals operator public static bool operator !=(double first, Fraction second) Parameters first double First item second Fraction Second item Returns bool True if they are, false otherwise operator *(Fraction, Fraction) Multiplication public static Fraction operator *(Fraction first, Fraction second) Parameters first Fraction First fraction second Fraction Second fraction Returns Fraction The resulting fraction operator -(Fraction, Fraction) Subtraction public static Fraction operator -(Fraction first, Fraction second) Parameters first Fraction First fraction second Fraction Second fraction Returns Fraction The subtracted fraction operator -(Fraction) Negation of the fraction public static Fraction operator -(Fraction first) Parameters first Fraction Fraction to negate Returns Fraction The negated fraction"
  },
  "api/BigBook.Graph-1.html": {
    "href": "api/BigBook.Graph-1.html",
    "title": "Class Graph<T> | Big Book of DataTypes API Reference",
    "keywords": "Class Graph<T> Namespace BigBook Assembly BigBook.dll Class used to represent a graph public class Graph<T> : IEnumerable<Vertex<T>>, IEnumerable Type Parameters T The data type stored in the graph Inheritance object Graph<T> Implements IEnumerable<Vertex<T>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Graph() Initializes a new instance of the Graph<T> class. public Graph() Properties Vertices Gets the vertices. public List<Vertex<T>> Vertices { get; } Property Value List<Vertex<T>> The vertices. Methods AddEdge(Vertex<T>, Vertex<T>) Adds the edge. public Edge<T>? AddEdge(Vertex<T> source, Vertex<T> sink) Parameters source Vertex<T> The source. sink Vertex<T> The sink. Returns Edge<T> The new edge AddVertex(T) Adds the vertex. public Vertex<T> AddVertex(T data) Parameters data T The data. Returns Vertex<T> The new vertex Copy() Copies this instance. public Graph<T> Copy() Returns Graph<T> A copy of this graph GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<Vertex<T>> GetEnumerator() Returns IEnumerator<Vertex<T>> An enumerator that can be used to iterate through the collection. RemoveVertex(Vertex<T>) Removes the vertex. public Graph<T> RemoveVertex(Vertex<T> vertex) Parameters vertex Vertex<T> The vertex. Returns Graph<T> This"
  },
  "api/BigBook.IO.BitReader.html": {
    "href": "api/BigBook.IO.BitReader.html",
    "title": "Class BitReader | Big Book of DataTypes API Reference",
    "keywords": "Class BitReader Namespace BigBook.IO Assembly BigBook.dll Bit reader public class BitReader : IDisposable Inheritance object BitReader Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BitReader(byte[]) Initializes a new instance of the BitReader class. public BitReader(byte[] byteArray) Parameters byteArray byte[] The byte array. BitReader(Stream) Initializes a new instance of the BitReader class. public BitReader(Stream stream) Parameters stream Stream The stream. Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Dispose(bool) Releases unmanaged and - optionally - managed resources. protected virtual void Dispose(bool managed) Parameters managed bool true to release both managed and unmanaged resources; false to release only unmanaged resources. ReadBit(bool) Reads the next bit. public bool? ReadBit(bool bigEndian = false) Parameters bigEndian bool if set to true [big endian]. Returns bool? The next bit value in the stream Skip(int) Skips the specified bit count. public void Skip(int bitCount) Parameters bitCount int The bit count."
  },
  "api/BigBook.IO.Converters.BaseClasses.EndianBitConverterBase.html": {
    "href": "api/BigBook.IO.Converters.BaseClasses.EndianBitConverterBase.html",
    "title": "Class EndianBitConverterBase | Big Book of DataTypes API Reference",
    "keywords": "Class EndianBitConverterBase Namespace BigBook.IO.Converters.BaseClasses Assembly BigBook.dll Endian bit converter base class public abstract class EndianBitConverterBase Inheritance object EndianBitConverterBase Derived BigEndianBitConverter LittleEndianBitConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BigEndian Gets the big endian bit converter. public static EndianBitConverterBase BigEndian { get; } Property Value EndianBitConverterBase The big endian bit converter. IsLittleEndian Gets a value indicating whether this instance is little endian. public abstract bool IsLittleEndian { get; } Property Value bool true if this instance is little endian; otherwise, false. LittleEndian Gets the little endian bit converter. public static EndianBitConverterBase LittleEndian { get; } Property Value EndianBitConverterBase The little endian bit converter. Methods CopyBytes(bool, byte[], int) Copies the bytes. public void CopyBytes(bool value, byte[] buffer, int index) Parameters value bool if set to true [value]. buffer byte[] The buffer. index int The index. CopyBytes(char, byte[], int) Copies the bytes. public void CopyBytes(char value, byte[] buffer, int index) Parameters value char The value. buffer byte[] The buffer. index int The index. CopyBytes(decimal, byte[], int) Copies the bytes. public void CopyBytes(decimal value, byte[] buffer, int index) Parameters value decimal The value. buffer byte[] The buffer. index int The index. CopyBytes(double, byte[], int) Copies the bytes. public void CopyBytes(double value, byte[] buffer, int index) Parameters value double The value. buffer byte[] The buffer. index int The index. CopyBytes(short, byte[], int) Copies the bytes. public void CopyBytes(short value, byte[] buffer, int index) Parameters value short The value. buffer byte[] The buffer. index int The index. CopyBytes(int, byte[], int) Copies the bytes. public void CopyBytes(int value, byte[] buffer, int index) Parameters value int The value. buffer byte[] The buffer. index int The index. CopyBytes(long, byte[], int) Copies the bytes. public void CopyBytes(long value, byte[] buffer, int index) Parameters value long The value. buffer byte[] The buffer. index int The index. CopyBytes(float, byte[], int) Copies the bytes. public void CopyBytes(float value, byte[] buffer, int index) Parameters value float The value. buffer byte[] The buffer. index int The index. CopyBytes(ushort, byte[], int) Copies the bytes. public void CopyBytes(ushort value, byte[] buffer, int index) Parameters value ushort The value. buffer byte[] The buffer. index int The index. CopyBytes(uint, byte[], int) Copies the bytes. public void CopyBytes(uint value, byte[] buffer, int index) Parameters value uint The value. buffer byte[] The buffer. index int The index. CopyBytes(ulong, byte[], int) Copies the bytes. public void CopyBytes(ulong value, byte[] buffer, int index) Parameters value ulong The value. buffer byte[] The buffer. index int The index. CopyBytesImpl(long, int, byte[], int) Copies the bytes implementation. protected abstract void CopyBytesImpl(long value, int bytes, byte[] buffer, int index) Parameters value long The value. bytes int The bytes. buffer byte[] The buffer. index int The index. DoubleToLong(double) Converts a double to a long. public static long DoubleToLong(double value) Parameters value double The value. Returns long The resulting long. FloatToInt(float) Converts a float to an integer public static int FloatToInt(float value) Parameters value float Float value Returns int The integer equivalent. FromBytes(byte[], int, int) Converts a byte array to a long. protected abstract long FromBytes(byte[] value, int startIndex, int bytesToConvert) Parameters value byte[] The value. startIndex int The start index. bytesToConvert int The bytes to convert. Returns long The resulting long. GetBytes(bool) Gets the bytes. public static byte[] GetBytes(bool value) Parameters value bool if set to true [value]. Returns byte[] Gets the resulting byte array. GetBytes(char) Gets the bytes. public byte[] GetBytes(char value) Parameters value char The value. Returns byte[] The resulting byte array. GetBytes(decimal) Gets the bytes. public byte[] GetBytes(decimal value) Parameters value decimal The value. Returns byte[] The resulting byte array. GetBytes(double) Gets the bytes. public byte[] GetBytes(double value) Parameters value double The value. Returns byte[] The resulting byte array. GetBytes(short) Gets the bytes. public byte[] GetBytes(short value) Parameters value short The value. Returns byte[] The resulting byte array. GetBytes(int) Gets the bytes. public byte[] GetBytes(int value) Parameters value int The value. Returns byte[] The resulting byte array. GetBytes(long) Gets the bytes. public byte[] GetBytes(long value) Parameters value long The value. Returns byte[] The resulting byte array. GetBytes(float) Gets the bytes. public byte[] GetBytes(float value) Parameters value float The value. Returns byte[] The resulting byte array. GetBytes(ushort) Gets the bytes. public byte[] GetBytes(ushort value) Parameters value ushort The value. Returns byte[] The resulting byte array. GetBytes(uint) Gets the bytes. public byte[] GetBytes(uint value) Parameters value uint The value. Returns byte[] The resulting byte array. GetBytes(ulong) Gets the bytes. public byte[] GetBytes(ulong value) Parameters value ulong The value. Returns byte[] The resulting byte array. IntToFloat(int) Converts an integer to a float. public static float IntToFloat(int value) Parameters value int The integer value Returns float The float value. LongToDouble(long) Converts a long to a double. public static double LongToDouble(long value) Parameters value long The value. Returns double The resulting double. ToBoolean(byte[], int) To the boolean. public static bool ToBoolean(byte[] value, int startIndex) Parameters value byte[] The value. startIndex int The start index. Returns bool The resulting boolean. Exceptions ArgumentOutOfRangeException ToChar(byte[], int) To the character. public char ToChar(byte[] value, int startIndex) Parameters value byte[] The value. startIndex int The start index. Returns char The resulting character. ToDecimal(byte[], int) To the decimal. public decimal ToDecimal(byte[] value, int startIndex) Parameters value byte[] The value. startIndex int The start index. Returns decimal The resulting decimal value ToDouble(byte[], int) To the double. public double ToDouble(byte[] value, int startIndex) Parameters value byte[] The value. startIndex int The start index. Returns double The resulting double. ToFloat(byte[], int) To the float. public float ToFloat(byte[] value, int startIndex) Parameters value byte[] The value. startIndex int The start index. Returns float The resulting float. ToInt(byte[], int) Converts the string representation of a number to an integer. public int ToInt(byte[] value, int startIndex) Parameters value byte[] The value. startIndex int The start index. Returns int The resulting integer. ToLong(byte[], int) To the long. public long ToLong(byte[] value, int startIndex) Parameters value byte[] The value. startIndex int The start index. Returns long The resulting long. ToShort(byte[], int) To the short. public short ToShort(byte[] value, int startIndex) Parameters value byte[] The value. startIndex int The start index. Returns short The resulting short. ToString(byte[]) Returns a string that represents this instance. public static string ToString(byte[] value) Parameters value byte[] The value. Returns string A string that represents this instance. ToString(byte[], int) Returns a string that represents this instance. public static string ToString(byte[] value, int startIndex) Parameters value byte[] The value. startIndex int The start index. Returns string A string that represents this instance. ToString(byte[], int, int) Returns a string that represents this instance. public static string ToString(byte[] value, int startIndex, int length) Parameters value byte[] The value. startIndex int The start index. length int The length. Returns string A string that represents this instance. ToUnsignedInteger(byte[], int) To the unsigned integer. public uint ToUnsignedInteger(byte[] value, int startIndex) Parameters value byte[] The value. startIndex int The start index. Returns uint The resulting unsigned integer ToUnsignedLong(byte[], int) To the unsigned long. public ulong ToUnsignedLong(byte[] value, int startIndex) Parameters value byte[] The value. startIndex int The start index. Returns ulong The resulting unsigned long. ToUnsignedShort(byte[], int) To the unsigned short. public ushort ToUnsignedShort(byte[] value, int startIndex) Parameters value byte[] The value. startIndex int The start index. Returns ushort The resulting unsigned short."
  },
  "api/BigBook.IO.Converters.BaseClasses.html": {
    "href": "api/BigBook.IO.Converters.BaseClasses.html",
    "title": "Namespace BigBook.IO.Converters.BaseClasses | Big Book of DataTypes API Reference",
    "keywords": "Namespace BigBook.IO.Converters.BaseClasses Classes EndianBitConverterBase Endian bit converter base class"
  },
  "api/BigBook.IO.Converters.BigEndianBitConverter.html": {
    "href": "api/BigBook.IO.Converters.BigEndianBitConverter.html",
    "title": "Class BigEndianBitConverter | Big Book of DataTypes API Reference",
    "keywords": "Class BigEndianBitConverter Namespace BigBook.IO.Converters Assembly BigBook.dll Big endian bit converter public class BigEndianBitConverter : EndianBitConverterBase Inheritance object EndianBitConverterBase BigEndianBitConverter Inherited Members EndianBitConverterBase.BigEndian EndianBitConverterBase.LittleEndian EndianBitConverterBase.DoubleToLong(double) EndianBitConverterBase.FloatToInt(float) EndianBitConverterBase.GetBytes(bool) EndianBitConverterBase.IntToFloat(int) EndianBitConverterBase.LongToDouble(long) EndianBitConverterBase.ToBoolean(byte[], int) EndianBitConverterBase.ToString(byte[]) EndianBitConverterBase.ToString(byte[], int) EndianBitConverterBase.ToString(byte[], int, int) EndianBitConverterBase.CopyBytes(decimal, byte[], int) EndianBitConverterBase.CopyBytes(bool, byte[], int) EndianBitConverterBase.CopyBytes(char, byte[], int) EndianBitConverterBase.CopyBytes(double, byte[], int) EndianBitConverterBase.CopyBytes(short, byte[], int) EndianBitConverterBase.CopyBytes(int, byte[], int) EndianBitConverterBase.CopyBytes(long, byte[], int) EndianBitConverterBase.CopyBytes(float, byte[], int) EndianBitConverterBase.CopyBytes(ushort, byte[], int) EndianBitConverterBase.CopyBytes(uint, byte[], int) EndianBitConverterBase.CopyBytes(ulong, byte[], int) EndianBitConverterBase.GetBytes(decimal) EndianBitConverterBase.GetBytes(char) EndianBitConverterBase.GetBytes(double) EndianBitConverterBase.GetBytes(short) EndianBitConverterBase.GetBytes(int) EndianBitConverterBase.GetBytes(long) EndianBitConverterBase.GetBytes(float) EndianBitConverterBase.GetBytes(ushort) EndianBitConverterBase.GetBytes(uint) EndianBitConverterBase.GetBytes(ulong) EndianBitConverterBase.ToChar(byte[], int) EndianBitConverterBase.ToDecimal(byte[], int) EndianBitConverterBase.ToDouble(byte[], int) EndianBitConverterBase.ToFloat(byte[], int) EndianBitConverterBase.ToInt(byte[], int) EndianBitConverterBase.ToLong(byte[], int) EndianBitConverterBase.ToShort(byte[], int) EndianBitConverterBase.ToUnsignedInteger(byte[], int) EndianBitConverterBase.ToUnsignedLong(byte[], int) EndianBitConverterBase.ToUnsignedShort(byte[], int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsLittleEndian Gets a value indicating whether this instance is little endian. public override bool IsLittleEndian { get; } Property Value bool true if this instance is little endian; otherwise, false. Methods CopyBytesImpl(long, int, byte[], int) Copies the bytes implementation. protected override void CopyBytesImpl(long value, int bytes, byte[] buffer, int index) Parameters value long The value. bytes int The bytes. buffer byte[] The buffer. index int The index. FromBytes(byte[], int, int) Converts a byte array to a long. protected override long FromBytes(byte[] value, int startIndex, int bytesToConvert) Parameters value byte[] The value. startIndex int The start index. bytesToConvert int The bytes to convert. Returns long The resulting long. See Also EndianBitConverterBase"
  },
  "api/BigBook.IO.Converters.LittleEndianBitConverter.html": {
    "href": "api/BigBook.IO.Converters.LittleEndianBitConverter.html",
    "title": "Class LittleEndianBitConverter | Big Book of DataTypes API Reference",
    "keywords": "Class LittleEndianBitConverter Namespace BigBook.IO.Converters Assembly BigBook.dll Little endian bit converter public class LittleEndianBitConverter : EndianBitConverterBase Inheritance object EndianBitConverterBase LittleEndianBitConverter Inherited Members EndianBitConverterBase.BigEndian EndianBitConverterBase.LittleEndian EndianBitConverterBase.DoubleToLong(double) EndianBitConverterBase.FloatToInt(float) EndianBitConverterBase.GetBytes(bool) EndianBitConverterBase.IntToFloat(int) EndianBitConverterBase.LongToDouble(long) EndianBitConverterBase.ToBoolean(byte[], int) EndianBitConverterBase.ToString(byte[]) EndianBitConverterBase.ToString(byte[], int) EndianBitConverterBase.ToString(byte[], int, int) EndianBitConverterBase.CopyBytes(decimal, byte[], int) EndianBitConverterBase.CopyBytes(bool, byte[], int) EndianBitConverterBase.CopyBytes(char, byte[], int) EndianBitConverterBase.CopyBytes(double, byte[], int) EndianBitConverterBase.CopyBytes(short, byte[], int) EndianBitConverterBase.CopyBytes(int, byte[], int) EndianBitConverterBase.CopyBytes(long, byte[], int) EndianBitConverterBase.CopyBytes(float, byte[], int) EndianBitConverterBase.CopyBytes(ushort, byte[], int) EndianBitConverterBase.CopyBytes(uint, byte[], int) EndianBitConverterBase.CopyBytes(ulong, byte[], int) EndianBitConverterBase.GetBytes(decimal) EndianBitConverterBase.GetBytes(char) EndianBitConverterBase.GetBytes(double) EndianBitConverterBase.GetBytes(short) EndianBitConverterBase.GetBytes(int) EndianBitConverterBase.GetBytes(long) EndianBitConverterBase.GetBytes(float) EndianBitConverterBase.GetBytes(ushort) EndianBitConverterBase.GetBytes(uint) EndianBitConverterBase.GetBytes(ulong) EndianBitConverterBase.ToChar(byte[], int) EndianBitConverterBase.ToDecimal(byte[], int) EndianBitConverterBase.ToDouble(byte[], int) EndianBitConverterBase.ToFloat(byte[], int) EndianBitConverterBase.ToInt(byte[], int) EndianBitConverterBase.ToLong(byte[], int) EndianBitConverterBase.ToShort(byte[], int) EndianBitConverterBase.ToUnsignedInteger(byte[], int) EndianBitConverterBase.ToUnsignedLong(byte[], int) EndianBitConverterBase.ToUnsignedShort(byte[], int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsLittleEndian Gets a value indicating whether this instance is little endian. public override bool IsLittleEndian { get; } Property Value bool true if this instance is little endian; otherwise, false. Methods CopyBytesImpl(long, int, byte[], int) Copies the bytes implementation. protected override void CopyBytesImpl(long value, int bytes, byte[] buffer, int index) Parameters value long The value. bytes int The bytes. buffer byte[] The buffer. index int The index. FromBytes(byte[], int, int) Converts a byte array to a long. protected override long FromBytes(byte[] value, int startIndex, int bytesToConvert) Parameters value byte[] The value. startIndex int The start index. bytesToConvert int The bytes to convert. Returns long The resulting long. See Also EndianBitConverterBase"
  },
  "api/BigBook.IO.Converters.Structs.IntFloatUnion.html": {
    "href": "api/BigBook.IO.Converters.Structs.IntFloatUnion.html",
    "title": "Struct IntFloatUnion | Big Book of DataTypes API Reference",
    "keywords": "Struct IntFloatUnion Namespace BigBook.IO.Converters.Structs Assembly BigBook.dll Int/float union struct. public struct IntFloatUnion : IEquatable<IntFloatUnion> Implements IEquatable<IntFloatUnion> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors IntFloatUnion(int) Initializes a new instance of the IntFloatUnion struct. public IntFloatUnion(int integerValue) Parameters integerValue int The integer value. IntFloatUnion(float) Initializes a new instance of the IntFloatUnion struct. public IntFloatUnion(float floatValue) Parameters floatValue float The float value. Fields FloatValue The float value public readonly float FloatValue Field Value float IntegerValue The integer value public readonly int IntegerValue Field Value int Methods Equals(IntFloatUnion) Indicates whether the current object is equal to another object of the same type. public bool Equals(IntFloatUnion other) Parameters other IntFloatUnion An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object, is equal to this instance. public override bool Equals(object obj) Parameters obj object The object to compare with this instance. Returns bool true if the specified object is equal to this instance; otherwise, false. GetHashCode() Returns a hash code for this instance. public override int GetHashCode() Returns int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Operators operator ==(IntFloatUnion, IntFloatUnion) Implements the operator ==. public static bool operator ==(IntFloatUnion union1, IntFloatUnion union2) Parameters union1 IntFloatUnion The union1. union2 IntFloatUnion The union2. Returns bool The result of the operator. operator !=(IntFloatUnion, IntFloatUnion) Implements the operator !=. public static bool operator !=(IntFloatUnion union1, IntFloatUnion union2) Parameters union1 IntFloatUnion The union1. union2 IntFloatUnion The union2. Returns bool The result of the operator."
  },
  "api/BigBook.IO.Converters.Structs.html": {
    "href": "api/BigBook.IO.Converters.Structs.html",
    "title": "Namespace BigBook.IO.Converters.Structs | Big Book of DataTypes API Reference",
    "keywords": "Namespace BigBook.IO.Converters.Structs Structs IntFloatUnion Int/float union struct."
  },
  "api/BigBook.IO.Converters.html": {
    "href": "api/BigBook.IO.Converters.html",
    "title": "Namespace BigBook.IO.Converters | Big Book of DataTypes API Reference",
    "keywords": "Namespace BigBook.IO.Converters Classes BigEndianBitConverter Big endian bit converter LittleEndianBitConverter Little endian bit converter"
  },
  "api/BigBook.IO.EndianBinaryReader.html": {
    "href": "api/BigBook.IO.EndianBinaryReader.html",
    "title": "Class EndianBinaryReader | Big Book of DataTypes API Reference",
    "keywords": "Class EndianBinaryReader Namespace BigBook.IO Assembly BigBook.dll Endian binary reader public class EndianBinaryReader : IDisposable Inheritance object EndianBinaryReader Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EndianBinaryReader(EndianBitConverterBase, Stream) Initializes a new instance of the EndianBinaryReader class. public EndianBinaryReader(EndianBitConverterBase bitConverter, Stream stream) Parameters bitConverter EndianBitConverterBase The bit converter. stream Stream The stream. EndianBinaryReader(EndianBitConverterBase, Stream, Encoding) Initializes a new instance of the EndianBinaryReader class. public EndianBinaryReader(EndianBitConverterBase bitConverter, Stream stream, Encoding encoding) Parameters bitConverter EndianBitConverterBase The bit converter. stream Stream The stream. encoding Encoding The encoding. Exceptions ArgumentException Stream is not readable Properties BaseStream Gets the underlying stream of the EndianBinaryReader. public Stream? BaseStream { get; } Property Value Stream BitConverter Gets the bit converter used to read values from the stream. public EndianBitConverterBase BitConverter { get; } Property Value EndianBitConverterBase Encoding Gets the encoding used to read strings public Encoding Encoding { get; } Property Value Encoding Methods Close() Closes the reader, including the underlying stream. public void Close() Dispose() Disposes of the underlying stream. public void Dispose() Dispose(bool) Releases unmanaged and - optionally - managed resources. protected virtual void Dispose(bool managed) Parameters managed bool true to release both managed and unmanaged resources; false to release only unmanaged resources. Read() Reads this instance. public int Read() Returns int The resulting int. Read(byte[], int, int) Reads the specified buffer. public int Read(byte[] buffer, int index, int count) Parameters buffer byte[] The buffer. index int The index. count int The count. Returns int The resulting integer. Exceptions NullReferenceException Base stream is currently null. Read(char[], int, int) Reads the specified data. public int Read(char[] data, int index, int count) Parameters data char[] The data. index int The index. count int The count. Returns int The resulting integer Exceptions NullReferenceException Base stream is currently null. Read7BitEncodedInt() Read7s the bit encoded int. public int Read7BitEncodedInt() Returns int The resulting int. Exceptions NullReferenceException Base stream is currently null. EndOfStreamException IOException Invalid 7-bit encoded integer in stream. ReadBigEndian7BitEncodedInt() Reads the big endian7 bit encoded int. public int ReadBigEndian7BitEncodedInt() Returns int The resulting int. Exceptions NullReferenceException Base stream is currently null. EndOfStreamException IOException Invalid 7-bit encoded integer in stream. ReadBoolean() Reads the boolean. public bool ReadBoolean() Returns bool The resulting boolean ReadByte() Reads a single byte from the stream. public byte ReadByte() Returns byte The byte read ReadBytes(int) Reads the specified number of bytes, returning them in a new byte array. If not enough bytes are available before the end of the stream, this method will return what is available. public byte[] ReadBytes(int count) Parameters count int The number of bytes to read Returns byte[] The bytes read ReadBytesOrThrow(int) Reads the specified number of bytes, returning them in a new byte array. If not enough bytes are available before the end of the stream, this method will throw an IOException. public byte[] ReadBytesOrThrow(int count) Parameters count int The number of bytes to read Returns byte[] The bytes read ReadDecimal() Reads a decimal value from the stream, using the bit converter for this reader. 16 bytes are read. public decimal ReadDecimal() Returns decimal The decimal value read ReadDouble() Reads a double-precision floating-point value from the stream, using the bit converter for this reader. 8 bytes are read. public double ReadDouble() Returns double The floating point value read ReadFloat() Reads a single-precision floating-point value from the stream, using the bit converter for this reader. 4 bytes are read. public float ReadFloat() Returns float The floating point value read ReadInt() Reads a 32-bit signed integer from the stream, using the bit converter for this reader. 4 bytes are read. public int ReadInt() Returns int The 32-bit integer read ReadLong() Reads a 64-bit signed integer from the stream, using the bit converter for this reader. 8 bytes are read. public long ReadLong() Returns long The 64-bit integer read ReadShort() Reads a 16-bit signed integer from the stream, using the bit converter for this reader. 2 bytes are read. public short ReadShort() Returns short The 16-bit integer read ReadSignedByte() Reads a single signed byte from the stream. public sbyte ReadSignedByte() Returns sbyte The byte read ReadString() Reads a length-prefixed string from the stream, using the encoding for this reader. A 7-bit encoded integer is first read, which specifies the number of bytes to read from the stream. These bytes are then converted into a string with the encoding for this reader. public string ReadString() Returns string The string read from the stream. ReadUnsignedInt() Reads a 32-bit unsigned integer from the stream, using the bit converter for this reader. 4 bytes are read. public uint ReadUnsignedInt() Returns uint The 32-bit unsigned integer read ReadUnsignedLong() Reads a 64-bit unsigned integer from the stream, using the bit converter for this reader. 8 bytes are read. public ulong ReadUnsignedLong() Returns ulong The 64-bit unsigned integer read ReadUnsignedShort() Reads a 16-bit unsigned integer from the stream, using the bit converter for this reader. 2 bytes are read. public ushort ReadUnsignedShort() Returns ushort The 16-bit unsigned integer read Seek(int, SeekOrigin) Seeks within the stream. public void Seek(int offset, SeekOrigin origin) Parameters offset int Offset to seek to. origin SeekOrigin Origin of seek operation. See Also IDisposable"
  },
  "api/BigBook.IO.EndianBinaryWriter.html": {
    "href": "api/BigBook.IO.EndianBinaryWriter.html",
    "title": "Class EndianBinaryWriter | Big Book of DataTypes API Reference",
    "keywords": "Class EndianBinaryWriter Namespace BigBook.IO Assembly BigBook.dll Endian based binary writer public class EndianBinaryWriter : IDisposable Inheritance object EndianBinaryWriter Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EndianBinaryWriter(EndianBitConverterBase, Stream) Initializes a new instance of the EndianBinaryWriter class. public EndianBinaryWriter(EndianBitConverterBase bitConverter, Stream stream) Parameters bitConverter EndianBitConverterBase The bit converter. stream Stream The stream. EndianBinaryWriter(EndianBitConverterBase, Stream, Encoding) Initializes a new instance of the EndianBinaryWriter class. public EndianBinaryWriter(EndianBitConverterBase bitConverter, Stream stream, Encoding encoding) Parameters bitConverter EndianBitConverterBase The bit converter. stream Stream The stream. encoding Encoding The encoding. Exceptions ArgumentException Stream is not writable Properties BaseStream Gets the underlying stream of the EndianBinaryWriter. public Stream? BaseStream { get; } Property Value Stream The base stream. BitConverter Gets the bit converter used to write values to the stream public EndianBitConverterBase BitConverter { get; } Property Value EndianBitConverterBase The bit converter. Encoding Gets the encoding used to write strings public Encoding Encoding { get; } Property Value Encoding The encoding. Methods Close() Closes the writer, including the underlying stream. public void Close() Dispose() Disposes of the underlying stream. public void Dispose() Dispose(bool) Releases unmanaged and - optionally - managed resources. protected virtual void Dispose(bool managed) Parameters managed bool true to release both managed and unmanaged resources; false to release only unmanaged resources. Flush() Flushes the underlying stream. public void Flush() Seek(int, SeekOrigin) Seeks within the stream. public void Seek(int offset, SeekOrigin origin) Parameters offset int Offset to seek to. origin SeekOrigin Origin of seek operation. Write(bool) Writes a boolean value to the stream. 1 byte is written. public void Write(bool value) Parameters value bool The value to write Write(byte) Writes a signed byte to the stream. public void Write(byte value) Parameters value byte The value to write Write(byte[]) Writes an array of bytes to the stream. public void Write(byte[] value) Parameters value byte[] The values to write Write(byte[], int, int) Writes a portion of an array of bytes to the stream. public void Write(byte[] value, int offset, int count) Parameters value byte[] An array containing the bytes to write offset int The index of the first byte to write within the array count int The number of bytes to write Write(char) Writes a single character to the stream, using the encoding for this writer. public void Write(char value) Parameters value char The value to write Write(char[]) Writes an array of characters to the stream, using the encoding for this writer. public void Write(char[] value) Parameters value char[] An array containing the characters to write Write(decimal) Writes a decimal value to the stream, using the bit converter for this writer. 16 bytes are written. public void Write(decimal value) Parameters value decimal The value to write Write(double) Writes a double-precision floating-point value to the stream, using the bit converter for this writer. 8 bytes are written. public void Write(double value) Parameters value double The value to write Write(short) Writes a 16-bit signed integer to the stream, using the bit converter for this writer. 2 bytes are written. public void Write(short value) Parameters value short The value to write Write(int) Writes a 32-bit signed integer to the stream, using the bit converter for this writer. 4 bytes are written. public void Write(int value) Parameters value int The value to write Write(long) Writes a 64-bit signed integer to the stream, using the bit converter for this writer. 8 bytes are written. public void Write(long value) Parameters value long The value to write Write(sbyte) Writes an unsigned byte to the stream. public void Write(sbyte value) Parameters value sbyte The value to write Write(float) Writes a single-precision floating-point value to the stream, using the bit converter for this writer. 4 bytes are written. public void Write(float value) Parameters value float The value to write Write(string) Writes a string to the stream, using the encoding for this writer. public void Write(string value) Parameters value string The value to write. Must not be null. Exceptions ArgumentNullException value is null Write(ushort) Writes a 16-bit unsigned integer to the stream, using the bit converter for this writer. 2 bytes are written. public void Write(ushort value) Parameters value ushort The value to write Write(uint) Writes a 32-bit unsigned integer to the stream, using the bit converter for this writer. 4 bytes are written. public void Write(uint value) Parameters value uint The value to write Write(ulong) Writes a 64-bit unsigned integer to the stream, using the bit converter for this writer. 8 bytes are written. public void Write(ulong value) Parameters value ulong The value to write Write7BitEncodedInt(int) Writes a 7-bit encoded integer from the stream. This is stored with the least significant information first, with 7 bits of information per byte of value, and the top bit as a continuation flag. public void Write7BitEncodedInt(int value) Parameters value int The 7-bit encoded integer to write to the stream See Also IDisposable"
  },
  "api/BigBook.IO.html": {
    "href": "api/BigBook.IO.html",
    "title": "Namespace BigBook.IO | Big Book of DataTypes API Reference",
    "keywords": "Namespace BigBook.IO Classes BitReader Bit reader EndianBinaryReader Endian binary reader EndianBinaryWriter Endian based binary writer"
  },
  "api/BigBook.LazyAsync-1.html": {
    "href": "api/BigBook.LazyAsync-1.html",
    "title": "Class LazyAsync<T> | Big Book of DataTypes API Reference",
    "keywords": "Class LazyAsync<T> Namespace BigBook Assembly BigBook.dll Lazy class that handles asyc public class LazyAsync<T> : Lazy<Task<T>> Type Parameters T The return type Inheritance object Lazy<Task<T>> LazyAsync<T> Inherited Members Lazy<Task<T>>.ToString() Lazy<Task<T>>.IsValueCreated Lazy<Task<T>>.Value object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors LazyAsync(Func<Task<T>>) Initializes a new instance of the LazyAsync<T> class. public LazyAsync(Func<Task<T>> func) Parameters func Func<Task<T>> The function. LazyAsync(Func<T>) Initializes a new instance of the LazyAsync<T> class. public LazyAsync(Func<T> func) Parameters func Func<T> The function. Methods GetAwaiter() Gets the awaiter. public TaskAwaiter<T> GetAwaiter() Returns TaskAwaiter<T> The awaiter. See Also Lazy<T>"
  },
  "api/BigBook.ListMapping-2.html": {
    "href": "api/BigBook.ListMapping-2.html",
    "title": "Class ListMapping<T1, T2> | Big Book of DataTypes API Reference",
    "keywords": "Class ListMapping<T1, T2> Namespace BigBook Assembly BigBook.dll Maps a key to a list of data public class ListMapping<T1, T2> : IDictionary<T1, IEnumerable<T2>>, ICollection<KeyValuePair<T1, IEnumerable<T2>>>, IEnumerable<KeyValuePair<T1, IEnumerable<T2>>>, IEnumerable where T1 : notnull Type Parameters T1 Key value T2 Type that the list should contain Inheritance object ListMapping<T1, T2> Implements IDictionary<T1, IEnumerable<T2>> ICollection<KeyValuePair<T1, IEnumerable<T2>>> IEnumerable<KeyValuePair<T1, IEnumerable<T2>>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Count The number of items in the listing public int Count { get; } Property Value int IsReadOnly Not read only public bool IsReadOnly { get; } Property Value bool this[T1] Gets a list of values associated with a key public IEnumerable<T2> this[T1 key] { get; set; } Parameters key T1 Key to look for Property Value IEnumerable<T2> The list of values Items Container holding the data protected Dictionary<T1, List<T2>> Items { get; } Property Value Dictionary<T1, List<T2>> Keys The list of keys within the mapping public ICollection<T1> Keys { get; } Property Value ICollection<T1> Values List that contains the list of values public ICollection<IEnumerable<T2>> Values { get; } Property Value ICollection<IEnumerable<T2>> Methods Add(KeyValuePair<T1, IEnumerable<T2>>) Adds a key value pair public void Add(KeyValuePair<T1, IEnumerable<T2>> item) Parameters item KeyValuePair<T1, IEnumerable<T2>> Key value pair to add Add(T1, IEnumerable<T2>) Adds a list of items to the mapping public void Add(T1 key, IEnumerable<T2> value) Parameters key T1 Key value value IEnumerable<T2> The values to add Add(T1, T2) Adds an item to the mapping public void Add(T1 key, T2 value) Parameters key T1 Key value value T2 The value to add Clear() Clears all items from the listing public void Clear() Contains(KeyValuePair<T1, IEnumerable<T2>>) Does this contain the key value pairs? public bool Contains(KeyValuePair<T1, IEnumerable<T2>> item) Parameters item KeyValuePair<T1, IEnumerable<T2>> Key value pair to check Returns bool True if it exists, false otherwise Contains(T1, IEnumerable<T2>) Does the list mapping contain the key value pairs? public bool Contains(T1 key, IEnumerable<T2> values) Parameters key T1 Key value values IEnumerable<T2> Value Returns bool True if it exists, false otherwise Contains(T1, T2) Does the list mapping contain the key value pair? public bool Contains(T1 key, T2 value) Parameters key T1 Key value T2 Value Returns bool True if it exists, false otherwise ContainsKey(T1) Determines if a key exists public bool ContainsKey(T1 key) Parameters key T1 Key to check on Returns bool True if it exists, false otherwise CopyTo(KeyValuePair<T1, IEnumerable<T2>>[], int) Not implemented public void CopyTo(KeyValuePair<T1, IEnumerable<T2>>[] array, int arrayIndex) Parameters array KeyValuePair<T1, IEnumerable<T2>>[] Array to copy to arrayIndex int array index GetEnumerator() Gets the enumerator public IEnumerator<KeyValuePair<T1, IEnumerable<T2>>> GetEnumerator() Returns IEnumerator<KeyValuePair<T1, IEnumerable<T2>>> The enumerator for this object Remove(KeyValuePair<T1, IEnumerable<T2>>) Removes a key value pair from the list mapping public bool Remove(KeyValuePair<T1, IEnumerable<T2>> item) Parameters item KeyValuePair<T1, IEnumerable<T2>> items to remove Returns bool True if it is removed, false otherwise Remove(T1) Remove a list of items associated with a key public bool Remove(T1 key) Parameters key T1 Key to use Returns bool True if the key is found, false otherwise Remove(T1, T2) Removes a key value pair from the list mapping public bool Remove(T1 key, T2 value) Parameters key T1 Key to remove value T2 Value to remove Returns bool True if it is removed, false otherwise ToString() Returns a string that represents this instance. public override string ToString() Returns string A string that represents this instance. TryGetValue(T1, out IEnumerable<T2>) Tries to get the value associated with the key public bool TryGetValue(T1 key, out IEnumerable<T2> value) Parameters key T1 Key value value IEnumerable<T2> The values getting Returns bool True if it was able to get the value, false otherwise"
  },
  "api/BigBook.ManyToManyIndex-2.html": {
    "href": "api/BigBook.ManyToManyIndex-2.html",
    "title": "Class ManyToManyIndex<TFirst, TSecond> | Big Book of DataTypes API Reference",
    "keywords": "Class ManyToManyIndex<TFirst, TSecond> Namespace BigBook Assembly BigBook.dll Two way, many to many index public class ManyToManyIndex<TFirst, TSecond> where TFirst : notnull where TSecond : notnull Type Parameters TFirst The type of the first. TSecond The type of the second. Inheritance object ManyToManyIndex<TFirst, TSecond> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties First Gets the first. public IEnumerable<TFirst> First { get; } Property Value IEnumerable<TFirst> The first. Second Gets the second. public IEnumerable<TSecond> Second { get; } Property Value IEnumerable<TSecond> The second. Methods Add(TFirst, IEnumerable<TSecond>) Adds the specified data to the mapping public void Add(TFirst key, IEnumerable<TSecond> list) Parameters key TFirst The key. list IEnumerable<TSecond> The list. Add(TFirst, params TSecond[]) Adds the specified data to the mapping public void Add(TFirst key, params TSecond[] list) Parameters key TFirst The key. list TSecond[] The list. Add(TSecond, IEnumerable<TFirst>) Adds the specified data to the mapping public void Add(TSecond key, IEnumerable<TFirst> list) Parameters key TSecond The key. list IEnumerable<TFirst> The list. Add(TSecond, params TFirst[]) Adds the specified data to the mapping public void Add(TSecond key, params TFirst[] list) Parameters key TSecond The key. list TFirst[] The list. Clear() Clears this instance. public void Clear() Remove(TFirst) Removes the specified key. public bool Remove(TFirst key) Parameters key TFirst The key. Returns bool True if it is removed, false otherwise Remove(TSecond) Removes the specified key. public bool Remove(TSecond key) Parameters key TSecond The key. Returns bool True if it is removed, false otherwise TryGetValue(TFirst, out IEnumerable<TSecond>) Tries to get the value. public bool TryGetValue(TFirst key, out IEnumerable<TSecond> values) Parameters key TFirst The key. values IEnumerable<TSecond> The values. Returns bool True if it is returned, false otherwise. TryGetValue(TSecond, out IEnumerable<TFirst>) Tries to get the value. public bool TryGetValue(TSecond key, out IEnumerable<TFirst> values) Parameters key TSecond The key. values IEnumerable<TFirst> The values. Returns bool True if it is returned, false otherwise."
  },
  "api/BigBook.Matrix.html": {
    "href": "api/BigBook.Matrix.html",
    "title": "Class Matrix | Big Book of DataTypes API Reference",
    "keywords": "Class Matrix Namespace BigBook Assembly BigBook.dll Matrix used in linear algebra public class Matrix Inheritance object Matrix Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Matrix(int, int, double[,]?) Constructor public Matrix(int width, int height, double[,]? values = null) Parameters width int Width of the matrix height int Height of the matrix values double[,] Values to use in the matrix Properties Height Height of the matrix public int Height { get; } Property Value int this[int, int] Sets the values of the matrix public double this[int x, int y] { get; set; } Parameters x int X position y int Y position Property Value double the value at a point in the matrix Values Values for the matrix public double[,] Values { get; } Property Value double[,] Width Width of the matrix public int Width { get; } Property Value int Methods Add(Matrix, Matrix) Adds the specified values. public static Matrix Add(Matrix left, Matrix right) Parameters left Matrix The left. right Matrix The right. Returns Matrix The results Determinant() Gets the determinant of a square matrix public double Determinant() Returns double The determinant of a square matrix Divide(Matrix, double) Divides the specified values. public static Matrix Divide(Matrix left, double right) Parameters left Matrix The left. right double The right. Returns Matrix The result Equals(object) Determines if the objects are equal public override bool Equals(object obj) Parameters obj object Object to check Returns bool True if they are, false otherwise GetHashCode() Gets the hash code for the object public override int GetHashCode() Returns int The hash code for the object Multiply(Matrix, Matrix) Multiplies the specified values. public static Matrix Multiply(Matrix left, Matrix right) Parameters left Matrix The left. right Matrix The right. Returns Matrix The results Negate(Matrix) Negates the specified item. public static Matrix Negate(Matrix item) Parameters item Matrix The item. Returns Matrix The result Subtract(Matrix, Matrix) Subtracts the specified values. public static Matrix Subtract(Matrix left, Matrix right) Parameters left Matrix The left. right Matrix The right. Returns Matrix The results ToString() Gets the string representation of the matrix public override string ToString() Returns string The matrix as a string Transpose() Transposes the matrix public Matrix Transpose() Returns Matrix Returns a new transposed matrix Operators operator +(Matrix, Matrix) Adds two matrices public static Matrix operator +(Matrix m1, Matrix m2) Parameters m1 Matrix Matrix 1 m2 Matrix Matrix 2 Returns Matrix The result operator /(Matrix, double) Divides a matrix by a value public static Matrix operator /(Matrix m1, double d) Parameters m1 Matrix Matrix 1 d double Value to divide by Returns Matrix The result operator /(double, Matrix) Divides a matrix by a value public static Matrix operator /(double d, Matrix m1) Parameters d double Value to divide by m1 Matrix Matrix 1 Returns Matrix The result operator ==(Matrix?, Matrix?) Determines if two matrices are equal public static bool operator ==(Matrix? m1, Matrix? m2) Parameters m1 Matrix Matrix 1 m2 Matrix Matrix 2 Returns bool True if they are equal, false otherwise operator !=(Matrix?, Matrix?) Determines if two matrices are unequal public static bool operator !=(Matrix? m1, Matrix? m2) Parameters m1 Matrix Matrix 1 m2 Matrix Matrix 2 Returns bool True if they are not equal, false otherwise operator *(Matrix, Matrix) Multiplies two matrices public static Matrix operator *(Matrix m1, Matrix m2) Parameters m1 Matrix Matrix 1 m2 Matrix Matrix 2 Returns Matrix The result operator *(Matrix, double) Multiplies a matrix by a value public static Matrix operator *(Matrix m1, double d) Parameters m1 Matrix Matrix 1 d double Value to multiply by Returns Matrix The result operator *(double, Matrix) Multiplies a matrix by a value public static Matrix operator *(double d, Matrix m1) Parameters d double Value to multiply by m1 Matrix Matrix 1 Returns Matrix The result operator -(Matrix, Matrix) Subtracts two matrices public static Matrix operator -(Matrix m1, Matrix m2) Parameters m1 Matrix Matrix 1 m2 Matrix Matrix 2 Returns Matrix The result operator -(Matrix) Negates a matrix public static Matrix operator -(Matrix m1) Parameters m1 Matrix Matrix 1 Returns Matrix The result"
  },
  "api/BigBook.MinificationType.html": {
    "href": "api/BigBook.MinificationType.html",
    "title": "Enum MinificationType | Big Book of DataTypes API Reference",
    "keywords": "Enum MinificationType Namespace BigBook Assembly BigBook.dll Minification type public enum MinificationType Fields CSS = 3 The CSS HTML = 1 The HTML JavaScript = 2 The java script"
  },
  "api/BigBook.ObservableList-1.html": {
    "href": "api/BigBook.ObservableList-1.html",
    "title": "Class ObservableList<T> | Big Book of DataTypes API Reference",
    "keywords": "Class ObservableList<T> Namespace BigBook Assembly BigBook.dll Observable List class public class ObservableList<T> : IList<T>, ICollection<T>, IEnumerable<T>, INotifyCollectionChanged, INotifyPropertyChanged, IList, ICollection, IEnumerable Type Parameters T Object type that the list holds Inheritance object ObservableList<T> Implements IList<T> ICollection<T> IEnumerable<T> INotifyCollectionChanged INotifyPropertyChanged IList ICollection IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ObservableList() Initializes a virtual instance of the ObservableList<T> class. public ObservableList() ObservableList(IEnumerable<T>) Initializes a virtual instance of the ObservableList<T> class. public ObservableList(IEnumerable<T> collection) Parameters collection IEnumerable<T> The collection. ObservableList(int) Initializes a virtual instance of the ObservableList<T> class. public ObservableList(int capacity) Parameters capacity int The number of elements that the virtual list can initially store. Properties Count Gets the number of elements contained in the ICollection<T>. public int Count { get; } Property Value int IsFixedSize Gets a value indicating whether the IList has a fixed size. public bool IsFixedSize { get; } Property Value bool IsReadOnly Gets a value indicating whether the collection is read-only. public bool IsReadOnly { get; } Property Value bool IsSynchronized Gets a value indicating whether access to the ICollection is synchronized (thread safe). public bool IsSynchronized { get; } Property Value bool this[int] Gets or sets the element at the specified index. public T this[int index] { get; set; } Parameters index int The index. Property Value T SyncRoot Gets an object that can be used to synchronize access to the ICollection. public object? SyncRoot { get; } Property Value object Methods Add(object) Adds an item to the IList. public int Add(object value) Parameters value object The object to add to the IList. Returns int The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection. Add(T) Adds an object to the end of the List<T>. public virtual void Add(T item) Parameters item T The object to be added to the end of the list. The value can be null for reference types. AddRange(IEnumerable<T>) Adds the range. public virtual void AddRange(IEnumerable<T> collection) Parameters collection IEnumerable<T> The collection. Clear() Removes all elements from the List<T>. public virtual void Clear() ClearDelegates() Clears the delegates from the list. public void ClearDelegates() Contains(object) Determines whether the IList contains a specific value. public bool Contains(object value) Parameters value object The object to locate in the IList. Returns bool true if the object is found in the IList; otherwise, false. Contains(T) Determines whether the ICollection<T> contains a specific value. public bool Contains(T item) Parameters item T The object to locate in the ICollection<T>. Returns bool true if item is found in the collection; otherwise, false. CopyTo(Array, int) Copies the elements of the ICollection to an Array, starting at a particular Array index. public void CopyTo(Array array, int index) Parameters array Array The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing. index int The zero-based index in array at which copying begins. CopyTo(T[], int) Copies to. public void CopyTo(T[] array, int arrayIndex) Parameters array T[] The array. arrayIndex int Index of the array. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> A IEnumerator<T> that can be used to iterate through the collection. IndexOf(object) Determines the index of a specific item in the IList. public int IndexOf(object value) Parameters value object The object to locate in the IList. Returns int The index of value if found in the list; otherwise, -1. IndexOf(T) Determines the index of a specific item in the IList<T>. public int IndexOf(T item) Parameters item T The object to locate in the IList<T>. Returns int The index of item if found in the list; otherwise, -1. Insert(int, object) Inserts an item to the IList at the specified index. public void Insert(int index, object value) Parameters index int The zero-based index at which value should be inserted. value object The object to insert into the IList. Insert(int, T) Inserts an element into the List<T> at the specified index. public virtual void Insert(int index, T item) Parameters index int The zero-based index at which item should be inserted. item T The object to insert. The value can be null for reference types. InsertRange(int, IEnumerable<T>) Inserts the range. public virtual void InsertRange(int index, IEnumerable<T> collection) Parameters index int The index. collection IEnumerable<T> The collection. NotifyCollectionChanged(NotifyCollectionChangedEventArgs) Notifies the collection changed. protected void NotifyCollectionChanged(NotifyCollectionChangedEventArgs args) Parameters args NotifyCollectionChangedEventArgs The NotifyCollectionChangedEventArgs instance containing the event data. NotifyObjectChanged(object) Notifies the list that an item in the list has been modified. public void NotifyObjectChanged(object itemChanged) Parameters itemChanged object The item that was changed. NotifyPropertyChanged(string) Notifies the property changed. protected void NotifyPropertyChanged(string propertyName = \"\") Parameters propertyName string Name of the property. Remove(object) Removes the first occurrence of a specific object from the IList. public void Remove(object value) Parameters value object The object to remove from the IList. Remove(T) Removes the first occurrence of a specific object from the List<T>. public virtual bool Remove(T item) Parameters item T The object to remove from the List<T>. The value can be null for reference types. Returns bool true if item is successfully removed; otherwise, false. This method also returns false if item was not found in the List<T>. RemoveAll(Predicate<T>) Removes all. public virtual int RemoveAll(Predicate<T> match) Parameters match Predicate<T> The match. Returns int RemoveAt(int) Removes the element at the specified index of the List<T>. public virtual void RemoveAt(int index) Parameters index int The zero-based index of the element to remove. RemoveRange(int, int) Removes a range of elements from the List<T>. public virtual void RemoveRange(int index, int count) Parameters index int The zero-based starting index of the range of elements to remove. count int The number of elements to remove. Events CollectionChanged Occurs when the collection changes. public event NotifyCollectionChangedEventHandler CollectionChanged Event Type NotifyCollectionChangedEventHandler PropertyChanged Occurs when a property value changes. public event PropertyChangedEventHandler PropertyChanged Event Type PropertyChangedEventHandler"
  },
  "api/BigBook.Patterns.BaseClasses.SafeDisposableBaseClass.html": {
    "href": "api/BigBook.Patterns.BaseClasses.SafeDisposableBaseClass.html",
    "title": "Class SafeDisposableBaseClass | Big Book of DataTypes API Reference",
    "keywords": "Class SafeDisposableBaseClass Namespace BigBook.Patterns.BaseClasses Assembly BigBook.dll Base class used for disposable objects public abstract class SafeDisposableBaseClass : IDisposable Inheritance object SafeDisposableBaseClass Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SafeDisposableBaseClass() Construct protected SafeDisposableBaseClass() Methods Dispose() Dispose function public void Dispose() Dispose(bool) Function to override in order to dispose objects protected abstract void Dispose(bool Managed) Parameters Managed bool If true, managed and unmanaged objects should be disposed. Otherwise unmanaged objects only. ~SafeDisposableBaseClass() Destructor protected ~SafeDisposableBaseClass()"
  },
  "api/BigBook.Patterns.BaseClasses.Singleton-1.html": {
    "href": "api/BigBook.Patterns.BaseClasses.Singleton-1.html",
    "title": "Class Singleton<T> | Big Book of DataTypes API Reference",
    "keywords": "Class Singleton<T> Namespace BigBook.Patterns.BaseClasses Assembly BigBook.dll Base class used for singletons public abstract class Singleton<T> where T : class Type Parameters T The class type Inheritance object Singleton<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Singleton() Constructor protected Singleton() Properties Instance Gets the instance of the singleton public static T Instance { get; } Property Value T"
  },
  "api/BigBook.Patterns.BaseClasses.StringEnumBaseClass-1.html": {
    "href": "api/BigBook.Patterns.BaseClasses.StringEnumBaseClass-1.html",
    "title": "Class StringEnumBaseClass<TClass> | Big Book of DataTypes API Reference",
    "keywords": "Class StringEnumBaseClass<TClass> Namespace BigBook.Patterns.BaseClasses Assembly BigBook.dll String enum base class public abstract class StringEnumBaseClass<TClass> where TClass : StringEnumBaseClass<TClass>, new() Type Parameters TClass The type of the class. Inheritance object StringEnumBaseClass<TClass> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors StringEnumBaseClass(string) Initializes a new instance of the StringEnumBaseClass<TClass> class. protected StringEnumBaseClass(string name) Parameters name string The name. Properties Name Gets or sets the name. protected string Name { get; set; } Property Value string The name. Methods ToString() Returns a string that represents this instance. public override string ToString() Returns string A string that represents this instance. ToStringEnumBaseClass(string) Converts to the enum from a string. public static StringEnumBaseClass<TClass> ToStringEnumBaseClass(string enumType) Parameters enumType string Type of the enum. Returns StringEnumBaseClass<TClass> The enum value Operators implicit operator string(StringEnumBaseClass<TClass>?) Performs an implicit conversion from StringEnumBaseClass<TClass> to string. public static implicit operator string(StringEnumBaseClass<TClass>? enumType) Parameters enumType StringEnumBaseClass<TClass> Type of the enum. Returns string The result of the conversion. implicit operator StringEnumBaseClass<TClass>(string?) Performs an implicit conversion from string to StringEnumBaseClass<TClass>. public static implicit operator StringEnumBaseClass<TClass>(string? enumType) Parameters enumType string Type of the enum. Returns StringEnumBaseClass<TClass> The result of the conversion."
  },
  "api/BigBook.Patterns.BaseClasses.html": {
    "href": "api/BigBook.Patterns.BaseClasses.html",
    "title": "Namespace BigBook.Patterns.BaseClasses | Big Book of DataTypes API Reference",
    "keywords": "Namespace BigBook.Patterns.BaseClasses Classes SafeDisposableBaseClass Base class used for disposable objects Singleton<T> Base class used for singletons StringEnumBaseClass<TClass> String enum base class"
  },
  "api/BigBook.Patterns.Factory-2.html": {
    "href": "api/BigBook.Patterns.Factory-2.html",
    "title": "Class Factory<TKey, TClass> | Big Book of DataTypes API Reference",
    "keywords": "Class Factory<TKey, TClass> Namespace BigBook.Patterns Assembly BigBook.dll Factory class public class Factory<TKey, TClass> Type Parameters TKey The \"message\" type TClass The class type that you want created Inheritance object Factory<TKey, TClass> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Factory() Constructor public Factory() Properties Constructors List of constructors/initializers protected Dictionary<TKey, Func<TClass>> Constructors { get; } Property Value Dictionary<TKey, Func<TClass>> Methods Create(TKey) Creates an instance associated with the key public TClass Create(TKey key) Parameters key TKey Registered item Returns TClass The type returned by the initializer Exists(TKey) Determines if a key has been registered public bool Exists(TKey key) Parameters key TKey Key to check Returns bool True if it exists, false otherwise Register(TKey, Func<TClass>) Registers an item public Factory<TKey, TClass> Register(TKey key, Func<TClass> constructor) Parameters key TKey Item to register constructor Func<TClass> The function to call when creating the item Returns Factory<TKey, TClass> This Register(TKey, TClass) Registers an item public Factory<TKey, TClass> Register(TKey key, TClass result) Parameters key TKey Item to register result TClass The object to be returned Returns Factory<TKey, TClass> This"
  },
  "api/BigBook.Patterns.IFluentInterface.html": {
    "href": "api/BigBook.Patterns.IFluentInterface.html",
    "title": "Interface IFluentInterface | Big Book of DataTypes API Reference",
    "keywords": "Interface IFluentInterface Namespace BigBook.Patterns Assembly BigBook.dll Helps in fluent interface design to hide ToString, Equals, and GetHashCode public interface IFluentInterface"
  },
  "api/BigBook.Patterns.html": {
    "href": "api/BigBook.Patterns.html",
    "title": "Namespace BigBook.Patterns | Big Book of DataTypes API Reference",
    "keywords": "Namespace BigBook.Patterns Classes Factory<TKey, TClass> Factory class Interfaces IFluentInterface Helps in fluent interface design to hide ToString, Equals, and GetHashCode"
  },
  "api/BigBook.PriorityQueue-1.html": {
    "href": "api/BigBook.PriorityQueue-1.html",
    "title": "Class PriorityQueue<T> | Big Book of DataTypes API Reference",
    "keywords": "Class PriorityQueue<T> Namespace BigBook Assembly BigBook.dll Helper class that implements a priority queue public class PriorityQueue<T> : IDictionary<int, ICollection<T>>, ICollection<KeyValuePair<int, ICollection<T>>>, IEnumerable<KeyValuePair<int, ICollection<T>>>, IEnumerable Type Parameters T The type of the values placed in the queue Inheritance object PriorityQueue<T> Implements IDictionary<int, ICollection<T>> ICollection<KeyValuePair<int, ICollection<T>>> IEnumerable<KeyValuePair<int, ICollection<T>>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PriorityQueue() Constructor public PriorityQueue() Properties Count The number of items in the listing public int Count { get; } Property Value int HighestKey Highest value key protected int HighestKey { get; set; } Property Value int IsReadOnly Not read only public bool IsReadOnly { get; } Property Value bool this[int] Gets a list of values associated with a key public ICollection<T> this[int key] { get; set; } Parameters key int Key to look for Property Value ICollection<T> The list of values Items Container holding the data protected IDictionary<int, ICollection<T>> Items { get; } Property Value IDictionary<int, ICollection<T>> Keys The list of keys within the mapping public ICollection<int> Keys { get; } Property Value ICollection<int> Values List that contains the list of values public ICollection<ICollection<T>> Values { get; } Property Value ICollection<ICollection<T>> Methods Add(KeyValuePair<int, ICollection<T>>) Adds a key value pair public void Add(KeyValuePair<int, ICollection<T>> item) Parameters item KeyValuePair<int, ICollection<T>> Key value pair to add Add(int, ICollection<T>) Adds a list of items to the mapping public void Add(int key, ICollection<T> value) Parameters key int Key value value ICollection<T> The values to add Add(int, T) Adds an item to the mapping public void Add(int key, T value) Parameters key int Key value value T The value to add Clear() Clears all items from the listing public void Clear() Contains(KeyValuePair<int, ICollection<T>>) Does this contain the key value pairs? public bool Contains(KeyValuePair<int, ICollection<T>> item) Parameters item KeyValuePair<int, ICollection<T>> Key value pair to check Returns bool True if it exists, false otherwise Contains(int, ICollection<T>) Does the list mapping contain the key value pairs? public bool Contains(int key, ICollection<T> values) Parameters key int Key value values ICollection<T> Value Returns bool True if it exists, false otherwise Contains(int, T) Does the list mapping contain the key value pair? public bool Contains(int key, T value) Parameters key int Key value T Value Returns bool True if it exists, false otherwise ContainsKey(int) Determines if a key exists public bool ContainsKey(int key) Parameters key int Key to check on Returns bool True if it exists, false otherwise CopyTo(KeyValuePair<int, ICollection<T>>[], int) Not implemented public void CopyTo(KeyValuePair<int, ICollection<T>>[] array, int arrayIndex) Parameters array KeyValuePair<int, ICollection<T>>[] Array to copy to arrayIndex int array index GetEnumerator() Gets the enumerator public IEnumerator<KeyValuePair<int, ICollection<T>>> GetEnumerator() Returns IEnumerator<KeyValuePair<int, ICollection<T>>> The enumerator for this object Peek() Peek at the next thing in the queue public T Peek() Returns T The next item in queue or default(T) if it is empty Pop() Removes an item from the queue and returns it public T Pop() Returns T The next item in the queue Remove(KeyValuePair<int, ICollection<T>>) Removes a key value pair from the list mapping public bool Remove(KeyValuePair<int, ICollection<T>> item) Parameters item KeyValuePair<int, ICollection<T>> items to remove Returns bool True if it is removed, false otherwise Remove(int) Remove a list of items associated with a key public bool Remove(int key) Parameters key int Key to use Returns bool True if the key is found, false otherwise Remove(int, T) Removes a key value pair from the list mapping public bool Remove(int key, T Value) Parameters key int Key to remove Value T Value to remove Returns bool True if it is removed, false otherwise TryGetValue(int, out ICollection<T>) Tries to get the value associated with the key public bool TryGetValue(int key, out ICollection<T> value) Parameters key int Key value value ICollection<T> The values getting Returns bool True if it was able to get the value, false otherwise"
  },
  "api/BigBook.Queryable.BaseClasses.QueryProviderBase.html": {
    "href": "api/BigBook.Queryable.BaseClasses.QueryProviderBase.html",
    "title": "Class QueryProviderBase | Big Book of DataTypes API Reference",
    "keywords": "Class QueryProviderBase Namespace BigBook.Queryable.BaseClasses Assembly BigBook.dll Query provider base class public abstract class QueryProviderBase : IQueryProvider Inheritance object QueryProviderBase Implements IQueryProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors QueryProviderBase() Initializes a new instance of the QueryProviderBase class. protected QueryProviderBase() Methods CreateQuery(Expression) Constructs an IQueryable object that can evaluate the query represented by a specified expression tree. public IQueryable? CreateQuery(Expression expression) Parameters expression Expression An expression tree that represents a LINQ query. Returns IQueryable An IQueryable that can evaluate the query represented by the specified expression tree. CreateQuery<TElement>(Expression) Constructs an IQueryable<T> object that can evaluate the query represented by a specified expression tree. public IQueryable<TElement> CreateQuery<TElement>(Expression expression) Parameters expression Expression An expression tree that represents a LINQ query. Returns IQueryable<TElement> An IQueryable<T> that can evaluate the query represented by the specified expression tree. Type Parameters TElement The type of the elements of the IQueryable<T> that is returned. Execute(Expression) Executes the query represented by a specified expression tree. public abstract object? Execute(Expression expression) Parameters expression Expression An expression tree that represents a LINQ query. Returns object The value that results from executing the specified query. Execute<TElement>(Expression) Executes the specified expression. public TElement Execute<TElement>(Expression expression) Parameters expression Expression The expression. Returns TElement The value that results from executing the specified query. Type Parameters TElement The type of the element. GetQueryText(Expression) Gets the query text. public abstract string GetQueryText(Expression expression) Parameters expression Expression The expression. Returns string The query as a string See Also IQueryProvider"
  },
  "api/BigBook.Queryable.BaseClasses.html": {
    "href": "api/BigBook.Queryable.BaseClasses.html",
    "title": "Namespace BigBook.Queryable.BaseClasses | Big Book of DataTypes API Reference",
    "keywords": "Namespace BigBook.Queryable.BaseClasses Classes QueryProviderBase Query provider base class"
  },
  "api/BigBook.Queryable.Query-1.html": {
    "href": "api/BigBook.Queryable.Query-1.html",
    "title": "Class Query<T> | Big Book of DataTypes API Reference",
    "keywords": "Class Query<T> Namespace BigBook.Queryable Assembly BigBook.dll Reusable query class public class Query<T> : IOrderedQueryable<T>, IQueryable<T>, IEnumerable<T>, IOrderedQueryable, IQueryable, IEnumerable Type Parameters T Element type Inheritance object Query<T> Implements IOrderedQueryable<T> IQueryable<T> IEnumerable<T> IOrderedQueryable IQueryable IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Query(QueryProviderBase) Initializes a new instance of the Query<T> class. public Query(QueryProviderBase provider) Parameters provider QueryProviderBase The provider. Exceptions ArgumentNullException provider Query(QueryProviderBase, Expression) Initializes a new instance of the Query<T> class. public Query(QueryProviderBase provider, Expression expression) Parameters provider QueryProviderBase The provider. expression Expression The expression. Exceptions ArgumentNullException expression or provider ArgumentOutOfRangeException expression Properties Expression Gets the expression tree that is associated with the instance of IQueryable. public Expression Expression { get; } Property Value Expression Provider Gets the query provider that is associated with this data source. public IQueryProvider Provider { get; } Property Value IQueryProvider Methods GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> An enumerator that can be used to iterate through the collection. ToString() Returns a string that represents this instance. public override string ToString() Returns string A string that represents this instance."
  },
  "api/BigBook.Queryable.html": {
    "href": "api/BigBook.Queryable.html",
    "title": "Namespace BigBook.Queryable | Big Book of DataTypes API Reference",
    "keywords": "Namespace BigBook.Queryable Classes Query<T> Reusable query class"
  },
  "api/BigBook.Reflection.TypeCacheFor-1.html": {
    "href": "api/BigBook.Reflection.TypeCacheFor-1.html",
    "title": "Class TypeCacheFor<T> | Big Book of DataTypes API Reference",
    "keywords": "Class TypeCacheFor<T> Namespace BigBook.Reflection Assembly BigBook.dll Type cache info public static class TypeCacheFor<T> Type Parameters T Type to cache. Inheritance object TypeCacheFor<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Constructors The constructors public static readonly ConstructorInfo[] Constructors Field Value ConstructorInfo[] Fields The fields public static readonly FieldInfo[] Fields Field Value FieldInfo[] Interfaces The interfaces public static readonly Type[] Interfaces Field Value Type[] Methods The methods public static readonly MethodInfo[] Methods Field Value MethodInfo[] Properties The properties public static readonly PropertyInfo[] Properties Field Value PropertyInfo[] Type The type public static readonly Type Type Field Value Type"
  },
  "api/BigBook.Reflection.html": {
    "href": "api/BigBook.Reflection.html",
    "title": "Namespace BigBook.Reflection | Big Book of DataTypes API Reference",
    "keywords": "Namespace BigBook.Reflection Classes TypeCacheFor<T> Type cache info"
  },
  "api/BigBook.Registration.BigBookCanisterExtensions.html": {
    "href": "api/BigBook.Registration.BigBookCanisterExtensions.html",
    "title": "Class BigBookCanisterExtensions | Big Book of DataTypes API Reference",
    "keywords": "Class BigBookCanisterExtensions Namespace BigBook.Registration Assembly BigBook.dll Canister registration extension public static class BigBookCanisterExtensions Inheritance object BigBookCanisterExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RegisterBigBookOfDataTypes(ICanisterConfiguration?) Registers the big book of data types. public static ICanisterConfiguration? RegisterBigBookOfDataTypes(this ICanisterConfiguration? bootstrapper) Parameters bootstrapper ICanisterConfiguration The bootstrapper. Returns ICanisterConfiguration The bootstrapper RegisterBigBookOfDataTypes(IServiceCollection?) Registers the big book of data types with the specified service collection. public static IServiceCollection? RegisterBigBookOfDataTypes(this IServiceCollection? services) Parameters services IServiceCollection The service collection to register the data types with. Returns IServiceCollection The service collection with the registered data types."
  },
  "api/BigBook.Registration.html": {
    "href": "api/BigBook.Registration.html",
    "title": "Namespace BigBook.Registration | Big Book of DataTypes API Reference",
    "keywords": "Namespace BigBook.Registration Classes BigBookCanisterExtensions Canister registration extension"
  },
  "api/BigBook.RingBuffer-1.html": {
    "href": "api/BigBook.RingBuffer-1.html",
    "title": "Class RingBuffer<T> | Big Book of DataTypes API Reference",
    "keywords": "Class RingBuffer<T> Namespace BigBook Assembly BigBook.dll Implements a ring buffer public class RingBuffer<T> : ICollection<T>, IEnumerable<T>, ICollection, IEnumerable Type Parameters T Type of the data it holds Inheritance object RingBuffer<T> Implements ICollection<T> IEnumerable<T> ICollection IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RingBuffer() Constructor public RingBuffer() RingBuffer(int, bool) Constructor public RingBuffer(int maxCapacity, bool allowOverflow = false) Parameters maxCapacity int Max capacity for the circular buffer allowOverflow bool Is overflow allowed (defaults to false) Properties AllowOverflow Is overflow allowed? public bool AllowOverflow { get; protected set; } Property Value bool Buffer Buffer that the circular buffer uses protected T[] Buffer { get; set; } Property Value T[] Count Item count for the circular buffer public int Count { get; protected set; } Property Value int IsReadOnly Is this read only? public bool IsReadOnly { get; protected set; } Property Value bool IsSynchronized Is this synchronized? public bool IsSynchronized { get; protected set; } Property Value bool this[int] Allows getting an item at a specific position in the buffer public T this[int position] { get; set; } Parameters position int Position to look at Property Value T The specified item MaxCapacity Maximum capacity public int MaxCapacity { get; protected set; } Property Value int ReadPosition Read position protected int ReadPosition { get; set; } Property Value int SyncRoot Sync root public object SyncRoot { get; } Property Value object WritePosition Write position protected int WritePosition { get; set; } Property Value int Methods Add(IEnumerable<T>) Adds a number of items to the buffer public void Add(IEnumerable<T> items) Parameters items IEnumerable<T> Items to add Add(T) Adds an item to the buffer public void Add(T item) Parameters item T Item to add Add(T[], int, int) Adds a number of items to the buffer public void Add(T[] buffer, int offset, int count) Parameters buffer T[] Items to add offset int Offset to start at count int Number of items to add Clear() Clears the buffer public void Clear() Contains(T) Determines if the buffer contains the item public bool Contains(T item) Parameters item T Item to check Returns bool True if the item is present, false otherwise CopyTo(Array, int) Copies the buffer to an array public void CopyTo(Array array, int index) Parameters array Array Array to copy to index int Array index to start at CopyTo(T[], int) Copies the buffer to an array public void CopyTo(T[] array, int arrayIndex) Parameters array T[] Array to copy to arrayIndex int Array index to start at GetEnumerator() Gets the enumerator for the buffer public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> The enumerator Remove() Reads the next item from the buffer public T Remove() Returns T The next item from the buffer Remove(int) Reads the next X number of items from the buffer public IEnumerable<T> Remove(int amount) Parameters amount int Number of items to return Returns IEnumerable<T> The next X items from the buffer Remove(T) Removes an item from the buffer public bool Remove(T item) Parameters item T Item to remove Returns bool True if it is removed, false otherwise Remove(T[], int, int) Reads the next X number of items and places them in the array passed in public int Remove(T[] array, int offset, int count) Parameters array T[] Array to copy to offset int Offset to start at count int Number of items to read Returns int The number of items that were read Skip(int) Skips ahead in the buffer public void Skip(int count) Parameters count int Number of items in the buffer to skip ToString() Returns the buffer as a string public override string ToString() Returns string The buffer as a string Operators implicit operator string(RingBuffer<T>) Converts the object to a string public static implicit operator string(RingBuffer<T> value) Parameters value RingBuffer<T> Value to convert Returns string The value as a string"
  },
  "api/BigBook.Row.html": {
    "href": "api/BigBook.Row.html",
    "title": "Class Row | Big Book of DataTypes API Reference",
    "keywords": "Class Row Namespace BigBook Assembly BigBook.dll Holds an individual row public class Row Inheritance object Row Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Row(Hashtable, string[], params object[]) Constructor public Row(Hashtable columnNameHash, string[] columnNames, params object[] columnValues) Parameters columnNameHash Hashtable Column name hash columnNames string[] Column names columnValues object[] Column values Properties ColumnNameHash Column names public Hashtable ColumnNameHash { get; } Property Value Hashtable ColumnNames Column names public string[] ColumnNames { get; protected set; } Property Value string[] ColumnValues Column values public object[] ColumnValues { get; protected set; } Property Value object[] this[int] Returns a column based on the value specified public object? this[int column] { get; } Parameters column int Column number Property Value object The value specified this[string] Returns a column based on the column name specified public object? this[string columnName] { get; } Parameters columnName string Column name to search for Property Value object The value specified"
  },
  "api/BigBook.Set-1.html": {
    "href": "api/BigBook.Set-1.html",
    "title": "Class Set<T> | Big Book of DataTypes API Reference",
    "keywords": "Class Set<T> Namespace BigBook Assembly BigBook.dll Class to be used for sets of data public class Set<T> : List<T>, IList<T>, ICollection<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IList, ICollection, IEnumerable Type Parameters T Type that the set holds Inheritance object List<T> Set<T> Implements IList<T> ICollection<T> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IList ICollection IEnumerable Inherited Members List<T>.Add(T) List<T>.AddRange(IEnumerable<T>) List<T>.AsReadOnly() List<T>.BinarySearch(int, int, T, IComparer<T>) List<T>.BinarySearch(T) List<T>.BinarySearch(T, IComparer<T>) List<T>.Clear() List<T>.Contains(T) List<T>.ConvertAll<TOutput>(Converter<T, TOutput>) List<T>.CopyTo(int, T[], int, int) List<T>.CopyTo(T[]) List<T>.CopyTo(T[], int) List<T>.EnsureCapacity(int) List<T>.Exists(Predicate<T>) List<T>.Find(Predicate<T>) List<T>.FindAll(Predicate<T>) List<T>.FindIndex(int, int, Predicate<T>) List<T>.FindIndex(int, Predicate<T>) List<T>.FindIndex(Predicate<T>) List<T>.FindLast(Predicate<T>) List<T>.FindLastIndex(int, int, Predicate<T>) List<T>.FindLastIndex(int, Predicate<T>) List<T>.FindLastIndex(Predicate<T>) List<T>.ForEach(Action<T>) List<T>.GetEnumerator() List<T>.GetRange(int, int) List<T>.IndexOf(T) List<T>.IndexOf(T, int) List<T>.IndexOf(T, int, int) List<T>.Insert(int, T) List<T>.InsertRange(int, IEnumerable<T>) List<T>.LastIndexOf(T) List<T>.LastIndexOf(T, int) List<T>.LastIndexOf(T, int, int) List<T>.Remove(T) List<T>.RemoveAll(Predicate<T>) List<T>.RemoveAt(int) List<T>.RemoveRange(int, int) List<T>.Reverse() List<T>.Reverse(int, int) List<T>.Slice(int, int) List<T>.Sort() List<T>.Sort(IComparer<T>) List<T>.Sort(Comparison<T>) List<T>.Sort(int, int, IComparer<T>) List<T>.ToArray() List<T>.TrimExcess() List<T>.TrueForAll(Predicate<T>) List<T>.Capacity List<T>.Count List<T>.this[int] object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Set() Initializes a new instance of the Set<T> class. public Set() Set(int) Constructor public Set(int initialSize) Parameters initialSize int Initial size Methods Add(Set<T>, Set<T>) Adds the specified values. public static Set<T> Add(Set<T> left, Set<T> right) Parameters left Set<T> The left. right Set<T> The right. Returns Set<T> The result Contains(Set<T>) Used to tell if this set contains the other public bool Contains(Set<T> set) Parameters set Set<T> Set to check against Returns bool True if it is, false otherwise Equals(object) Determines if the two sets are equivalent public override bool Equals(object obj) Parameters obj object The object to compare to Returns bool True if they are, false otherwise GetHashCode() Returns the hash code for the object public override int GetHashCode() Returns int The hash code for the object GetIntersection(Set<T>, Set<T>) Gets the intersection of set 1 and set 2 public static Set<T>? GetIntersection(Set<T> set1, Set<T> set2) Parameters set1 Set<T> Set 1 set2 Set<T> Set 2 Returns Set<T> The intersection of the two sets Intersect(Set<T>) Determines if the sets intersect public bool Intersect(Set<T> set) Parameters set Set<T> Set to check against Returns bool True if they do, false otherwise IsSubset(Set<T>) Used to tell if this is a subset of the other public bool IsSubset(Set<T> set) Parameters set Set<T> Set to check against Returns bool True if it is, false otherwise Subtract(Set<T>, Set<T>) Subtracts the specified values. public static Set<T> Subtract(Set<T> left, Set<T> right) Parameters left Set<T> The left. right Set<T> The right. Returns Set<T> The result. ToString() Returns the set as a string public override string ToString() Returns string The set as a string Operators operator +(Set<T>, Set<T>) Adds two sets together public static Set<T> operator +(Set<T> set1, Set<T> set2) Parameters set1 Set<T> Set 1 set2 Set<T> Set 2 Returns Set<T> The joined sets operator ==(Set<T>?, Set<T>?) Determines if the two sets are equivalent public static bool operator ==(Set<T>? set1, Set<T>? set2) Parameters set1 Set<T> Set 1 set2 Set<T> Set 2 Returns bool True if they are, false otherwise operator !=(Set<T>, Set<T>) Determines if the two sets are not equivalent public static bool operator !=(Set<T> set1, Set<T> set2) Parameters set1 Set<T> Set 1 set2 Set<T> Set 2 Returns bool False if they are, true otherwise operator -(Set<T>, Set<T>) Removes items from set 2 from set 1 public static Set<T> operator -(Set<T> set1, Set<T> set2) Parameters set1 Set<T> Set 1 set2 Set<T> Set 2 Returns Set<T> The resulting set"
  },
  "api/BigBook.StringCase.html": {
    "href": "api/BigBook.StringCase.html",
    "title": "Enum StringCase | Big Book of DataTypes API Reference",
    "keywords": "Enum StringCase Namespace BigBook Assembly BigBook.dll What sort of string capitalization should be used? public enum StringCase Fields CamelCase = 3 Camel case FirstCharacterUpperCase = 1 First character upper case SentenceCapitalize = 0 Sentence capitalization TitleCase = 2 Title case"
  },
  "api/BigBook.StringCompare.html": {
    "href": "api/BigBook.StringCompare.html",
    "title": "Enum StringCompare | Big Book of DataTypes API Reference",
    "keywords": "Enum StringCompare Namespace BigBook Assembly BigBook.dll What type of string comparison are we doing? public enum StringCompare Fields Anagram = 1 Is this an anagram? CreditCard = 0 Is this a credit card number? Unicode = 2 Is this Unicode"
  },
  "api/BigBook.StringFilter.html": {
    "href": "api/BigBook.StringFilter.html",
    "title": "Enum StringFilter | Big Book of DataTypes API Reference",
    "keywords": "Enum StringFilter Namespace BigBook Assembly BigBook.dll Predefined filters [Flags] public enum StringFilter Fields Alpha = 1 Alpha characters ExtraSpaces = 8 Multiple spaces FloatNumeric = 4 Numbers with period, basically allows for decimal point None = 0 The none Numeric = 2 Numeric characters"
  },
  "api/BigBook.StringTrie.html": {
    "href": "api/BigBook.StringTrie.html",
    "title": "Class StringTrie | Big Book of DataTypes API Reference",
    "keywords": "Class StringTrie Namespace BigBook Assembly BigBook.dll Special case public class StringTrie : Trie<char, string> Inheritance object Trie<char, string> StringTrie Inherited Members Trie<char, string>.Add(IEnumerable<char>, string) Trie<char, string>.Build() Trie<char, string>.FindAll(char[]) Trie<char, string>.FindAll(List<char>) Trie<char, string>.FindAll(Span<char>) Trie<char, string>.FindAll(ReadOnlySpan<char>) Trie<char, string>.FindAny(Span<char>) Trie<char, string>.FindAny(ReadOnlySpan<char>) Trie<char, string>.FindAny(List<char>) Trie<char, string>.FindAny(char[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Add(params string[]) Adds the specified values. public StringTrie Add(params string[] values) Parameters values string[] The values. Returns StringTrie See Also Trie<TObject, TReturn>"
  },
  "api/BigBook.Table.html": {
    "href": "api/BigBook.Table.html",
    "title": "Class Table | Big Book of DataTypes API Reference",
    "keywords": "Class Table Namespace BigBook Assembly BigBook.dll Holds tabular information public class Table Inheritance object Table Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Table(DbDataReader) Constructor public Table(DbDataReader reader) Parameters reader DbDataReader Data reader to get the data from Table(params string[]) Constructor public Table(params string[] columnNames) Parameters columnNames string[] Column names Properties ColumnNameHash Column Name hash table public Hashtable ColumnNameHash { get; } Property Value Hashtable ColumnNames Column names for the table public string[] ColumnNames { get; protected set; } Property Value string[] this[int] Gets a specific row public Row? this[int rowNumber] { get; } Parameters rowNumber int Row number Property Value Row The row specified Rows Rows within the table public List<Row> Rows { get; } Property Value List<Row> Methods AddRow(params object[]) Adds a row using the objects passed in public Table AddRow(params object[] objects) Parameters objects object[] Objects to create the row from Returns Table This"
  },
  "api/BigBook.TagDictionary-2.html": {
    "href": "api/BigBook.TagDictionary-2.html",
    "title": "Class TagDictionary<TKey, TValue> | Big Book of DataTypes API Reference",
    "keywords": "Class TagDictionary<TKey, TValue> Namespace BigBook Assembly BigBook.dll Dictionary that matches multiple keys to each value public class TagDictionary<TKey, TValue> : IDictionary<TKey, IEnumerable<TValue>>, ICollection<KeyValuePair<TKey, IEnumerable<TValue>>>, IEnumerable<KeyValuePair<TKey, IEnumerable<TValue>>>, IEnumerable Type Parameters TKey Key type TValue Value type Inheritance object TagDictionary<TKey, TValue> Implements IDictionary<TKey, IEnumerable<TValue>> ICollection<KeyValuePair<TKey, IEnumerable<TValue>>> IEnumerable<KeyValuePair<TKey, IEnumerable<TValue>>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TagDictionary() Constructor public TagDictionary() Properties Count Number of items in the dictionary public int Count { get; } Property Value int IsReadOnly Always false public bool IsReadOnly { get; } Property Value bool this[TKey] Gets the values based on a key public IEnumerable<TValue> this[TKey key] { get; set; } Parameters key TKey Key to get the values of Property Value IEnumerable<TValue> The values associated with the key Keys Gets the keys found in the dictionary public ICollection<TKey> Keys { get; } Property Value ICollection<TKey> Values Gets the values found in the dictionary public ICollection<IEnumerable<TValue>> Values { get; } Property Value ICollection<IEnumerable<TValue>> Methods Add(KeyValuePair<TKey, IEnumerable<TValue>>) Adds an item to the dictionary public void Add(KeyValuePair<TKey, IEnumerable<TValue>> item) Parameters item KeyValuePair<TKey, IEnumerable<TValue>> item to add Add(TKey, IEnumerable<TValue>) Adds a list of values to the key public void Add(TKey key, IEnumerable<TValue> value) Parameters key TKey Key value IEnumerable<TValue> Values to add Add(TValue, params TKey[]) Adds a value to the dicionary public void Add(TValue value, params TKey[] keys) Parameters value TValue Value to add keys TKey[] Keys to associate the value with Clear() Clears the dictionary public void Clear() Contains(KeyValuePair<TKey, IEnumerable<TValue>>) Determines if the dictionary contains the key/value pair public bool Contains(KeyValuePair<TKey, IEnumerable<TValue>> item) Parameters item KeyValuePair<TKey, IEnumerable<TValue>> item to check Returns bool True if it is, false otherwise ContainsKey(TKey) Determines if a key is in the dictionary public bool ContainsKey(TKey key) Parameters key TKey Key to check Returns bool True if it exists, false otherwise CopyTo(KeyValuePair<TKey, IEnumerable<TValue>>[], int) Copies itself to an array public void CopyTo(KeyValuePair<TKey, IEnumerable<TValue>>[] array, int arrayIndex) Parameters array KeyValuePair<TKey, IEnumerable<TValue>>[] Array arrayIndex int Array index GetEnumerator() Gets the enumerator public IEnumerator<KeyValuePair<TKey, IEnumerable<TValue>>> GetEnumerator() Returns IEnumerator<KeyValuePair<TKey, IEnumerable<TValue>>> The enumerator Remove(KeyValuePair<TKey, IEnumerable<TValue>>) Removes a specific key/value pair public bool Remove(KeyValuePair<TKey, IEnumerable<TValue>> item) Parameters item KeyValuePair<TKey, IEnumerable<TValue>> item to remove Returns bool True if it is removed, false otherwise Remove(TKey) Removes all items that are associated with a key public bool Remove(TKey key) Parameters key TKey Key Returns bool Returns true if the key was found, false otherwise TryGetValue(TKey, out IEnumerable<TValue>) Attempts to get the values associated with a key public bool TryGetValue(TKey key, out IEnumerable<TValue> value) Parameters key TKey Key value IEnumerable<TValue> Values associated with a key Returns bool True if something is returned, false otherwise"
  },
  "api/BigBook.TaskQueue-1.html": {
    "href": "api/BigBook.TaskQueue-1.html",
    "title": "Class TaskQueue<T> | Big Book of DataTypes API Reference",
    "keywords": "Class TaskQueue<T> Namespace BigBook Assembly BigBook.dll Class that helps with running tasks in parallel on a set of objects (that will come in on an ongoing basis, think producer/consumer situations) public class TaskQueue<T> : BlockingCollection<T>, IReadOnlyCollection<T>, IEnumerable<T>, ICollection, IEnumerable, IDisposable Type Parameters T Object type to process Inheritance object BlockingCollection<T> TaskQueue<T> Implements IReadOnlyCollection<T> IEnumerable<T> ICollection IEnumerable IDisposable Inherited Members BlockingCollection<T>.Add(T) BlockingCollection<T>.Add(T, CancellationToken) BlockingCollection<T>.AddToAny(BlockingCollection<T>[], T) BlockingCollection<T>.AddToAny(BlockingCollection<T>[], T, CancellationToken) BlockingCollection<T>.CompleteAdding() BlockingCollection<T>.CopyTo(T[], int) BlockingCollection<T>.Dispose() BlockingCollection<T>.GetConsumingEnumerable() BlockingCollection<T>.GetConsumingEnumerable(CancellationToken) BlockingCollection<T>.Take() BlockingCollection<T>.Take(CancellationToken) BlockingCollection<T>.TakeFromAny(BlockingCollection<T>[], out T) BlockingCollection<T>.TakeFromAny(BlockingCollection<T>[], out T, CancellationToken) BlockingCollection<T>.ToArray() BlockingCollection<T>.TryAdd(T) BlockingCollection<T>.TryAdd(T, int) BlockingCollection<T>.TryAdd(T, int, CancellationToken) BlockingCollection<T>.TryAdd(T, TimeSpan) BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[], T) BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[], T, int) BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[], T, int, CancellationToken) BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[], T, TimeSpan) BlockingCollection<T>.TryTake(out T) BlockingCollection<T>.TryTake(out T, int) BlockingCollection<T>.TryTake(out T, int, CancellationToken) BlockingCollection<T>.TryTake(out T, TimeSpan) BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[], out T) BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[], out T, int) BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[], out T, int, CancellationToken) BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[], out T, TimeSpan) BlockingCollection<T>.BoundedCapacity BlockingCollection<T>.Count BlockingCollection<T>.IsAddingCompleted BlockingCollection<T>.IsCompleted object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TaskQueue(int, Func<T, bool>, int, Action<Exception, T>?) Constructor public TaskQueue(int capacity, Func<T, bool> processItem, int timeOut = 100, Action<Exception, T>? handleError = null) Parameters capacity int Number of items that are allowed to be processed in the queue at one time processItem Func<T, bool> Action that is used to process each item timeOut int The time out to wait between items to process. handleError Action<Exception, T> Handles an exception if it occurs (defaults to eating the error) Properties Capacity Gets the capacity. public int Capacity { get; } Property Value int The capacity. IsCanceled Determines if it has been cancelled public bool IsCanceled { get; } Property Value bool IsComplete Determines if it has completed all tasks public bool IsComplete { get; } Property Value bool TimeOut Gets the time out. public int TimeOut { get; } Property Value int The time out. Methods Cancel(bool) Cancels the queue from processing public bool Cancel(bool wait = false) Parameters wait bool Determines if the function should wait for the tasks to complete before returning Returns bool True if it is cancelled, false otherwise Dispose(bool) Disposes of the objects protected override void Dispose(bool disposing) Parameters disposing bool True to dispose of all resources, false only disposes of native resources Enqueue(T) Adds the item to the queue to be processed public bool Enqueue(T item) Parameters item T Item to process Returns bool True if it is enqueued, false otherwise"
  },
  "api/BigBook.TimeFrame.html": {
    "href": "api/BigBook.TimeFrame.html",
    "title": "Enum TimeFrame | Big Book of DataTypes API Reference",
    "keywords": "Enum TimeFrame Namespace BigBook Assembly BigBook.dll Time frame public enum TimeFrame Fields Day = 0 Day Month = 2 Month Quarter = 3 Quarter Week = 1 Week Year = 4 Year"
  },
  "api/BigBook.TreeNode-1.html": {
    "href": "api/BigBook.TreeNode-1.html",
    "title": "Class TreeNode<T> | Big Book of DataTypes API Reference",
    "keywords": "Class TreeNode<T> Namespace BigBook Assembly BigBook.dll Node class for the Binary tree public class TreeNode<T> Type Parameters T The value type Inheritance object TreeNode<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors TreeNode(T, TreeNode<T>?, TreeNode<T>?, TreeNode<T>?) Constructor public TreeNode(T value = default, TreeNode<T>? parent = null, TreeNode<T>? left = null, TreeNode<T>? right = null) Parameters value T Value of the node parent TreeNode<T> Parent node left TreeNode<T> Left node right TreeNode<T> Right node Properties IsLeaf Is this a leaf public bool IsLeaf { get; } Property Value bool IsRoot Is this the root public bool IsRoot { get; } Property Value bool Left Left node public TreeNode<T>? Left { get; set; } Property Value TreeNode<T> Parent Parent node public TreeNode<T>? Parent { get; set; } Property Value TreeNode<T> Right Right node public TreeNode<T>? Right { get; set; } Property Value TreeNode<T> Value Value of the node public T Value { get; set; } Property Value T Methods ToString() Returns the node as a string public override string ToString() Returns string String representation of the node"
  },
  "api/BigBook.Trie-2.html": {
    "href": "api/BigBook.Trie-2.html",
    "title": "Class Trie<TObject, TReturn> | Big Book of DataTypes API Reference",
    "keywords": "Class Trie<TObject, TReturn> Namespace BigBook Assembly BigBook.dll Trie class public class Trie<TObject, TReturn> Type Parameters TObject The type of the object. TReturn The type of the return. Inheritance object Trie<TObject, TReturn> Derived StringTrie Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Trie() Initializes a new instance of the Trie<TObject, TReturn> class. public Trie() Methods Add(IEnumerable<TObject>, TReturn) Adds the specified \"word\". public Trie<TObject, TReturn> Add(IEnumerable<TObject> word, TReturn returnValue) Parameters word IEnumerable<TObject> The word. returnValue TReturn The return value. Returns Trie<TObject, TReturn> Build() Builds this instance. public Trie<TObject, TReturn> Build() Returns Trie<TObject, TReturn> FindAll(List<TObject>) Finds all added words in the text. public IEnumerable<TReturn> FindAll(List<TObject> text) Parameters text List<TObject> The text to search in. Returns IEnumerable<TReturn> The values that were added for the found words. FindAll(ReadOnlySpan<TObject>) Finds all added words in the text. public IEnumerable<TReturn> FindAll(ReadOnlySpan<TObject> text) Parameters text ReadOnlySpan<TObject> The text to search in. Returns IEnumerable<TReturn> The values that were added for the found words. FindAll(Span<TObject>) Finds all added words in the text. public IEnumerable<TReturn> FindAll(Span<TObject> text) Parameters text Span<TObject> The text to search in. Returns IEnumerable<TReturn> The values that were added for the found words. FindAll(TObject[]) Finds all added words in the text. public IEnumerable<TReturn> FindAll(TObject[] text) Parameters text TObject[] The text to search in. Returns IEnumerable<TReturn> The values that were added for the found words. FindAny(List<TObject>) Finds the first added word in the text. public TReturn FindAny(List<TObject> text) Parameters text List<TObject> The text. Returns TReturn The first value that was found. The default value is returned if nothing is found. FindAny(ReadOnlySpan<TObject>) Finds the first added word in the text. public TReturn FindAny(ReadOnlySpan<TObject> text) Parameters text ReadOnlySpan<TObject> The text. Returns TReturn The first value that was found. The default value is returned if nothing is found. FindAny(Span<TObject>) Finds the first added word in the text. public TReturn FindAny(Span<TObject> text) Parameters text Span<TObject> The text. Returns TReturn The first value that was found. The default value is returned if nothing is found. FindAny(TObject[]) Finds the first added word in the text. public TReturn FindAny(TObject[] text) Parameters text TObject[] The text. Returns TReturn The first value that was found. The default value is returned if nothing is found."
  },
  "api/BigBook.Vector3.html": {
    "href": "api/BigBook.Vector3.html",
    "title": "Class Vector3 | Big Book of DataTypes API Reference",
    "keywords": "Class Vector3 Namespace BigBook Assembly BigBook.dll Vector class (holds three items) public class Vector3 Inheritance object Vector3 Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Vector3(double, double, double) Constructor public Vector3(double x, double y, double z) Parameters x double X direction y double Y direction z double Z direction Properties Array Used for converting this to an array and back public double[] Array { get; set; } Property Value double[] Magnitude Returns the magnitude of the vector public double Magnitude { get; } Property Value double X X value public double X { get; set; } Property Value double Y Y Value public double Y { get; set; } Property Value double Z Z value public double Z { get; set; } Property Value double Methods Add(Vector3, Vector3) Adds the two values public static Vector3 Add(Vector3 left, Vector3 right) Parameters left Vector3 The left. right Vector3 The right. Returns Vector3 The results Angle(Vector3, Vector3) Determines the angle between the vectors public static double Angle(Vector3 v1, Vector3 v2) Parameters v1 Vector3 Vector 1 v2 Vector3 Vector 2 Returns double Angle between the vectors CompareTo(Vector3) Compares the two vectors. public int CompareTo(Vector3 other) Parameters other Vector3 The other. Returns int The result. Distance(Vector3, Vector3) The distance between two vectors public static double Distance(Vector3 v1, Vector3 v2) Parameters v1 Vector3 Vector 1 v2 Vector3 Vector 2 Returns double Distance between the vectors Divide(Vector3, double) Divides the specified values. public static Vector3 Divide(Vector3 left, double right) Parameters left Vector3 The left. right double The right. Returns Vector3 The result DotProduct(Vector3, Vector3) Does a dot product public static double DotProduct(Vector3 v1, Vector3 v2) Parameters v1 Vector3 Vector 1 v2 Vector3 Vector 2 Returns double a dot product Equals(object) Determines if the items are equal public override bool Equals(object obj) Parameters obj object Object to compare Returns bool true if they are, false otherwise GetHashCode() Gets the hash code public override int GetHashCode() Returns int The hash code Interpolate(Vector3, Vector3, double) Interpolates between the vectors public static Vector3 Interpolate(Vector3 v1, Vector3 v2, double control) Parameters v1 Vector3 Vector 1 v2 Vector3 Vector 2 control double Percent to move between 1 and 2 Returns Vector3 The interpolated vector Multiply(Vector3, Vector3) Multiplies the specified values. public static Vector3 Multiply(Vector3 left, Vector3 right) Parameters left Vector3 The left. right Vector3 The right. Returns Vector3 The result Negate(Vector3) Negates the specified item. public static Vector3 Negate(Vector3 item) Parameters item Vector3 The item. Returns Vector3 The result. Normalize() Normalizes the vector public Vector3 Normalize() Returns Vector3 This Subtract(Vector3, Vector3) Subtracts the specified vectors. public static Vector3 Subtract(Vector3 left, Vector3 right) Parameters left Vector3 The left. right Vector3 The right. Returns Vector3 The resulting vector ToString() To string function public override string ToString() Returns string String representation of the vector Operators operator +(Vector3, Vector3) Addition public static Vector3 operator +(Vector3 v1, Vector3 v2) Parameters v1 Vector3 Item 1 v2 Vector3 Item 2 Returns Vector3 The resulting vector operator /(Vector3, double) Division public static Vector3 operator /(Vector3 v1, double d) Parameters v1 Vector3 Item 1 d double Item 2 Returns Vector3 The resulting vector operator ==(Vector3, Vector3) Equals public static bool operator ==(Vector3 v1, Vector3 v2) Parameters v1 Vector3 Item 1 v2 Vector3 Item 2 Returns bool The resulting vector operator >(Vector3, Vector3) Greater than public static bool operator >(Vector3 v1, Vector3 v2) Parameters v1 Vector3 Item 1 v2 Vector3 Item 2 Returns bool The resulting vector operator >=(Vector3, Vector3) Greater than or equal public static bool operator >=(Vector3 v1, Vector3 v2) Parameters v1 Vector3 Item 1 v2 Vector3 Item 2 Returns bool The resulting vector operator !=(Vector3, Vector3) Not equals public static bool operator !=(Vector3 v1, Vector3 v2) Parameters v1 Vector3 Item 1 v2 Vector3 Item 2 Returns bool The resulting vector operator <(Vector3, Vector3) Less than public static bool operator <(Vector3 v1, Vector3 v2) Parameters v1 Vector3 Item 1 v2 Vector3 Item 2 Returns bool The resulting vector operator <=(Vector3, Vector3) Less than or equal public static bool operator <=(Vector3 v1, Vector3 v2) Parameters v1 Vector3 Item 1 v2 Vector3 Item 2 Returns bool The resulting vector operator *(Vector3, Vector3) Does a cross product public static Vector3 operator *(Vector3 v1, Vector3 v2) Parameters v1 Vector3 Item 1 v2 Vector3 Item 2 Returns Vector3 The resulting vector operator *(Vector3, double) Multiplication public static Vector3 operator *(Vector3 v1, double d) Parameters v1 Vector3 Item 1 d double Item 2 Returns Vector3 The resulting vector operator *(double, Vector3) Multiplication public static Vector3 operator *(double d, Vector3 v1) Parameters d double Item 2 v1 Vector3 Item 1 Returns Vector3 The resulting vector operator -(Vector3, Vector3) Subtraction public static Vector3 operator -(Vector3 v1, Vector3 v2) Parameters v1 Vector3 Item 1 v2 Vector3 Item 2 Returns Vector3 The resulting vector operator -(Vector3) Negation public static Vector3 operator -(Vector3 v1) Parameters v1 Vector3 Item 1 Returns Vector3 The resulting vector"
  },
  "api/BigBook.VersionInfo.html": {
    "href": "api/BigBook.VersionInfo.html",
    "title": "Enum VersionInfo | Big Book of DataTypes API Reference",
    "keywords": "Enum VersionInfo Namespace BigBook Assembly BigBook.dll Version info [Flags] public enum VersionInfo Fields LongVersion = 1 Long version ShortVersion = 0 Short version"
  },
  "api/BigBook.Vertex-1.html": {
    "href": "api/BigBook.Vertex-1.html",
    "title": "Class Vertex<T> | Big Book of DataTypes API Reference",
    "keywords": "Class Vertex<T> Namespace BigBook Assembly BigBook.dll Vertex within the graph public class Vertex<T> Type Parameters T Data type saved in the vertex Inheritance object Vertex<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Vertex(T, Graph<T>) Initializes a new instance of the Vertex<T> class. public Vertex(T data, Graph<T> graph) Parameters data T The data. graph Graph<T> The graph. Properties Data Gets or sets the data. public T Data { get; set; } Property Value T The data. IncomingEdges Gets the incoming edges. public List<Edge<T>> IncomingEdges { get; } Property Value List<Edge<T>> The incoming edges. OutgoingEdges Gets the outgoing edges. public List<Edge<T>> OutgoingEdges { get; } Property Value List<Edge<T>> The outgoing edges. Methods AddOutgoingEdge(Vertex<T>) Adds an outgoing edge to the vertex specified public Edge<T> AddOutgoingEdge(Vertex<T> sink) Parameters sink Vertex<T> The sink. Returns Edge<T> The new edge Remove() Removes all edges from this vertex and removes it from the graph. public Vertex<T> Remove() Returns Vertex<T> This RemoveEdge(Edge<T>) Removes the edge. public Vertex<T> RemoveEdge(Edge<T> edge) Parameters edge Edge<T> The edge. Returns Vertex<T> This"
  },
  "api/BigBook.html": {
    "href": "api/BigBook.html",
    "title": "Namespace BigBook | Big Book of DataTypes API Reference",
    "keywords": "Namespace BigBook Classes AsyncHelper Async helper. Bag<T> Used to count the number of times something is added to the list BinaryTree<T> Binary tree BloomFilter<TObject> Bloom filter DateSpan Represents a date span Dynamo Dynamic object implementation Dynamo<TClass> Dynamic object implementation (used when inheriting) Edge<T> Edge pointing from vertex source to vertex sink Fraction Represents a fraction Graph<T> Class used to represent a graph LazyAsync<T> Lazy class that handles asyc ListMapping<T1, T2> Maps a key to a list of data ManyToManyIndex<TFirst, TSecond> Two way, many to many index Matrix Matrix used in linear algebra ObservableList<T> Observable List class PriorityQueue<T> Helper class that implements a priority queue RingBuffer<T> Implements a ring buffer Row Holds an individual row Set<T> Class to be used for sets of data StringTrie Special case Table Holds tabular information TagDictionary<TKey, TValue> Dictionary that matches multiple keys to each value TaskQueue<T> Class that helps with running tasks in parallel on a set of objects (that will come in on an ongoing basis, think producer/consumer situations) TreeNode<T> Node class for the Binary tree Trie<TObject, TReturn> Trie class Vector3 Vector class (holds three items) Vertex<T> Vertex within the graph Structs Change Change class Enums CharIs What type of character is this DateCompare Date comparison type MinificationType Minification type StringCase What sort of string capitalization should be used? StringCompare What type of string comparison are we doing? StringFilter Predefined filters TimeFrame Time frame VersionInfo Version info Delegates BloomFilter<TObject>.HashFunction Hash function delegate"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome | Big Book of DataTypes API Reference",
    "keywords": "Welcome Welcome to the API browser."
  },
  "articles/example2.html": {
    "href": "articles/example2.html",
    "title": "Code | Big Book of DataTypes API Reference",
    "keywords": "Code namespace BigBook.Example { /// <summary> /// Example 2. This example shows how to use the ListMapping class. /// </summary> public static class Example2 { /// <summary> /// ListMapping example. /// </summary> public static void ListMappings() { // Now for one of the many data types that are available. This one lets you have lists of items that are grouped by a key. var BucketFilterExample = new ListMapping<string, ExampleClass>(); BucketFilterExample.Add(\"Test\", new ExampleClass { Name = \"Test\", Value = 5 }); BucketFilterExample.Add(\"Test\", new ExampleClass { Name = \"Test\", Value = 10 }); BucketFilterExample.Add(\"Test2\", new ExampleClass { Name = \"Test2\", Value = 15 }); BucketFilterExample.Add(\"Test2\", new ExampleClass { Name = \"Test2\", Value = 20 }); BucketFilterExample.Add(\"Test3\", new ExampleClass { Name = \"Test3\", Value = 25 }); BucketFilterExample.Add(\"Test3\", new ExampleClass { Name = \"Test3\", Value = 30 }); // Now we can get the values back out and they will be grouped by the key. // This also uses the extension method that is available to convert the list to a joined string. Console.WriteLine(\"Test1: {0}\", BucketFilterExample[\"Test\"].ToString(x => x.Value.ToString(), \", \")); Console.WriteLine(\"Test2: {0}\", BucketFilterExample[\"Test2\"].ToString(x => x.Value.ToString(), \", \")); Console.WriteLine(\"Test3: {0}\", BucketFilterExample[\"Test3\"].ToString(x => x.Value.ToString(), \", \")); } } } Output Test1: 5, 10 Test2: 15, 20 Test3: 25, 30"
  },
  "articles/example3.html": {
    "href": "articles/example3.html",
    "title": "Code | Big Book of DataTypes API Reference",
    "keywords": "Code namespace BigBook.Example { /// <summary> /// Example 3. This example shows how to use the LazyAsync class. /// </summary> public static class Example3 { /// <summary> /// Asynchronous lazy loading. /// </summary> public static async Task AsyncLazyLoading() { // This is an example of the lazy async class. It will only run the function when the value is requested. var TestObject = new LazyAsync<int>(async () => { await Task.Delay(500).ConfigureAwait(false); return 5; }); // This will take 500ms to run and will return 5. Console.WriteLine(await TestObject); } } } Output 5"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Code | Big Book of DataTypes API Reference",
    "keywords": "Code namespace BigBook.Example { /// <summary> /// Example 1. This example shows how to use some of the string extensions. /// </summary> public static class Example1 { /// <summary> /// String extension example. /// </summary> public static void StringExtensions() { // This is an example of one of the many extensions that are available. This one is used to keep only the characters you want. // In this case, it will only keep the letters. var ExampleString = \"This is an example string #1\".Keep(StringFilter.Alpha); Console.WriteLine(ExampleString); // In this case, it will only keep the letters and numbers. ExampleString = \"This is an example string #2\".Keep(StringFilter.Alpha | StringFilter.Numeric); Console.WriteLine(ExampleString); // You can also use regular expressions. This one will keep everything. ExampleString = \"This is an example string #3\".Keep(@\"[\\s\\d\\S]\"); Console.WriteLine(ExampleString); // There are a ton of extra extension methods available. This one will add spaces to the string by splitting on upper case letters. // This is useful for converting PascalCase to a sentence. ExampleString = nameof(Example1.StringExtensions).AddSpaces(); Console.WriteLine(ExampleString); } } } Output Thisisanexamplestring Thisisanexamplestring2 This is an example string #3 String Extensions"
  },
  "index.html": {
    "href": "index.html",
    "title": "Big Book of Data Types | Big Book of DataTypes API Reference",
    "keywords": "Big Book of Data Types Big Book of Data Types is a set of classes and extension methods to help with data. This includes classes for caching, data comparison, data conversion, data mapping, string formatting, as well as various data types that are missing from .Net. Setting Up the Library Depending on the features you use in Big Book of Data Types, you may need to register it with your ServiceCollection as the Dynamo class requires it in order to hook itself up. In order for this to work, you must do the following at startup: services.RegisterBigBookOfDataTypes(); or services.AddCanisterModules(); As the library supports Canister Modules. The RegisterBigBookOfDataTypes function is an extension method on your app's ServiceCollection. When this is done, the Dynamo class is ready to use. If you are not using that class, you should be able to go without registration. Basic usage Most of the library is simply data types that can be used fairly easily. These include: Bag BinaryTree DateSpan Fraction ListMapping Matrix ObservableList PriorityQueue RingBuffer Set Table TagDictionary TaskQueue Vector3 Similarly the extension methods for various types can be found by adding: using BigBook; To your list of usings. From there a number of extension methods should be available for arrays, IEnumerable, string, ConcurrentBag, ConcurrentDictionary, DateTime, Exception, ICollection, IComparable, IDictionary, MatchCollection, Process, Stream, TimeSpan, etc. There are a couple hundred extension methods and I suggest you just take a look at them to see what they do. Another portion of the library that might be of some interest and yet not completely intuitive is the Dynamo class. Dynamo is a true dynamic type for .Net. ExpandoObject is generally great for basic work that requires a dynamic, however it is not easy to convert to other data types. For instance you can't do this: dynamic MyDynamicValue=new ExpandoObject(); SomeClass FinalObject=MyDynamicValue; Dynamo, on the other hand, has no issues with this: dynamic MyDynamicValue=new Dynamo(); SomeClass FinalObject=MyDynamicValue; The class handles conversion to and from class types, can convert properties from one type to another, and comes with a set of built in functionality. The class implements INotifyPropertyChanged, has a built in change log, and is thread safe. It can also be added as a base class for other classes to add this functionality automatically. Installation The library is available via Nuget with the package name \"BigBook\". To install it run the following command in the Package Manager Console: Install-Package BigBook Build Process In order to build the library you will require the following: Visual Studio 2022 Other than that, just clone the project and you should be able to load the solution and build without too much effort."
  }
}